{"version":3,"sources":["logo.svg","../node_modules/encoding/lib sync","components/LightBook.js","components/SolidBook.js","components/Header.js","components/BookButtonToRead.js","components/BookButtonAlreadyRead.js","components/SelectRating.js","components/Notes.js","components/ReadDate.js","components/EditBookForm.js","components/BookButtonRemove.js","components/BookButtonMoveToAlreadyRead.js","base.js","components/ReplaceCover.js","components/Stars.js","components/BookDate.js","components/SelectGenre.js","components/SelectTags.js","components/NewDatePicker.js","components/BookEditor.js","components/NewBookForm.js","components/BookModal.js","components/BookButtonBanFromSuggestions.js","components/BookCard.js","components/RecentlyAddedToRead.js","components/RecentlyAddedAlreadyRead.js","components/Landing.js","components/Input.js","utils/API.js","components/Results.js","components/Search.js","components/RecommendationsSection.js","components/Recommended.js","components/Logout.js","components/ChangePassword.js","components/DeleteAccount.js","components/SelectThemeColor.js","components/SelectThemeFont.js","components/SelectBookSize.js","components/SelectUseGenres.js","components/SelectUseTags.js","components/SelectDateDefault.js","components/Settings.js","components/NotFound.js","components/SelectToReadView.js","components/SavedForLater.js","components/SelectAlreadyReadView.js","components/AdvancedStats.js","components/AuthorList.js","components/SelectFilter.js","components/PreviouslyRead.js","components/Register.js","components/Router.js","components/BookManager.js","components/LostPassword.js","components/Login.js","components/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","LightBook","props","icon","faBook","SolidBook","Header","className","settingsColor","settingsFont","href","aria-label","faSearch","faCog","BookButtonToRead","createNewBook","event","preventDefault","console","log","book","newBook","addBookToRead","state","title","onClick","this","React","Component","SelectRating","defaultRating","myRatingToPublish","defaultRatingPublish","value","label","ratingOptions","placeholder","options","defaultValue","isClearable","isSearchable","onChange","setRating","ReadDate","useState","Date","setSelectedDate","formattedDate","bookshelfTimestamp","toISOString","slice","TextField","required","type","InputLabelProps","shrink","date","currentTarget","getCompletedDate","EditBookForm","bookshelfRating","bookNotes","bookshelfNote","editThisBook","undefined","entry","editBook","selectedOption","setState","updatedTimestamp","parseInt","getTime","toFixed","currentlyEditing","JSON","stringify","onSubmit","hideRating","hideDate","BookButtonRemove","removeThisBook","bookObj","context","removeBookFromAlreadyRead","removeBookFromToRead","window","confirm","faTrashAlt","BookButtonMoveToAlreadyRead","moveBooktoAlreadyRead","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","ReplaceCover","require","handleChangeUsername","username","target","handleUploadStart","isUploading","progress","handleProgress","handleUploadError","error","handleUploadSuccess","filename","bookCover","storage","ref","child","getDownloadURL","then","url","bookCoverURL","cancelUpload","setNewCover","updateCoverImg","isEditing","replaceCoverForm","style","hidden","accept","randomizeFilename","storageRef","onUploadStart","onUploadError","onUploadSuccess","onProgress","src","Stars","rating","stars","BookDate","SelectGenre","handleCreateLabel","inputValue","actionMeta","genreTypes","genres","defaultGenreTypeRaw","defaultGenre","genreTypesToSelect","forEach","push","defaultGenreTypeSelect","formatCreateLabel","setGenre","SelectTags","addTagToState","tags","madeChange","handleTagsSubmit","tagsObj","tagsArray","length","map","x","addNewTag","setBookTags","defaultTags","allTags","defaultTagsRaw","tagTypesToSelect","key","updatedDefaults","i","isMulti","NewDatePicker","handleDateSubmit","newDateTimestamp","parse","setBookTimestamp","locale","maxDate","shortid","BookEditor","customToggle","currentlyEditingRating","setBookRating","resetRating","resetRatingToZero","resetTimestamp","resetTimestampToZero","resetGenre","genre","resetGenreToZero","resetTags","resetAllTags","currentlyEditingTags","currentlyEditingGenre","currentlyEditingDate","setBookGenre","addNewGenre","setTags","selectedDate","handleDateChange","theDate","prevState","viewDescription","description","ratingArea","faEdit","faMinusCircle","dateArea","dateCompleted","genreArea","currentTags","tag","generate","tagArea","useGenres","useTags","Accordion","Toggle","as","Button","variant","eventKey","Collapse","dangerouslySetInnerHTML","__html","NewBookForm","defaultDate","bookshelfGenre","bookshelfTags","currentView","newImprovedEditBook","closeModal","removeDate","dateRemoved","showDatePicker","showDate","madeTagChange","volumeInfo","BookModal","show","setShow","handleClose","handleShow","showDescription","bookCoverModal","bookTitleModal","newBookForm","coverImageURL","subtitle","hasSubtitle","authors","authorClass","authorsToPublish","dateToPublish","pageCount","descriptionToPublish","searchResult","categories","publishedDate","toLocaleString","month","day","year","coverImg","join","toString","substring","alreadyRead","startsWith","replace","Modal","onHide","closeButton","Title","Body","savedForLater","Footer","removeBook","additionalModalClasses","BookButtonBanFromSuggestions","clickRemoveBookSuggested","removeBookFromSuggestions","BookCard","showNewBookForm","slugify","text","toLowerCase","normalize","trim","originalBookJSON","connected","imageLinks","thumbnail","large","medium","small","smallThumbnail","dataGenre","data-rating","data-genre","addBookAlreadyRead","createNotification","toRead","RecentlyAddedToRead","booksToRead","orderedBooksToPublish","sort","a","b","index","addNewImagesToRead","RecentlyAddedAlreadyRead","booksAlreadyRead","addNewImagesAlreadyRead","Landing","notification","Input","axios","get","Results","books","noResults","data","location","results","filter","notificationArea","currentTimestamp","now","notificationTimestamp","Search","handleInputChange","name","handleFormSubmit","API","res","items","toResults","catch","err","to","pathname","RecommendationsSection","searching","forceUpdateHandler","bind","authorsRaw","author","forceUpdate","removedFromSuggestions","banned","filteredBooksByAuthor","some","r","indexOf","currentShelfIDs","filteredBooksRemoveDups","includes","removedBanned","removedForeign","bookLanguage","hasOwnProperty","language","uniqueBooks","Array","from","Set","find","bookIndices","Math","floor","random","finalBooksToPublish","arrayIndex","Recommended","calculating","array","splice","starRatingsArray","avg","reduce","previous","current","rawAuthors","flat","removeDuplicates","authorsObj","bookArrayByAuthor","avgRatingForAuthor","getAverageRating","avgRating","authorListToPublish","Logout","logOutUser","ChangePassword","resetPassword","DeleteAccount","deleteAccount","SelectThemeColor","setColor","changeSettingsColor","myColorToPublish","defaultColorPublish","colorOptions","SelectThemeFont","setFont","changeSettingsFont","SelectBookSize","setBookSize","changeSettingsBookSize","settingsBookSize","bookSize","myBookSizesToPublish","defaultBookSizePublish","bookSizes","SelectUseGenres","setUseGenres","changeSettingsUseGenres","settingsUseGenres","myGenreSettingsToPublish","defaultUseGenres","SelectUseTags","setUseTags","changeSettingsUseTags","settingsUseTags","myTagSettingsToPublish","defaultUseTags","setDefaultDate","changeDefaultDate","defaultDateSetting","dateSettingToPublish","Settings","auth","emailAddress","loggedInEmail","sendPasswordResetEmail","emailedResetLink","user","currentUser","delete","permanentlyDeleteUserAndInfo","SelectDateDefault","NotFound","SelectToReadView","setView","changeToReadView","defaultView","myViewToPublish","defaultViewPublish","SavedForLater","booksToReadView","orderedBooks","titleForSorting","SelectAlreadyReadView","changeAlreadyReadView","AdvancedStats","getTotalPages","totalPages","avgToPublish","booksNoDateAssigned","booksWithDate","yearlyChart","prevDateYear","getFullYear","currentYearBooks","j","currentBookYear","getYear","SelectFilter","selectRating","setRatingFilter","clearRatingFilter","selectAuthor","setAuthorFilter","clearAuthorFilter","selectGenre","setGenreFilter","clearGenreFilter","selectTag","setTagFilter","clearTagFilter","currentSelection","filterOptions","split","Boolean","localeCompare","ignorePunctuation","PreviouslyRead","orderBooks","bookOrderString","booksArray","booksAlreadyReadView","string","genreFilter","authorFilter","tagFilter","number","ratingFilter","clearAllFilters","filteredBooksInOrder","displayedBooks","showHideStats","showStats","showHideFilters","showFilters","bookOrder","filteredBooks","myBookTags","minRating","clearButton","FormControlLabel","control","Switch","checked","inputProps","Register","handleSubmit","email","password","createUserWithEmailAndPassword","registerNewUser","message","Router","basename","exact","path","component","render","loggedInID","editBookToRead","BookManager","fetchCoverImage","publisher","createAlphabeticalSortingTitle","notes","googleLink","selfLink","bookTitle","startNotificationTimer","fetch","json","extraLarge","bookID","clbCopyBookState","bookToUpdate","obj","getBookObjInState","findIndex","ids","view","allTagsArray","prevTags","settings","difference","updatedTags","concat","newGenre","previousGenres","included","updatedGenres","orderedGenres","sortViewAlreadyRead","newBookCardView","sortViewToRead","newBookSize","newGenreSetting","newTagsSetting","newSettingsColor","color","localStorageKey","localStorage","setItem","newSettingsFont","font","newDefaultDate","resetNotification","timerId","setTimeout","updatedTitle","substr","previousRemoved","updatedRemoved","customFields","syncState","asArray","localStorageKeyColor","settingsColorLocal","getItem","localStorageKeyFont","settingsFontLocal","updatedBooksToRead","updatedBooksAlreadyRead","LostPassword","sentEmailAddress","showModal","sentEmail","handleEmailChange","emailAdress","Login","handleRegistrationSubmit","handlePWChange","handleShowRegister","handleCloseRegister","authenticateUser","loginError","LandingPage","App","newUserID","uid","newUserEmail","update","ownerID","ownerEmail","signInWithEmailAndPassword","authHandler","authData","async","userUID","signOut","removeItem","reset","remove","loggedInIDLocal","loggedInEmailLocal","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c1bfd39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 329;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-light-svg-icons';\n\nconst LightBook = (props) => (\n     <FontAwesomeIcon icon={faBook} />\n)\n\nexport default LightBook;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nconst SolidBook = (props) => (\n     <FontAwesomeIcon icon={faBook} />\n)\n\nexport default SolidBook;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import { faCog, faSearch } from '@fortawesome/pro-duotone-svg-icons';\nimport { faCog, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\nimport LightBook from './LightBook';\nimport SolidBook from './SolidBook';\n\n\nfunction Header(props) {\n  return (\n    <header className={\"header color-\" + props.settingsColor + \" font-\" + props.settingsFont}>\n      <h1 className=\"logo-area\"><a href=\"/bookshelf/\">Bookshelf</a></h1>\n      <nav className=\"nav-primary\" aria-label=\"Main\" id=\"bookshelf-nav-primary\" className=\"main-menu\">\n           <ul id=\"menu-main-menu\" className=\"menu-main-menu\">\n                <li id=\"menu-item-search\" className=\"menu-item search\"><a href=\"#search\"><FontAwesomeIcon icon={faSearch} /> New Books</a></li>\n                <li id=\"menu-item-saved\" className=\"menu-item saved\"><a href=\"#saved\"><LightBook /> To Read</a></li>\n                <li id=\"menu-item-read\" className=\"menu-item read\"><a href=\"#read\"><SolidBook /> Already Read</a></li>\n                <li id=\"menu-item-settings\" className=\"menu-item settings\"><a href=\"#settings\"><FontAwesomeIcon icon={faCog} /> Settings</a></li>\n           </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-light-svg-icons';\n\nclass BookButtonToRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.addBookToRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action to-read\"\n                    title=\"Add to your To Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonToRead;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nclass BookButtonAlreadyRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n          //console.log(this.props.addBookAlreadyRead);\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.addBookAlreadyRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action already-read\"\n                    title=\"Add to your Already Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonAlreadyRead;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectRating extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n\n     render() {\n\n          const defaultRating = this.props.defaultRating;\n          console.log(defaultRating);\n\n               var myRatingToPublish = null;\n               if( defaultRating === '5' ) { myRatingToPublish = '⭐⭐⭐⭐⭐ Life-Changing'; }\n               if( defaultRating === '4' ) { myRatingToPublish = '⭐⭐⭐⭐ Great'; }\n               if( defaultRating === '3' ) { myRatingToPublish = '⭐⭐⭐ Good'; }\n               if( defaultRating === '2' ) { myRatingToPublish = '⭐⭐ OK'; }\n               if( defaultRating === '1' ) { myRatingToPublish = \"⭐ Bad / Didn't Finish\"; }\n\n          let defaultRatingPublish = {\n               value: defaultRating,\n               label: myRatingToPublish\n          };\n          if( defaultRating === null ) { defaultRatingPublish = null; }\n          //console.log(defaultRating);\n\n          const ratingOptions = [\n               { value: '5', label: '⭐⭐⭐⭐⭐ Life-Changing' },\n               { value: '4', label: '⭐⭐⭐⭐ Great' },\n               { value: '3', label: '⭐⭐⭐ Good' },\n               { value: '2', label: '⭐⭐ OK' },\n               { value: '1', label: \"⭐ Bad / Didn't Finish\" }\n          ];\n\n          if( defaultRating ) {\n\n               return (\n                 <Select\n                    placeholder='Set Rating'\n                    options={ratingOptions}\n                    defaultValue={defaultRatingPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.props.setRating}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Set Rating'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.props.setRating}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectRating;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nclass Notes extends React.Component {\n\n     useStyles = makeStyles(theme => ({\n       root: {\n         '& > *': {\n           margin: theme.spacing(1),\n           marginLeft: 0\n         },\n       },\n     }));\n\n  classes = this.useStyles;\n\n //  onChange = (event) => {\n //       console.log(event.target.value);\n // }\n\nrender() {\n\n          const edit = this.props.edit;\n\n          if( edit ) {\n\n       return (\n\n           <TextField\n               id=\"notes-basic-outline\"\n               defaultValue={this.props.defaultValue}\n               label={this.props.placeholder}\n               fullWidth\n               multiline\n               rows=\"4\"\n               onChange={this.props.setNotes}\n               />\n\n       );\n\n } else {\n\n      return (\n\n          <TextField\n              id=\"outlined-basic\"\n              defaultValue={this.props.defaultValue}\n              label={this.props.placeholder}\n              fullWidth\n              multiline\n              rows=\"4\"\n              onChange={this.props.setNotes}\n              />\n\n      );\n\n}\n\n}\n\n}\n\nexport default Notes;\n","//import 'date-fns';\nimport React from 'react';\n//import DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function ReadDate(props) {\n\n// The first commit of Material-UI\nconst [selectedDate, setSelectedDate] = React.useState(new Date());\n\nconst handleDateChange = date => {\n     console.log(date.currentTarget.value);\n     setSelectedDate(date.currentTarget.value);\n     props.getCompletedDate(date.currentTarget.value);\n};\n\nlet bookshelfTimestamp = 0;\nlet formattedDate = 0;\nif( props.bookshelfTimestamp ) {\n     bookshelfTimestamp = new Date(props.bookshelfTimestamp);\n     formattedDate = bookshelfTimestamp.toISOString().slice(0,10);\n} else {\n     bookshelfTimestamp = new Date();\n     formattedDate = bookshelfTimestamp.toISOString().slice(0,10);\n}\n\nconsole.log(formattedDate);\n\nreturn (\n     <TextField\n         id=\"date\"\n         required\n         label=\"Date Completed\"\n         type=\"date\"\n         defaultValue={formattedDate}\n         className=\"book-date-field\"\n         InputLabelProps={{\n           shrink: true,\n         }}\n         onChange={handleDateChange}\n  />\n);\n\n}\n","import React from 'react';\nimport Select from 'react-select';\n//import Notes from './Notes';\nimport SelectRating from './SelectRating';\nimport Notes from './Notes';\nimport ReadDate from './ReadDate';\n\n///////////////////////////////////////////////////////////////////////\n\n\nclass EditBookForm extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               currentlyEditing: true,\n               book: this.props.book,\n               bookshelfNote: this.props.bookshelfNote,\n               bookshelfRating: this.props.bookshelfRating\n          }\n     }\n\n\n\n     id = this.props.book.id;\n     bookshelfRating = this.props.bookshelfRating;\n     bookNotes = this.props.bookshelfNote;\n     bookshelfTimestamp = this.props.bookshelfTimestamp;\n\n\n     editThisBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          const book = this.state.book;\n          console.log(book);\n\n          // Make sure no fields cause \"undefined\" errors even if missing info\n               // if( this.count === undefined ) { this.count = 0; }\n               // if( this.type_of_beer === undefined ) { this.type_of_beer = ''; }\n               // if( this.brewery_name === undefined ) {\n               //      this.brewery_name = '';\n               //      this.brewery_slug = '';\n               // }\n\n               console.log(this.state.book.bookshelfTimestamp);\n\n               //timestamp fix\n               //let updatedDate =\n\n\n               if( this.bookshelfTimestamp === undefined ) { this.bookshelfTimestamp = this.state.book.bookshelfTimestamp; }\n               if( this.bookshelfRating === undefined ) { this.bookshelfRating = this.state.book.bookshelfRating; }\n               if( this.bookNotes === undefined ) { this.bookNotes = []; }\n\n               book.bookshelfRating = this.bookshelfRating;\n               book.bookshelfNote = this.bookNotes;\n               book.bookshelfTimestamp = this.bookshelfTimestamp;\n               const entry = book;\n\n          console.log(entry);\n          // console.log(this.props.editCurrentBeer);\n          // 2 add the new beer to state (App.js)\n          this.props.editBook(entry);\n\n     }\n\n     setRating = (selectedOption) => {\n          if(selectedOption) {\n               this.bookshelfRating = selectedOption.value;\n               this.setState({ bookshelfRating: selectedOption.value });\n          }\n          else {\n               this.setState({ bookshelfRating: 505 });\n          }\n\n     }\n\n     // setNotes = (event) => {\n     //      this.bookNotes = (event.target.value);\n     // }\n\n     getCompletedDate = (date) => {\n          //this.bookshelfTimestamp = date;\n          console.log(\"Completed DATE: \" + this.bookshelfTimestamp);\n          let updatedTimestamp = parseInt((new Date(date).getTime()).toFixed(0));\n          console.log(updatedTimestamp);\n          this.bookshelfTimestamp = updatedTimestamp;\n     }\n\n\nrender() {\n\n     console.log(\"Current book: \" + JSON.stringify(this.props.book));\n     console.log(\"Current book RATING: \" + JSON.stringify(this.props.bookshelfRating));\n     const defaultRating = this.props.bookshelfRating;\n     //const bookshelfNote = this.props.bookshelfNote;\n     const bookshelfTimestamp = this.props.bookshelfTimestamp;\n     //console.log(\"NOTE: \" + bookshelfNote);\n\n       return (\n            <>\n\n            <form className=\"edit-book\" onSubmit={this.editThisBook} >\n               <div className=\"top-info-line\">\n                      { this.props.hideRating !== true &&\n                         <div className=\"book-rating-area\">\n                         <SelectRating\n                              setRating={this.setRating}\n                              defaultRating={defaultRating}\n                         />\n                         </div>\n                    }\n                    { this.props.hideDate !== true &&\n                         <div className=\"book-date-area\">\n                         <ReadDate\n                              bookshelfTimestamp={bookshelfTimestamp}\n                              getCompletedDate={this.getCompletedDate}\n                         />\n                         </div>\n                    }\n               </div>\n\n               <button type=\"submit\" className=\"update-this-book\">Save Changes</button>\n            </form>\n         </>\n       );\n     }\n\n}\n\n\nexport default EditBookForm;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/pro-light-svg-icons';\n\nclass BookButtonRemove extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     removeThisBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          // console.log(this.props.book);\n          // console.log(this.props.context);\n          // console.log(this.props.removeBookFromAlreadyRead);\n          const bookObj = this.props.book;\n\n          if(this.props.context === 'removeBookFromAlreadyRead') {\n               this.props.removeBookFromAlreadyRead(bookObj);\n          }\n\n          if(this.props.context === 'removeBookFromToRead') {\n               this.props.removeBookFromToRead(bookObj);\n          }\n\n\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action remove-book\"\n                    title=\"Permanently remove this book from your collection\"\n                    onClick={event =>\n                 window.confirm(\n                   \"Are you sure you want to delete this book? All of your ratings and notes for this book will also be removed. You cannot undo this action.\"\n              ) && this.removeThisBook(event)\n               }>\n          <FontAwesomeIcon icon={faTrashAlt} />\n          </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonRemove;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nclass BookButtonMoveToAlreadyRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.moveBooktoAlreadyRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action already-read\"\n                    title=\"Move this book to your Already Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonMoveToAlreadyRead;\n","import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n     apiKey: \"AIzaSyDniUweenII-q4xtU2jywgLN_lVEcLNnlM\",\n     authDomain: \"bookshelf-9d11e.firebaseapp.com\",\n     databaseURL: \"https://bookshelf-9d11e.firebaseio.com\",\n     projectId: \"bookshelf-9d11e\",\n     storageBucket: \"bookshelf-9d11e.appspot.com\",\n     messagingSenderId: \"16890829596\",\n     appId: \"1:16890829596:web:44b99ad2e1677bca39f8d9\"\n})\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n// This is a named export\nexport { firebaseApp };\n\n// This is a default export\nexport default base;\n","import React, { Component } from \"react\";\nimport base from '../base';\nimport { firebaseApp } from '../base';\nimport FileUploader from \"react-firebase-file-uploader\";\n\nconst shortid = require('shortid');\n\nclass ReplaceCover extends Component {\n     constructor(props) {\n    super(props);\n       this.state = {\n         bookCover: \"\",\n         isUploading: false,\n         progress: 0,\n         bookCoverURL: \"\",\n         isEditing: true\n       };\n   }\n\n   handleChangeUsername = event =>\n    this.setState({ username: event.target.value });\n   handleUploadStart = () => this.setState({ isUploading: true, progress: 0 });\n   handleProgress = progress => this.setState({ progress });\n   handleUploadError = error => {\n    this.setState({ isUploading: false });\n    console.error(error);\n   };\n   handleUploadSuccess = filename => {\n    this.setState({ bookCover: filename, progress: 100, isUploading: false });\n    firebaseApp\n       .storage()\n       .ref(\"images\")\n       .child(filename)\n       .getDownloadURL()\n       .then(url => this.setState({ bookCoverURL: url }));\n\n   };\n\n\n   cancelUpload = () => {\n        this.setState({ bookCoverURL: '' });\n   }\n\n\n   setNewCover = () => {\n        console.log(this.state.bookCoverURL);\n        console.log(this.props.bookObj);\n        this.props.updateCoverImg(this.state.bookCoverURL, this.props.bookObj);\n   }\n\n\n  render() {\n\n       console.log(this.state.bookCoverURL);\n       let replaceCoverForm = null;\n       if( this.state.bookCoverURL === '' ) {\n            replaceCoverForm = (\n                 <>\n                 <label className=\"button replace-cover\" style={{}}>\n                 <form className=\"replace-book-cover\">\n                Replace Cover\n                <FileUploader\n                      hidden\n                      accept=\"image/*\"\n                      randomizeFilename\n                      storageRef={firebaseApp.storage().ref('images')}\n                      onUploadStart={this.handleUploadStart}\n                      onUploadError={this.handleUploadError}\n                      onUploadSuccess={this.handleUploadSuccess}\n                      onProgress={this.handleProgress}\n                    />\n                    </form>\n           </label>\n         </>);\n       }\n\n    return (\n      <div>\n\n          {this.state.isUploading && <p>Progress: {this.state.progress}</p>}\n          {this.state.bookCoverURL &&\n               <><p>Updated cover:</p><div className=\"updated-cover-thumbnail\"><img src={this.state.bookCoverURL} /></div></>\n          }\n          {replaceCoverForm}\n        { this.state.bookCoverURL &&\n        <button className=\"finalize-new-cover-button\" onClick={this.setNewCover}>Save New Cover</button>\n          }\n          { this.state.bookCoverURL &&\n         <button className=\"cancel-new-cover\" onClick={this.cancelUpload}>Cancel</button>\n           }\n      </div>\n    );\n  }\n}\n\nexport default ReplaceCover;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n\nfunction Stars(props) {\n\n\n     const rating = parseInt(props.bookshelfRating);\n     // console.log(props.bookshelfRating);\n\n     let stars = null;\n     if(rating === 5) {\n          stars = <><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span></>;\n     }\n     else if(rating === 4) {\n          stars = <><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span></>;\n     }\n     else if(rating === 3) {\n          stars = <><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span></>;\n     }\n     else if(rating === 2) {\n          stars = <><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span></>;\n     }\n     else if(rating === 1) {\n          stars = <><span className=\"star-icon\">⭐</span></>;\n     }\n     else {\n          stars = null;\n     }\n\n  return (\n    <div className=\"star-rating-area\">\n          {stars}\n    </div>\n  );\n}\n\nexport default Stars;\n","import React, { Fragment, useState } from \"react\";\nimport { DatePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\n\nfunction BookDate(props) {\n\n     const [selectedDate, handleDateChange] = useState(new Date());\n\n\n  return (\n    <>\n    <KeyboardDatePicker\n        clearable\n        value={selectedDate}\n        onChange={date => handleDateChange(date)}\n        disableFuture\n        format={\"MM/DD/YYYY\"}\n     />\n    </>\n  );\n}\n\nexport default BookDate;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Creatable, { makeCreatableSelect } from 'react-select/creatable';\nimport CreatableSelect from 'react-select/creatable';\n\nclass SelectGenre extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n            };\n     }\n\n     handleCreateLabel = (inputValue: any, actionMeta: any) => {\n          console.log(\"handleCreateLabel\");\n          return 'Create new genre: \"' + inputValue + '\"';\n     }\n\n\n     render() {\n\n          const genreTypes = this.props.genres;\n          const defaultGenreTypeRaw = this.props.defaultGenre;\n          let genreTypesToSelect = [];\n          genreTypes.forEach(value =>\n               genreTypesToSelect.push({ value: value, label: value })\n          );\n\n          if( defaultGenreTypeRaw !== null ) {\n\n               const defaultGenreTypeSelect = { value: defaultGenreTypeRaw, label: defaultGenreTypeRaw }\n\n               return (\n                 <CreatableSelect\n                    placeholder='Genre'\n                    options={genreTypesToSelect}\n                    defaultValue={defaultGenreTypeSelect}\n                    isClearable\n                    isSearchable\n                    formatCreateLabel={this.handleCreateLabel}\n                    onChange={this.props.setGenre}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <CreatableSelect\n                      placeholder='Genre'\n                      options={genreTypesToSelect}\n                    isClearable\n                    isSearchable\n                    value={null}\n                    formatCreateLabel={this.handleCreateLabel}\n                    onChange={this.props.setGenre}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectGenre;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Creatable, { makeCreatableSelect } from 'react-select/creatable';\nimport CreatableSelect from 'react-select/creatable';\n\nconst shortid = require('shortid');\n\nclass SelectTags extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               tags: this.props.defaultTags,\n               madeChange: false,\n            };\n     }\n\n     handleCreateLabel = (inputValue: any, actionMeta: any) => {\n          console.log(\"handleCreateLabel\");\n          return 'Create new tag: \"' + inputValue + '\"';\n     }\n\n     addTagToState = (selectedOption) => {\n          console.log(selectedOption);\n          this.setState({ tags: selectedOption, madeChange: true });\n     }\n\n     handleTagsSubmit = (event) => {\n          event.preventDefault();\n          console.log(\"HANDLE SUBMIT TAGS\");\n          console.log(this.state.tags);\n\n          const tagsObj = this.state.tags;\n          let tagsArray = [];\n          if( tagsObj.length > 0 && tagsObj !== null ) {\n               tagsArray = tagsObj.map(x => x.value);\n          }\n\n          console.log(tagsArray);\n          this.props.addNewTag(tagsArray);\n          this.props.setBookTags(tagsArray, this.props.book);\n     }\n\n     render() {\n\n          const allTags = this.props.allTags;\n          const currentTags = this.state.tags;\n          const defaultTagsRaw = this.props.defaultTags;\n          console.log(defaultTagsRaw);\n          let tagTypesToSelect = [];\n\n          if( allTags !== undefined ) {\n\n                    // allTags.forEach(value =>\n                    //      tagTypesToSelect.push({ value: value, label: value })\n                    // );\n\n               allTags.map((value, key) =>\n                    tagTypesToSelect.push({ value: value, label: value })\n               );\n          }\n\n          if( defaultTagsRaw !== undefined ) {\n\n               console.log(defaultTagsRaw);\n               let updatedDefaults = [];\n               for( let i = 0; i < defaultTagsRaw.length; i++ ) {\n                    updatedDefaults.push({ value: defaultTagsRaw[i], label: defaultTagsRaw[i] })\n               }\n\n               const defaultTagTypeSelect = defaultTagsRaw;\n\n               return (\n                    <form id=\"select-tags-form\" onSubmit={this.handleTagsSubmit} >\n                      <CreatableSelect\n                         isMulti\n                         placeholder='Select Tags'\n                         defaultValue={updatedDefaults}\n                         options={tagTypesToSelect}\n                         isClearable\n                         isSearchable\n                         formatCreateLabel={this.handleCreateLabel}\n                         onChange={this.addTagToState}\n                      />\n                      {this.state.madeChange === true &&\n                           <button className=\"add-tags\">Update Tags</button>\n                      }\n                    </form>\n               );\n\n          } else {\n\n               return (\n                    <form id=\"select-tags-form\" onSubmit={this.handleTagsSubmit} >\n                      <CreatableSelect\n                         isMulti\n                         placeholder='Select Tags'\n                         options={tagTypesToSelect}\n                         isClearable\n                         isSearchable\n                         formatCreateLabel={this.handleCreateLabel}\n                         onChange={this.addTagToState}\n                      />\n                      <button className=\"add-tags\">Update Tags</button>\n                    </form>\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectTags;\n","import React, { Component } from 'react';\nimport DatePicker from 'react-date-picker';\n\nclass NewDatePicker extends Component {\n  state = {\n    date: new Date(),\n    madeChange: false,\n  }\n\n  onChange = date => {\n       this.setState({\n            date,\n            madeChange: true\n       });\n }\n\n handleDateSubmit = (event) => {\n      event.preventDefault();\n      console.log(\"HANDLE DATE SUBMIT\");\n      console.log(this.state.date);\n      const newDateTimestamp = Date.parse(this.state.date);\n      console.log(newDateTimestamp);\n\n      this.setState({\n           madeChange: false\n      });\n\n      this.props.setBookTimestamp(newDateTimestamp, this.props.book);\n}\n\n  render() {\n    return (\n      <div>\n      <form id=\"new-date-form\" onSubmit={this.handleDateSubmit} >\n        <DatePicker\n          locale={\"en-US\"}\n          maxDate={new Date()}\n          required\n          onChange={this.onChange}\n          value={this.state.date}\n        />\n        {this.state.madeChange === true &&\n             <button className=\"save-date\">Save Date</button>\n        }\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewDatePicker;\n","import React from 'react';\nimport Select from 'react-select';\nimport SelectRating from './SelectRating';\nimport Notes from './Notes';\nimport ReadDate from './ReadDate';\nimport Stars from './Stars';\nimport BookDate from './BookDate';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport SelectGenre from './SelectGenre';\nimport SelectTags from './SelectTags';\nimport DateFnsUtils from '@date-io/date-fns';\nimport MomentUtils from '@date-io/moment';\nimport NewDatePicker from './NewDatePicker';\nimport { DatePicker, KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faMinusCircle } from '@fortawesome/pro-light-svg-icons';\n\nconst shortid = require('shortid');\n\n///////////////////////////////////////////////////////////////////////\n\n\nclass BookEditor extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               currentlyEditingRating: false,\n               bookshelfRating: this.props.bookshelfRating,\n               currentlyEditingDate: false,\n               currentlyEditingGenre: false,\n               currentlyEditingTags: false,\n               viewDescription: false,\n               genre: this.props.book.genre,\n               tags: this.props.book.tags,\n          }\n     }\n\n\n     customToggle = () => {\n          console.log(\"Custom Toggle\");\n     }\n\n\n     currentlyEditingRating = () => {\n          console.log(\"currentlyEditingRating\");\n          this.setState({ currentlyEditingRating: true });\n     }\n\n\n     setRating = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setBookRating(selectedOption, this.props.book);\n               this.setState({\n                    bookshelfRating: selectedOption.value,\n                    currentlyEditingRating: false\n                });\n          }\n     }\n\n     resetRating = () => {\n          console.log(\"resetRating\");\n          this.props.resetRatingToZero(this.props.book);\n     }\n\n     resetTimestamp = () => {\n          console.log(\"resetRating\");\n          this.props.resetTimestampToZero(this.props.book);\n     }\n\n     resetGenre = () => {\n          console.log(\"resetGenre\");\n          this.setState({ genre: '' });\n          this.props.resetGenreToZero(this.props.book);\n     }\n\n     resetTags = () => {\n          console.log(\"resetTags\");\n          this.setState({ tags: [] });\n          this.props.resetAllTags(this.props.book);\n     }\n\n     currentlyEditingTags = () => {\n          console.log(\"currentlyEditingTags\");\n          console.log(\"POSSIBLE TAGS\");\n          console.log(this.props.tags);\n          this.setState({ currentlyEditingTags: true });\n     }\n\n     currentlyEditingGenre = () => {\n          console.log(\"currentlyEditingGenre\");\n          this.setState({ currentlyEditingGenre: true });\n     }\n\n     currentlyEditingDate = () => {\n          console.log(\"currentlyEditingDate\");\n          this.setState({ currentlyEditingDate: true });\n     }\n\n     setGenre = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setBookGenre(selectedOption, this.props.book);\n               this.props.addNewGenre(selectedOption.value);\n               this.setState({\n                    genre: selectedOption.value,\n                    currentlyEditingGenre: false\n                });\n          }\n     }\n\n\n     setTags = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n          }\n     }\n\n\n     selectedDate = new Date();\n\n\n     handleDateChange = (e, date) => {\n          console.log(e);\n          console.log(date);\n          let theDate = new Date(date);\n          let newDateTimestamp = theDate.getTime();\n          console.log(theDate);\n          this.props.setBookTimestamp(newDateTimestamp, this.props.book);\n          this.setState({ currentlyEditingDate: false });\n\n     }\n\n\n     customToggle = () => {\n          this.setState(prevState => ({\n            viewDescription: !prevState.viewDescription\n          }));\n     }\n\n\n     render() {\n\n          const description = this.props.description;\n\n          ///////////// Rating ////////////////////////////////////\n\n          let ratingArea = <div className=\"rating-area\">\n               Rating: <Stars bookshelfRating={this.state.bookshelfRating} /> <span className=\"edit-icon\" onClick={this.currentlyEditingRating} title=\"Edit Rating\"><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetRating} title=\"Remove Rating\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n          </div>;\n\n          if( this.state.currentlyEditingRating === true) {\n               ratingArea = <div className=\"rating-area\">\n                                   <SelectRating\n                                        setRating={this.setRating}\n                                        defaultRating={this.state.bookshelfRating}\n                                   />\n                              </div>;\n          }\n\n          if( this.state.currentlyEditingRating === false && this.state.bookshelfRating === 0 ) {\n               ratingArea = <div className=\"rating-area\">\n                                   <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingRating}>Set Rating</span> <span className=\"edit-icon\" onClick={this.currentlyEditingRating}><FontAwesomeIcon icon={faEdit} /></span>\n                              </div>;\n          }\n\n          ////////////// Date //////////////////////////////////////////\n\n          console.log(this.props.book);\n\n\n          let dateArea = <div className=\"date-area\">\n                              Date Completed: {this.props.dateCompleted} <span className=\"edit-icon\" title=\"Edit Date\" onClick={this.currentlyEditingDate}><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetTimestamp} title=\"Remove Date\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n                           </div>;\n\n            if( this.props.book.bookshelfTimestamp === 0) {\n                dateArea = <div className=\"date-area\">\n                                    <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingDate}>Set Date</span> <span className=\"edit-icon\" onClick={this.currentlyEditingDate}><FontAwesomeIcon icon={faEdit} /></span>\n                               </div>;\n           }\n\n           if( this.state.currentlyEditingDate === true) {\n                dateArea = <div id=\"date-picker-area\" className=\"date-area\">\n                                   <NewDatePicker\n                                        setBookTimestamp={this.props.setBookTimestamp}\n                                        book={this.props.book}\n                                   />\n                              </div>\n           }\n\n\n           ////////////// Genre //////////////////////////////////////////\n\n           let genreArea = <div className=\"genre-area\">\n                Genre: {this.state.genre} <span className=\"edit-icon\" onClick={this.currentlyEditingGenre} title=\"Edit Genre\"><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetGenre} title=\"Remove Genre\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n           </div>;\n\n           if( this.state.genre === null || this.state.genre === undefined || this.state.genre === '' ) {\n               genreArea = <div className=\"genre-area\">\n                                   <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingGenre}>Set Genre</span> <span className=\"edit-icon\" onClick={this.currentlyEditingGenre}><FontAwesomeIcon icon={faEdit} /></span>\n                              </div>;\n          }\n\n          if( this.state.currentlyEditingGenre === true) {\n               genreArea = <div className=\"genre-area\">\n                                   <SelectGenre\n                                        genres={this.props.genres}\n                                        setGenre={this.setGenre}\n                                        defaultGenre={this.state.genre}\n                                   />\n                              </div>;\n          }\n\n\n          ////////////// Tags //////////////////////////////////////////\n\n          let currentTags = null;\n          if( this.state.tags !== undefined && this.state.tags !== '' ) {\n               console.log(this.state.tags);\n               currentTags = this.state.tags.map((tag) =>\n                 <span className=\"single-tag\" key={shortid.generate()}>{tag}</span>\n               );\n          }\n\n          let tagArea = <div className=\"tag-area\">\n               Tags: {currentTags} <span className=\"edit-icon\" onClick={this.currentlyEditingTags} title=\"Edit Tags\"><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetTags} title=\"Remove All Tags\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n          </div>;\n\n          if( this.state.tags === null || this.state.tags === undefined || this.state.tags === '' || this.state.tags === [] ) {\n              tagArea = <div className=\"tag-area\">\n                                  <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingTags}>Add Tags</span> <span className=\"edit-icon\" title=\"Add Tags Now\" onClick={this.currentlyEditingTags}><FontAwesomeIcon icon={faEdit} /></span>\n                             </div>;\n         }\n\n         if( this.state.currentlyEditingTags === true) {\n              tagArea = <div className=\"tag-area\">\n                                  <SelectTags\n                                       allTags={this.props.tags}\n                                       setTags={this.setTags}\n                                       defaultTags={this.state.tags}\n                                       setBookTags={this.props.setBookTags}\n                                       book={this.props.book}\n                                       addNewTag={this.props.addNewTag}\n                                  />\n                             </div>;\n         }\n\n\n           /////////////////////////////////////////\n\n          return (\n\n               <>\n               <div className=\"modal-info-line modal-summary-rating-area\">\n                    {ratingArea}\n               </div>\n               <div className=\"modal-info-line modal-summary-date-finished-area\">\n                    {dateArea}\n               </div>\n\n               {this.props.useGenres &&\n                    <div className=\"modal-info-line modal-summary-genre-area\">\n                         {genreArea}\n                    </div>\n               }\n\n               {this.props.useTags &&\n                    <div className=\"modal-info-line modal-summary-tag-area\">\n                         {tagArea}\n                    </div>\n               }\n\n               <Accordion>\n                    <Accordion.Toggle onClick={this.customToggle} as={Button} variant=\"link\" eventKey=\"0\" className=\"already-read-description-toggle\">\n                     { this.state.viewDescription === true &&\n                          <h3>View Description –</h3>\n                     }\n                     { this.state.viewDescription === false &&\n                          <h3>View Description +</h3>\n                     }\n                    </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"0\">\n                    <div className=\"book-description\" dangerouslySetInnerHTML={ { __html: description } }></div>\n                  </Accordion.Collapse>\n              </Accordion>\n               </>\n\n               );\n     }\n\n}\n\n\nexport default BookEditor;\n","import React from 'react';\nimport Select from 'react-select';\nimport Creatable, { makeCreatableSelect } from 'react-select/creatable';\nimport CreatableSelect from 'react-select/creatable';\nimport SelectRating from './SelectRating';\nimport ReadDate from './ReadDate';\nimport SelectGenre from './SelectGenre';\nimport SelectTagsUpdated from './SelectTags';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faMinusCircle } from '@fortawesome/pro-light-svg-icons';\n\nconst shortid = require('shortid');\n\n///////////////////////////////////////////////////////////////////////\n\n\nclass NewBookForm extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               currentlyEditing: true,\n               book: this.props.book,\n               currentlyEditingGenre: false,\n               currentlyEditingTags: false,\n               genre: this.props.book.genre,\n               tags: this.props.book.tags,\n               dateRemoved: false,\n               showDatePicker: true,\n               viewDescription: false,\n               madeTagChange: false,\n               bookshelfTimestamp: 0,\n          }\n     }\n\n\n     componentDidMount() {\n\n          ////////////// Date //////////////////////////////////////////\n          const defaultDate = this.props.defaultDate;\n          if( defaultDate === 'No Date Set' ) {\n               this.setState({\n                    showDatePicker: false,\n                    bookshelfTimestamp: 0,\n                });\n          } else {\n               this.setState({\n                    bookshelfTimestamp: parseInt((new Date().getTime()).toFixed(0))\n               });\n          }\n\n     }\n\n\n     book = this.props.book;\n     id = this.book.id;\n     bookshelfRating = this.book.bookshelfRating;\n     //bookshelfTimestamp = this.book.bookshelfTimestamp;\n     defaultDate = this.props.defaultDate;\n     //bookshelfTimestamp = this.state.bookshelfTimestamp;\n     bookshelfGenre = this.book.genre;\n     bookshelfTags = this.book.tags;\n\n\n     editThisBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          const book = this.props.book;\n          console.log(\"editThisBook -----------------------------------\");\n          console.log(book);\n          console.log(\"Rating: \" + this.bookshelfRating);\n          console.log(\"Timestamp: \" + this.bookshelfTimestamp);\n          console.log(\"Genre: \" + this.bookshelfGenre);\n          console.log(\"Tags: \" + this.bookshelfTags);\n\n          book.bookshelfRating = this.bookshelfRating;\n          book.bookshelfTimestamp = this.state.bookshelfTimestamp;\n          if( this.bookshelfRating !== undefined) { book.bookshelfRating = this.bookshelfRating; } else { book.bookshelfRating = 0; }\n          if( this.bookshelfTimestamp !== undefined) { book.bookshelfTimestamp = this.bookshelfTimestamp; } else { book.bookshelfTimestamp = 0; }\n          if( this.bookshelfGenre !== undefined) { book.genre = this.bookshelfGenre; } else { book.genre = ''; }\n          if( this.bookshelfTags !== undefined) { book.tags = this.bookshelfTags; } else { book.tags = ''; }\n\n          // send the correct view back to BookManager\n          let currentView = this.props.currentView;\n          console.log( this.props.currentView );\n          // if( this.props.savedForLater === true ) { currentView = 'to read'; }\n\n          if( this.props.currentView === 'searchResults' ) {\n\n               if( this.state.tags ) {\n\n                    let tagsObj = this.state.tags;\n\n                    let tagsArray = [];\n                    if( tagsObj.length > 0 && tagsObj !== null ) {\n                         tagsArray = tagsObj.map(x => x.value);\n                    }\n                    book.tags = tagsArray;\n                    console.log(book.tags);\n\n               }\n\n          }\n\n          this.props.newImprovedEditBook(book, currentView);\n          this.props.closeModal();\n\n     }\n\n     setRating = (selectedOption) => {\n          if(selectedOption) {\n               this.bookshelfRating = selectedOption.value;\n               this.setState({ bookshelfRating: selectedOption.value });\n          }\n          else {\n               this.setState({ bookshelfRating: '' });\n          }\n\n     }\n\n     setGenre = (selectedOption) => {\n          if(selectedOption) {\n               this.bookshelfGenre = selectedOption.value;\n               this.setState({ genre: selectedOption.value });\n          }\n          else {\n               this.bookshelfGenre = undefined;\n               this.setState({ genre: '' });\n          }\n\n     }\n\n\n     getCompletedDate = (date) => {\n          //this.bookshelfTimestamp = date;\n          console.log(\"Completed DATE: \" + this.bookshelfTimestamp);\n          let updatedTimestamp = parseInt((new Date(date).getTime()).toFixed(0));\n          console.log(updatedTimestamp);\n          this.bookshelfTimestamp = updatedTimestamp;\n     }\n\n     removeDate = () => {\n          console.log(\"removeDate\");\n          this.bookshelfTimestamp = 0;\n          this.setState({ dateRemoved: true, showDatePicker: false });\n     }\n\n     showDate = () => {\n          this.bookshelfTimestamp = parseInt((new Date().getTime()).toFixed(0));\n          this.setState({ dateRemoved: false, showDatePicker: true });\n     }\n\n     currentlyEditingTags = () => {\n          console.log(\"currentlyEditingTags\");\n          console.log(\"POSSIBLE TAGS\");\n          console.log(this.props.tags);\n          this.setState({ currentlyEditingTags: true });\n     }\n\n     currentlyEditingGenre = () => {\n          console.log(\"currentlyEditingGenre\");\n          this.setState({ currentlyEditingGenre: true });\n     }\n\n     customToggle = () => {\n          this.setState(prevState => ({\n            viewDescription: !prevState.viewDescription\n          }));\n     }\n\n\n     handleCreateLabel = (inputValue: any, actionMeta: any) => {\n          console.log(\"handleCreateLabel\");\n          return 'Create new tag: \"' + inputValue + '\"';\n     }\n\n     addTagToState = (selectedOption) => {\n          console.log(selectedOption);\n          this.setState({ tags: selectedOption, madeChange: true });\n     }\n\n     handleTagsSubmit = (event) => {\n          event.preventDefault();\n          console.log(\"HANDLE SUBMIT TAGS\");\n          console.log(this.state.tags);\n\n          const tagsObj = this.state.tags;\n          let tagsArray = [];\n          if( tagsObj.length > 0 && tagsObj !== null ) {\n               tagsArray = tagsObj.map(x => x.value);\n          }\n\n          console.log(tagsArray);\n          this.props.addNewTag(tagsArray);\n          //this.props.setBookTags(tagsArray, this.props.book);\n\n     }\n\n\nrender() {\n\n     console.log(\"NEW BOOK FORM, Current book: \" + JSON.stringify(this.props.book));\n     console.log(this.props.genres);\n     console.log(this.props.currentView);\n     const defaultRating = this.bookshelfRating;\n     const bookshelfTimestamp = this.bookshelfTimestamp;\n     let description = this.props.book.description;\n\n\n     ////////////// Genre //////////////////////////////////////////\n\n     let genreArea = <div className=\"genre-area\">\n          Genre: {this.state.genre} <span className=\"edit-icon\" onClick={this.currentlyEditingGenre} title=\"Edit Genre\"><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetGenre} title=\"Remove Genre\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n     </div>;\n\n     if( this.state.genre === null || this.state.genre === undefined || this.state.genre === '' ) {\n         genreArea = <div className=\"genre-area\">\n                             <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingGenre}>Set Genre</span> <span className=\"edit-icon\" onClick={this.currentlyEditingGenre}><FontAwesomeIcon icon={faEdit} /></span>\n                        </div>;\n   }\n\n   if( this.state.currentlyEditingGenre === true) {\n         genreArea = <div className=\"genre-area\">\n                             <SelectGenre\n                                  genres={this.props.genres}\n                                  setGenre={this.setGenre}\n                                  defaultGenre={this.state.genre}\n                             />\n                        </div>;\n   }\n\n\n   ////////////// Tags //////////////////////////////////////////\n\n   //let currentTags = null;\n\n   let allTags = this.props.tags;\n   let currentTags = this.state.tags;\n   let defaultTagsRaw = this.props.defaultTags;\n   console.log(allTags);\n   let tagTypesToSelect = [];\n\n   if( allTags !== undefined ) {\n\n             // allTags.forEach(value =>\n             //      tagTypesToSelect.push({ value: value, label: value })\n             // );\n\n        allTags.map((value, key) =>\n             tagTypesToSelect.push({ value: value, label: value })\n        );\n   }\n\n   if( this.state.tags !== undefined && this.state.tags !== '' ) {\n        currentTags = this.state.tags.map((tag) =>\n          <span className=\"single-tag\" key={shortid.generate()}>{tag}</span>\n        );\n   }\n\n   let tagArea = <div className=\"tag-area\">\n        Tags: {currentTags} <span className=\"edit-icon\" onClick={this.currentlyEditingTags} title=\"Edit Tags\"><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetTags} title=\"Remove All Tags\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n   </div>;\n\n   if( this.state.tags === null || this.state.tags === undefined || this.state.tags === '' || this.state.tags === [] ) {\n       tagArea = <div className=\"tag-area\">\n                           <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingTags}>Add Tags</span> <span className=\"edit-icon\" title=\"Add Tags Now\" onClick={this.currentlyEditingTags}><FontAwesomeIcon icon={faEdit} /></span>\n                      </div>;\n  }\n\n  if( this.state.currentlyEditingTags === true) {\n       tagArea = <div className=\"tag-area\">\n                           <CreatableSelect\n                              isMulti\n                              placeholder='Select Tags'\n                              options={tagTypesToSelect}\n                              isClearable\n                              isSearchable\n                              formatCreateLabel={this.handleCreateLabel}\n                              onChange={this.addTagToState}\n                           />\n                           {this.state.madeChange === true &&\n                                <button className=\"add-tags\" onClick={this.handleTagsSubmit}>Update Tags</button>\n                           }\n                      </div>;\n  }\n\n\n    /////////////////////////////////////////\n\n\n    console.log(this.props.book);\n\n    if( this.props.currentView === 'searchResults' ) {\n         console.log(\"searchResults\");\n         description = this.props.book.volumeInfo.description;\n         console.log(description);\n    }\n\n       return (\n            <>\n\n            <form className=\"edit-book clb-updated\" onSubmit={this.editThisBook} >\n               <div className=\"book-rating-area\">\n                    <SelectRating\n                         setRating={this.setRating}\n                         defaultRating={defaultRating}\n                    />\n               </div>\n               <div className=\"book-date-area\">\n                    { this.state.showDatePicker === true &&\n                         <>\n                              <ReadDate\n                                   bookshelfTimestamp={bookshelfTimestamp}\n                                   getCompletedDate={this.getCompletedDate}\n                              />\n                              <span className=\"edit-icon remove\" onClick={this.removeDate} title=\"Remove Date\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n                         </>\n                    }\n                    { this.state.showDatePicker === false &&\n                              <><span className=\"edit-book-subtle-link\" onClick={this.showDate}>Set Date</span> <span className=\"edit-icon\" onClick={this.showDate}> <FontAwesomeIcon icon={faEdit} /></span></>\n                    }\n               </div>\n               {this.props.useGenres &&\n                    <div className=\"modal-info-line modal-summary-genre-area\">\n                         {genreArea}\n                    </div>\n               }\n\n               {this.props.useTags &&\n                    <div className=\"modal-info-line modal-summary-tag-area\">\n                         {tagArea}\n                    </div>\n               }\n               <button type=\"submit\" className=\"update-this-book\">Save Book Info & Add to Your Already Read Shelf</button>\n            </form>\n            <Accordion>\n                 <Accordion.Toggle onClick={this.customToggle} as={Button} variant=\"link\" eventKey=\"0\" className=\"already-read-description-toggle\">\n                  { this.state.viewDescription === true &&\n                       <h3>View Description –</h3>\n                  }\n                  { this.state.viewDescription === false &&\n                       <h3>View Description +</h3>\n                  }\n                 </Accordion.Toggle>\n              <Accordion.Collapse eventKey=\"0\">\n                 <div className=\"book-description\" dangerouslySetInnerHTML={ { __html: description } }></div>\n              </Accordion.Collapse>\n          </Accordion>\n         </>\n       );\n     }\n\n}\n\n\nexport default NewBookForm;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Accordion from 'react-bootstrap/Accordion';\nimport BookButtonToRead from './BookButtonToRead.js';\nimport BookButtonAlreadyRead from './BookButtonAlreadyRead.js';\nimport EditBookForm from './EditBookForm.js';\nimport BookButtonRemove from './BookButtonRemove';\nimport BookButtonMoveToAlreadyRead from './BookButtonMoveToAlreadyRead';\nimport ReplaceCover from './ReplaceCover';\nimport Stars from './Stars';\nimport BookEditor from './BookEditor.js';\nimport NewBookForm from './NewBookForm.js';\n\nimport SelectRating from './SelectRating';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faMinusCircle } from '@fortawesome/pro-light-svg-icons';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nexport default function BookModal(props) {\n\n     const [show, setShow] = React.useState(false);\n\n     const handleClose = () => setShow(false);\n     const handleShow = () => setShow(true);\n\n     let showDescription = false;\n     const customToggle = () => {\n          showDescription = !showDescription;\n     }\n\n\n\n     const book = props.book;\n     // console.log(book);\n\n     const bookCoverModal = props.bookCoverModal;\n     const bookTitleModal = props.bookTitleModal;\n     const newBookForm = props.newBookForm;\n\n     let coverImageURL = null;\n     let title = null;\n     let subtitle = null;\n     let hasSubtitle = false;\n     let description = null;\n     let authors = null;\n     let hasAuthor = false;\n     let authorClass = null;\n     let categories = null;\n     let authorsToPublish = null;\n     let dateToPublish = null;\n     let date = null;\n     let pageCount = null;\n     let bookshelfRating = null;\n     let bookshelfTimestamp = null;\n     let dateCompletedRaw = null;\n     let dateCompleted = null;\n     let genre = null;\n     let showDescriptionIndicator = \"+\";\n     let descriptionToPublish = null;\n     let defaultDate = props.defaultDate;\n\n     //console.log(props.searchResult);\n     if( props.searchResult !== undefined ) {\n          if( props.description !== '' && props.description !== undefined ) {\n          descriptionToPublish = (<div className=\"saved-for-later-description-area\">\n                                   <h3 className=\"saved-for-later-description-headline\">Description</h3>\n                                        <div className=\"saved-for-later-text\">\n                                        {props.description}\n                                        </div>\n                                   </div>);\n          //console.log(props.description);\n     } else { description = props.book.description; }\n     }\n\n\n     if( props.searchResult !== true ) {\n\n          title = book.title;\n          // console.log(title);\n          if( book.subtitle !== undefined ) {\n               hasSubtitle = true;\n               authorClass = \" has-subtitle\";\n               subtitle = <h3 className=\"book-subtitle\">{book.subtitle}</h3>;\n          }\n          if( book.authors !== undefined ) { authors = book.authors; }\n\n          categories = book.categories;\n          date = book.publishedDate;\n          pageCount = book.pageCount;\n          bookshelfRating = book.bookshelfRating;\n          bookshelfTimestamp = book.bookshelfTimestamp;\n          dateCompletedRaw = 0;\n          if( defaultDate === 'Today' ) {\n               dateCompletedRaw = new Date(bookshelfTimestamp);\n               dateCompleted = dateCompletedRaw.toLocaleString(\"en-US\", {month: \"long\", day: \"numeric\", year: \"numeric\"});\n          }\n\n          genre = book.genre;\n          if( genre === undefined || genre === null ) { genre = 'Not Assigned'; }\n\n          // new image work here\n          if( book.coverImg == undefined || book.coverImg == null ) {\n               coverImageURL = 'https://firebasestorage.googleapis.com/v0/b/bookshelf-9d11e.appspot.com/o/images%2F400px%20x%20600px-r01BookNotPictured.jpg?alt=media&token=772367ce-e89a-400d-95fe-f76e9ea65385';\n          } else {\n               coverImageURL = book.coverImg;\n          }\n\n          if( book.authors !== undefined ) {\n               if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n               if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n               if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n\n               if( date ) {\n                    let yearOnly = date.toString()\n                    yearOnly = date.substring(0, 4);\n                    dateToPublish = ' (' + yearOnly + ')';\n               }\n\n               if( hasSubtitle ) {\n                    authorsToPublish = <div className={\"authors\" + authorClass}>{authorsToPublish}, {pageCount} pages {dateToPublish}</div>;\n               } else {\n                    authorsToPublish = <div className=\"authors\">{authorsToPublish}, {pageCount} pages {dateToPublish}</div>;\n               }\n          }\n\n          if( date ) {\n               let yearOnly = date.toString()\n               dateToPublish = 'Date: ' + yearOnly;\n          }\n\n     } else {\n\n               if( book.volumeInfo !== undefined ) {\n\n               coverImageURL = props.coverImageURL;\n\n               title = book.volumeInfo.title;\n               if( book.volumeInfo.subtitle !== undefined ) {\n                    hasSubtitle = true;\n                    authorClass = \" has-subtitle\";\n                    subtitle = <h3 className=\"book-subtitle\">{book.volumeInfo.subtitle}</h3>;\n               }\n               if( book.volumeInfo.authors !== undefined ) { authors = book.volumeInfo.authors; }\n\n               description = book.volumeInfo.description;\n               if( description !== undefined ) {\n                    if( showDescription === false ) { showDescriptionIndicator = \"+\"; }\n                    else if( showDescription === true ) { showDescriptionIndicator = \"–\"; }\n               }\n\n               categories = book.volumeInfo.categories;\n               date = book.publishedDate;\n               pageCount = book.volumeInfo.pageCount;\n\n               if( date ) {\n                    let yearOnly = date.toString()\n                    yearOnly = date.substring(0, 4);\n                    dateToPublish = ' (' + yearOnly + ')';\n               }\n\n               if( book.volumeInfo.authors !== undefined ) {\n                    if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n                    if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n                    if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n\n                    if( hasSubtitle ) {\n                         authorsToPublish = <div className={\"authors\" + authorClass}>{authorsToPublish}, {pageCount} pages {dateToPublish}</div>;\n                    } else {\n                         authorsToPublish = <div className=\"authors\">{authorsToPublish}, {pageCount} pages {dateToPublish}</div>;\n                    }\n               }\n\n\n          }\n\n     }\n\n     //console.log(props.bookshelfRating);\n     let editForm = null;\n     if( props.searchResult !== true ) {\n          if( props.alreadyRead !== true ) {\n               editForm = <EditBookForm\n                    book={book}\n                    hideRating={true}\n                    hideDate={true}\n                    bookshelfRating={props.bookshelfRating}\n                    bookshelfNote={props.bookshelfNote}\n                    bookshelfTimestamp={props.bookshelfTimestamp}\n                    editBook={props.editBook}\n               />;\n          } else if( props.alreadyRead ) {\n               editForm = <EditBookForm\n                    book={book}\n                    bookshelfRating={props.bookshelfRating}\n                    bookshelfNote={props.bookshelfNote}\n                    bookshelfTimestamp={props.bookshelfTimestamp}\n                    editBook={props.editBook}\n               />;\n          }\n     }\n\n     if( bookTitleModal ) {\n\n          if( showDescription === false ) { showDescriptionIndicator = \"+\"; }\n          else if( showDescription === true ) { showDescriptionIndicator = \"–\"; }\n\n          if( coverImageURL !== null ) {\n               //console.log(\"1-26 Update 1025am - COVER IMG URL: \" + coverImageURL);\n               if( coverImageURL.startsWith(\"http://\") ) {\n                    coverImageURL = coverImageURL.replace(\"http://\", \"https://\");\n                    //console.log(\"Updated COVER IMG URL: \" + coverImageURL);\n               }\n          }\n\n          // let showNewBookFormClass = \"hide-new-book-form\";\n          // if( showBookForm === true ) {\n          //      showNewBookFormClass = \"show-new-book-form\";\n          // }\n\n          return (\n            <>\n              <button onClick={handleShow} className=\"card-book-title\">\n                <h2 className=\"book-title\">{title}</h2>\n              </button>\n\n              <Modal show={show} onHide={handleClose} className={\"single-book-modal\" + \" font-\" + props.settingsFont + \" color-\" + props.settingsColor}>\n                <Modal.Header closeButton>\n                   <Modal.Title className=\"single-book-title\">{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                     <div className=\"small-thumbnail-area\">\n                          <img src={coverImageURL} />\n                          {props.searchResult !== true &&\n                               <ReplaceCover\n                                     bookObj={book}\n                                     updateCoverImg={props.updateCoverImg}\n                               />\n                          }\n                     </div>\n                     {subtitle}\n                     {authorsToPublish}\n\n                     {props.alreadyRead &&\n                     <BookEditor\n                         book={book}\n                         bookshelfRating={props.bookshelfRating}\n                         genre={genre}\n                         dateCompleted={dateCompleted}\n                         useGenres={props.useGenres}\n                         useTags={props.useTags}\n                         description={props.book.description}\n                         setBookRating={props.setBookRating}\n                         resetRatingToZero={props.resetRatingToZero}\n                         resetTimestampToZero={props.resetTimestampToZero}\n                         setBookGenre={props.setBookGenre}\n                         genres={props.genres}\n                         resetGenreToZero={props.resetGenreToZero}\n                         addNewGenre={props.addNewGenre}\n                         addNewTag={props.addNewTag}\n                         setBookTags={props.setBookTags}\n                         tags={props.tags}\n                         resetAllTags={props.resetAllTags}\n                         setBookTimestamp={props.setBookTimestamp}\n                         defaultDate={props.defaultDate}\n                     />\n                    }\n\n                    {props.savedForLater &&\n                         <div className=\"saved-for-later-description-area\">\n                         <h3 className=\"saved-for-later-description-headline\">Description</h3>\n                              <div className=\"saved-for-later-text\">\n                              {props.book.description}\n                              </div>\n                         </div>\n                    }\n\n                    {props.searchResult &&\n                         <>\n                         {descriptionToPublish}\n                         </>\n                    }\n\n                </Modal.Body>\n                <Modal.Footer>\n                <div className=\"book-meta button-area\">\n                { props.alreadyRead &&\n                     <BookButtonRemove\n                          book={book}\n                          context={'removeBookFromAlreadyRead'}\n                          removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                       />\n                }\n                { props.savedForLater &&\n                     <>\n                     <BookButtonRemove\n                          book={book}\n                          removeBook={props.removeBookFromToRead}\n                          context={'removeBookFromToRead'}\n                          removeBookFromToRead={props.removeBookFromToRead}\n                     />\n                     <BookButtonMoveToAlreadyRead\n                          book={props.book}\n                          moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                     />\n                     </>\n                }\n                { props.searchResult &&\n                     <>\n                     <div className=\"book-meta button-area closearea\">\n                         <button onClick={handleClose}>Close</button>\n                     </div>\n                     </>\n                }\n                </div>\n                </Modal.Footer>\n              </Modal>\n\n            </>\n          );\n\n     } else if ( bookCoverModal ) {\n\n          if( coverImageURL !== null ) {\n               //console.log(\"1-26 Update 1025am - COVER IMG URL: \" + coverImageURL);\n               if( coverImageURL.startsWith(\"http://\") ) {\n                    coverImageURL = coverImageURL.replace(\"http://\", \"https://\");\n                    //console.log(\"Updated COVER IMG URL: \" + coverImageURL);\n               }\n          }\n\n          let additionalModalClasses = null;\n          if( props.savedForLater === true ) { additionalModalClasses = \" saved-for-later\"; }\n          if( props.alreadyRead === true ) { additionalModalClasses = \" already-read\"; }\n          if( props.searchResult === true ) { additionalModalClasses = \" search-result\"; }\n\n          //console.log(\"DESCRIPTION: \" + props.book.description);\n\n          return (\n            <>\n              <div className=\"cover-image-area\">\n                   <button onClick={handleShow} className=\"card-book-cover\"><img src={coverImageURL} className=\"cover-image\" /></button>\n              </div>\n\n              <Modal show={show} onHide={handleClose} className={\"single-book-modal\" + \" font-\" + props.settingsFont + \" color-\" + props.settingsColor + additionalModalClasses}>\n                <Modal.Header closeButton>\n                  <Modal.Title className=\"single-book-title\">{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                     <div className=\"small-thumbnail-area\">\n                          <img src={coverImageURL} />\n                          {props.searchResult !== true &&\n                               <ReplaceCover\n                                    bookObj={book}\n                                    updateCoverImg={props.updateCoverImg}\n                               />\n                          }\n                     </div>\n                    {subtitle}\n                    {authorsToPublish}\n\n                    {props.alreadyRead &&\n                    <BookEditor\n                         book={book}\n                        bookshelfRating={props.bookshelfRating}\n                        genre={genre}\n                        dateCompleted={dateCompleted}\n                        useGenres={props.useGenres}\n                        useTags={props.useTags}\n                        description={props.book.description}\n                        setBookRating={props.setBookRating}\n                        resetRatingToZero={props.resetRatingToZero}\n                        resetTimestampToZero={props.resetTimestampToZero}\n                        setBookGenre={props.setBookGenre}\n                        genres={props.genres}\n                        resetGenreToZero={props.resetGenreToZero}\n                        addNewGenre={props.addNewGenre}\n                        addNewTag={props.addNewTag}\n                        setBookTags={props.setBookTags}\n                        tags={props.tags}\n                        resetAllTags={props.resetAllTags}\n                        setBookTimestamp={props.setBookTimestamp}\n                        defaultDate={props.defaultDate}\n                    />\n               }\n\n               {props.searchResult &&\n                    <>\n                    {descriptionToPublish}\n                    </>\n               }\n\n               {props.savedForLater &&\n                    <NewBookForm\n                        book={book}\n                        useGenres={props.useGenres}\n                        useTags={props.useTags}\n                        genres={props.genres}\n                        description={props.book.description}\n                        resetGenreToZero={props.resetGenreToZero}\n                        addNewGenre={props.addNewGenre}\n                        addNewTag={props.addNewTag}\n                        setBookTags={props.setBookTags}\n                        tags={props.tags}\n                        resetAllTags={props.resetAllTags}\n                        newImprovedEditBook={props.newImprovedEditBook}\n                        alreadyRead={props.alreadyRead}\n                        currentView={'savedForLater'}\n                        searchResult={props.searchResult}\n                        defaultDate={props.defaultDate}\n                    />\n               }\n\n                </Modal.Body>\n                <Modal.Footer>\n                <div className=\"book-meta button-area\">\n                { props.alreadyRead &&\n                     <BookButtonRemove\n                         book={book}\n                         context={'removeBookFromAlreadyRead'}\n                         removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                      />\n                }\n                { props.savedForLater &&\n                     <>\n                     <BookButtonRemove\n                          book={book}\n                          removeBook={props.removeBookFromToRead}\n                          context={'removeBookFromToRead'}\n                          removeBookFromToRead={props.removeBookFromToRead}\n                     />\n                     <div className=\"book-meta button-area close-without-saving-area\">\n                         <button onClick={handleClose}>Close without Saving</button>\n                     </div>\n\n                     <Modal show={show} onHide={handleClose} className={\"single-book-modal\" + \" font-\" + props.settingsFont + \" color-\" + props.settingsColor + additionalModalClasses}>\n                       <Modal.Header closeButton>\n                         <Modal.Title className=\"single-book-title\">{title}</Modal.Title>\n                       </Modal.Header>\n                       <Modal.Body>\n                       <div className=\"small-thumbnail-area\">\n                            <img src={coverImageURL} />\n                                 {props.searchResult !== true &&\n                                      <ReplaceCover\n                                           bookObj={book}\n                                           updateCoverImg={props.updateCoverImg}\n                                      />\n                                 }\n                            </div>\n                           {subtitle}\n                           {authorsToPublish}\n                            <NewBookForm\n                                book={book}\n                                useGenres={props.useGenres}\n                                useTags={props.useTags}\n                                genres={props.genres}\n                                resetGenreToZero={props.resetGenreToZero}\n                                addNewGenre={props.addNewGenre}\n                                addNewTag={props.addNewTag}\n                                setBookTags={props.setBookTags}\n                                tags={props.tags}\n                                resetAllTags={props.resetAllTags}\n                                newImprovedEditBook={props.newImprovedEditBook}\n                                currentView={'savedForLater'}\n                                defaultDate={props.defaultDate}\n                            />\n                       </Modal.Body>\n                       <Modal.Footer>\n                       <div className=\"book-meta button-area close-without-saving-area\">\n                           <button onClick={handleClose}>Close without Saving</button>\n                       </div>\n                       </Modal.Footer>\n                     </Modal>\n                     </>\n                }\n                { props.searchResult &&\n                     <>\n                     <div className=\"book-meta button-area closearea\">\n                         <button onClick={handleClose}>Close</button>\n                     </div>\n                     </>\n                }\n\n                </div>\n                </Modal.Footer>\n                </Modal>\n                </>\n          );\n\n     } else if ( newBookForm ) {\n\n          if( coverImageURL !== null ) {\n               //console.log(\"1-26 Update 1025am - COVER IMG URL: \" + coverImageURL);\n               if( coverImageURL.startsWith(\"http://\") ) {\n                    coverImageURL = coverImageURL.replace(\"http://\", \"https://\");\n                    //console.log(\"Updated COVER IMG URL: \" + coverImageURL);\n               }\n          }\n\n          let additionalModalClasses = \" new-book-form\";\n          let currentView = null;\n               if( props.searchResult ) { currentView = 'searchResults'; }\n               else if( props.savedForLater ) { currentView = 'savedForLater'; }\n\n\n          return (\n            <>\n              <button onClick={handleShow}\n               className=\"read-action already-read\"\n               title=\"Add to your Already Read shelf\">\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n\n              <Modal show={show} onHide={handleClose} className={\"single-book-modal\" + \" font-\" + props.settingsFont + \" color-\" + props.settingsColor + additionalModalClasses}>\n                <Modal.Header closeButton>\n                  <Modal.Title className=\"single-book-title\">{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                <div className=\"small-thumbnail-area\">\n                     <img src={coverImageURL} />\n                          {props.searchResult !== true &&\n                               <ReplaceCover\n                                    bookObj={book}\n                                    updateCoverImg={props.updateCoverImg}\n                               />\n                          }\n                     </div>\n                    {subtitle}\n                    {authorsToPublish}\n                     <NewBookForm\n                         book={book}\n                         useGenres={props.useGenres}\n                         useTags={props.useTags}\n                         genres={props.genres}\n                         resetGenreToZero={props.resetGenreToZero}\n                         addNewGenre={props.addNewGenre}\n                         addNewTag={props.addNewTag}\n                         setBookTags={props.setBookTags}\n                         tags={props.tags}\n                         resetAllTags={props.resetAllTags}\n                         newImprovedEditBook={props.newImprovedEditBook}\n                         currentView={currentView}\n                         description={props.book.description}\n                         closeModal={handleClose}\n                         defaultDate={props.defaultDate}\n                     />\n                </Modal.Body>\n                <Modal.Footer>\n                <div className=\"book-meta button-area close-without-saving-area\">\n                    <button onClick={handleClose}>Close without Saving</button>\n                </div>\n                </Modal.Footer>\n              </Modal>\n            </>\n          );\n\n     }\n\n}\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/pro-light-svg-icons';\n\nclass BookButtonBanFromSuggestions extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     clickRemoveBookSuggested = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          const book = this.props.book;\n          console.log(book);\n          this.props.removeBookFromSuggestions(book);\n     }\n\n     render() {\n\n          return(\n               <>\n                    <button\n                         className=\"read-action remove-book\"\n                         title=\"Don't Suggest this Book Again\"\n                         onClick={this.clickRemoveBookSuggested}\n                    >\n                    <FontAwesomeIcon icon={faTrashAlt} />\n                    </button>\n               </>\n          );\n\n     }\n\n}\n\nexport default BookButtonBanFromSuggestions;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/pro-light-svg-icons';\nimport { faFileEdit } from '@fortawesome/pro-light-svg-icons';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport Modal from 'react-bootstrap/Modal';\nimport BookModal from './BookModal.js';\nimport BookButtonToRead from './BookButtonToRead.js';\nimport BookButtonAlreadyRead from './BookButtonAlreadyRead.js';\nimport BookButtonRemove from './BookButtonRemove.js';\nimport BookButtonMoveToAlreadyRead from './BookButtonMoveToAlreadyRead';\nimport BookButtonBanFromSuggestions from './BookButtonBanFromSuggestions.js';\nimport Stars from './Stars';\n\nclass BookCard extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n          this.state = {\n               originalBookJSON: null,\n               connected: false,\n               newBookForm: false,\n            };\n\n     }\n\n\n     showNewBookForm = () => {\n          this.setState({ newBookForm: true });\n     }\n\n\n\n     slugify = (text) => {\n       return text\n         .toString()                     // Cast to string\n         .toLowerCase()                  // Convert the string to lowercase letters\n         .normalize('NFD')       // The normalize() method returns the Unicode Normalization Form of a given string.\n         .trim()                         // Remove whitespace from both sides of a string\n         .replace(/\\s+/g, '-')           // Replace spaces with -\n         .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n         .replace(/\\-\\-+/g, '-');        // Replace multiple - with single -\n     }\n\n\n     render() {\n\n          //console.log(this.props.book);\n\n          // console.log(this.state.originalBookJSON);\n          // console.log(this.state.connected);\n          let book = this.state.originalBookJSON;\n          let bookJSON = JSON.stringify(book);\n\n          if( this.state.connected === false) {\n               book = this.props.book;\n          }\n\n          if( book !== null ) {\n\n          // let coverImageURL = null;\n          let title = null;\n          let subtitle = null;\n          let authors = null;\n          let categories = null;\n          let authorsToPublish = null;\n          let dateToPublish = null;\n          let date = null;\n          let description = null;\n\n               title = book.title;\n               if( book.subtitle !== undefined ) { subtitle = book.subtitle; }\n               if( book.authors !== undefined ) { authors = book.authors; }\n\n               categories = book.categories;\n               date = book.publishedDate;\n\n               if( book.authors !== undefined ) {\n                    if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n                    if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n                    if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n               }\n\n               if( date ) {\n                    let yearOnly = date.toString()\n                    dateToPublish = 'Date: ' + yearOnly;\n               }\n\n          // show star ratings\n          //console.log(this.props.book.bookshelfRating);\n          let bookshelfRating = this.props.book.bookshelfRating;\n          let bookshelfNote = this.props.book.bookshelfNote;\n\n          let bookshelfTimestamp = this.props.book.bookshelfTimestamp;\n          //console.log(bookshelfTimestamp);\n\n          //console.log(this.props.removeBookFromAlreadyRead);\n\n\n               // If search results, get the covers straight from Google in correct JSON format\n               let coverImageURL = null;\n               if( this.props.searchResult ) {\n\n                         description = book.volumeInfo.description;\n                         //console.log(description);\n\n                         if( book.volumeInfo !== undefined ) {\n\n                         if( book.volumeInfo.imageLinks !== undefined ) {\n                              //console.log(book.volumeInfo.imageLinks.thumbnail);\n                              coverImageURL = book.volumeInfo.imageLinks.thumbnail;\n                              coverImageURL = book.volumeInfo.imageLinks.large;\n                              if( book.volumeInfo.imageLinks.large === undefined || book.volumeInfo.imageLinks.large === '' ) {\n                                   coverImageURL = book.volumeInfo.imageLinks.medium;\n                              }\n                              if( book.volumeInfo.imageLinks.medium === undefined || book.volumeInfo.imageLinks.medium === '' ) {\n                                   coverImageURL = book.volumeInfo.imageLinks.small;\n                              }\n                              if( book.volumeInfo.imageLinks.small === undefined || book.volumeInfo.imageLinks.small === '' ) {\n                                   coverImageURL = book.volumeInfo.imageLinks.smallThumbnail;\n                              }\n                              if( book.volumeInfo.imageLinks.smallThumbnail === undefined ) {\n                                   coverImageURL = book.volumeInfo.imageLinks.thumbnail;\n                              }\n                         }\n\n\n                         if( book.volumeInfo.authors !== undefined ) {\n                              authors = book.volumeInfo.authors;\n                              if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n                              if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n                              if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n\n                         }\n\n                    }\n               }\n\n               let dataGenre = null;\n               if( book.genre !== undefined && book.genre !== '' ) {\n                    dataGenre = this.slugify(book.genre);\n               }\n\n               /////////////////////////////////////////////////////////////////////////////\n\n\n          return(\n\n               <div className=\"book-card\" id={book.id} data-rating={book.bookshelfRating} data-genre={dataGenre} >\n                    <BookModal\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                         bookCoverModal={true}\n                         book={book}\n                         alreadyRead={this.props.alreadyRead}\n                         savedForLater={this.props.savedForLater}\n                         coverImageURL={coverImageURL}\n                         addBookToRead={this.props.addBookToRead}\n                         addBookAlreadyRead={this.props.addBookAlreadyRead}\n                         editBook={this.props.editBook}\n                         bookshelfRating={bookshelfRating}\n                         bookshelfNote={bookshelfNote}\n                         bookshelfTimestamp={bookshelfTimestamp}\n                         removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                         removeBookFromToRead={this.props.removeBookFromToRead}\n                         searchResult={this.props.searchResult}\n                         moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                         updateCoverImg={this.props.updateCoverImg}\n                         useGenres={this.props.useGenres}\n                         useTags={this.props.useTags}\n                         setBookRating={this.props.setBookRating}\n                         resetRatingToZero={this.props.resetRatingToZero}\n                         resetTimestampToZero={this.props.resetTimestampToZero}\n                         setBookGenre={this.props.setBookGenre}\n                         genres={this.props.genres}\n                         resetGenreToZero={this.props.resetGenreToZero}\n                         addNewGenre={this.props.addNewGenre}\n                         addNewTag={this.props.addNewTag}\n                         setBookTags={this.props.setBookTags}\n                         tags={this.props.tags}\n                         resetAllTags={this.props.resetAllTags}\n                         setBookTimestamp={this.props.setBookTimestamp}\n                         description={description}\n                         defaultDate={this.props.defaultDate}\n                         createNotification={this.props.createNotification}\n                         newImprovedEditBook={this.props.newImprovedEditBook}\n                    />\n                    <BookModal\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                         bookTitleModal={true}\n                         book={book}\n                         alreadyRead={this.props.alreadyRead}\n                         savedForLater={this.props.savedForLater}\n                         coverImageURL={coverImageURL}\n                         addBookToRead={this.props.addBookToRead}\n                         addBookAlreadyRead={this.props.addBookAlreadyRead}\n                         editBook={this.props.editBook}\n                         bookshelfRating={bookshelfRating}\n                         bookshelfNote={bookshelfNote}\n                         bookshelfTimestamp={bookshelfTimestamp}\n                         removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                         removeBookFromToRead={this.props.removeBookFromToRead}\n                         searchResult={this.props.searchResult}\n                         moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                         updateCoverImg={this.props.updateCoverImg}\n                         useGenres={this.props.useGenres}\n                         useTags={this.props.useTags}\n                         setBookRating={this.props.setBookRating}\n                         resetRatingToZero={this.props.resetRatingToZero}\n                         resetTimestampToZero={this.props.resetTimestampToZero}\n                         setBookGenre={this.props.setBookGenre}\n                         genres={this.props.genres}\n                         resetGenreToZero={this.props.resetGenreToZero}\n                         addNewGenre={this.props.addNewGenre}\n                         addNewTag={this.props.addNewTag}\n                         setBookTags={this.props.setBookTags}\n                         tags={this.props.tags}\n                         resetAllTags={this.props.resetAllTags}\n                         setBookTimestamp={this.props.setBookTimestamp}\n                         description={description}\n                         defaultDate={this.props.defaultDate}\n                         createNotification={this.props.createNotification}\n                         newImprovedEditBook={this.props.newImprovedEditBook}\n                    />\n                    <div className=\"book-meta-area\">\n                         <div className=\"book-meta author\">{authorsToPublish}</div>\n                         <div className=\"book-meta button-area\">\n                         { this.props.alreadyRead === true &&\n                              <>\n                              <Stars bookshelfRating={bookshelfRating} />\n                              </>\n                         }\n                         { this.props.toRead === true &&\n                              <>\n                              <BookButtonRemove\n                                   book={this.props.book}\n                                   removeBook={this.props.removeBookFromToRead}\n                                   context={'removeBookFromToRead'}\n                                   removeBookFromToRead={this.props.removeBookFromToRead}\n                              />\n                              <BookModal\n                                   settingsFont={this.props.settingsFont}\n                                   settingsColor={this.props.settingsColor}\n                                   bookTitleModal={false}\n                                   book={book}\n                                   alreadyRead={this.props.alreadyRead}\n                                   savedForLater={this.props.savedForLater}\n                                   coverImageURL={coverImageURL}\n                                   addBookToRead={this.props.addBookToRead}\n                                   addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                   editBook={this.props.editBook}\n                                   bookshelfRating={bookshelfRating}\n                                   bookshelfNote={bookshelfNote}\n                                   bookshelfTimestamp={bookshelfTimestamp}\n                                   removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                                   removeBookFromToRead={this.props.removeBookFromToRead}\n                                   searchResult={this.props.searchResult}\n                                   moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                                   updateCoverImg={this.props.updateCoverImg}\n                                   useGenres={this.props.useGenres}\n                                   useTags={this.props.useTags}\n                                   setBookRating={this.props.setBookRating}\n                                   resetRatingToZero={this.props.resetRatingToZero}\n                                   resetTimestampToZero={this.props.resetTimestampToZero}\n                                   setBookGenre={this.props.setBookGenre}\n                                   genres={this.props.genres}\n                                   resetGenreToZero={this.props.resetGenreToZero}\n                                   addNewGenre={this.props.addNewGenre}\n                                   addNewTag={this.props.addNewTag}\n                                   setBookTags={this.props.setBookTags}\n                                   tags={this.props.tags}\n                                   resetAllTags={this.props.resetAllTags}\n                                   setBookTimestamp={this.props.setBookTimestamp}\n                                   description={description}\n                                   createNotification={this.props.createNotification}\n                                   defaultDate={this.props.defaultDate}\n                                   newBookForm={true}\n                                   newImprovedEditBook={this.props.newImprovedEditBook}\n                              />\n                              </>\n                         }\n                         { this.props.searchResult === true &&\n                              <>\n\n                              {this.props.removeBookFromSuggestions &&\n                                   <BookButtonBanFromSuggestions\n                                        book={this.props.book}\n                                        removeBookFromSuggestions={this.props.removeBookFromSuggestions}\n                                   />\n                              }\n                              <BookButtonToRead\n                                   book={this.props.book}\n                                   addBookToRead={this.props.addBookToRead}\n                              />\n                              <BookModal\n                                   settingsFont={this.props.settingsFont}\n                                   settingsColor={this.props.settingsColor}\n                                   bookTitleModal={false}\n                                   book={book}\n                                   alreadyRead={this.props.alreadyRead}\n                                   savedForLater={this.props.savedForLater}\n                                   coverImageURL={coverImageURL}\n                                   addBookToRead={this.props.addBookToRead}\n                                   addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                   editBook={this.props.editBook}\n                                   bookshelfRating={bookshelfRating}\n                                   bookshelfNote={bookshelfNote}\n                                   bookshelfTimestamp={bookshelfTimestamp}\n                                   removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                                   removeBookFromToRead={this.props.removeBookFromToRead}\n                                   searchResult={this.props.searchResult}\n                                   moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                                   updateCoverImg={this.props.updateCoverImg}\n                                   useGenres={this.props.useGenres}\n                                   useTags={this.props.useTags}\n                                   setBookRating={this.props.setBookRating}\n                                   resetRatingToZero={this.props.resetRatingToZero}\n                                   resetTimestampToZero={this.props.resetTimestampToZero}\n                                   setBookGenre={this.props.setBookGenre}\n                                   genres={this.props.genres}\n                                   resetGenreToZero={this.props.resetGenreToZero}\n                                   addNewGenre={this.props.addNewGenre}\n                                   addNewTag={this.props.addNewTag}\n                                   setBookTags={this.props.setBookTags}\n                                   tags={this.props.tags}\n                                   resetAllTags={this.props.resetAllTags}\n                                   setBookTimestamp={this.props.setBookTimestamp}\n                                   description={description}\n                                   createNotification={this.props.createNotification}\n                                   newBookForm={true}\n                                   defaultDate={this.props.defaultDate}\n                                   newImprovedEditBook={this.props.newImprovedEditBook}\n                              />\n                              </>\n                         }\n                         </div>\n                    </div>\n               </div>\n\n          );\n\n          } else {\n          return 'NOT WORKING';\n     }\n\n}\n\n}\n\nexport default BookCard;\n","import React from 'react';\nimport BookCard from './BookCard';\n\nfunction RecentlyAddedToRead(props) {\n\n     const booksToRead = props.booksToRead;\n     let orderedBooks = null;\n     // console.log(booksToRead);\n     // console.log(booksToRead.length);\n\n      if( booksToRead !== undefined && booksToRead.length !== 0 ) {\n\n           // New sorting\n           orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                // If the first item has a higher number, move it down\n                // If the first item has a lower number, move it up\n                if (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                if (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                // If the count number is the same between both items, sort alphabetically\n                // If the first item comes first in the alphabet, move it up\n                // Otherwise move it down\n                if (a.title > b.title) return 1;\n                if (a.title < b.title) return -1;\n\n           });\n\n           let orderedBooksToPublish = orderedBooks.slice(0, 4);\n\n            return (\n                <div className=\"recently-added-to-read-area\">\n                    <h2 className=\"section-title\">Up Next</h2>\n                         <div className=\"landing-explainer\">Recently added to your <strong>To Read</strong> shelf</div>\n                         <div className=\"results-grid four-col\">\n                        {orderedBooksToPublish.map((book, index) => (\n                             <BookCard\n                                      key={book.id}\n                                      book={book}\n                                      editBook={props.editBook}\n                                      moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                                      removeBookFromToRead={props.removeBookFromToRead}\n                                      addNewImagesToRead={props.addNewImagesToRead}\n                                      savedForLater={true}\n                                      toRead={true}\n                                      settingsFont={props.settingsFont}\n                                      settingsColor={props.settingsColor}\n                                      updateCoverImg={props.updateCoverImg}\n                                      useGenres={props.useGenres}\n                                      useTags={props.useTags}\n                                      genres={props.genres}\n                                      tags={props.tags}\n                                      defaultDate={props.defaultDate}\n                                      newImprovedEditBook={props.newImprovedEditBook}\n                              />\n                      ))}\n                      </div>\n                </div>\n          );\n\n     } else {\n\n          return (\n              <div className=\"recently-added-to-read-area nothing-yet\">\n                    <p>Time to <a href=\"/bookshelf/#search\">add more books</a> to your shelf!</p>\n              </div>\n        );\n\n     }\n}\n\nexport default RecentlyAddedToRead;\n","import React from 'react';\nimport BookCard from './BookCard';\n\nfunction RecentlyAddedAlreadyRead(props) {\n\n     const booksAlreadyRead = props.booksAlreadyRead;\n     let orderedBooks = null;\n     // console.log(booksToRead);\n     // console.log(booksToRead.length);\n\n      if( booksAlreadyRead !== undefined && booksAlreadyRead.length !== 0 ) {\n\n           // New sorting\n           orderedBooks = [...booksAlreadyRead].sort(function (a, b) {\n\n                // If the first item has a higher number, move it down\n                // If the first item has a lower number, move it up\n                if (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                if (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                // If the count number is the same between both items, sort alphabetically\n                // If the first item comes first in the alphabet, move it up\n                // Otherwise move it down\n                if (a.title > b.title) return 1;\n                if (a.title < b.title) return -1;\n\n           });\n\n           let orderedBooksToPublish = orderedBooks.slice(0, 4);\n\n            return (\n                <div className=\"recently-added-already-read-area\">\n                <h2 className=\"section-title\">Just Finished</h2>\n                <div className=\"landing-explainer\">Recently added to your <strong>Already Read</strong> shelf</div>\n                         <div className=\"results-grid four-col\">\n                        {orderedBooksToPublish.map((book, index) => (\n                             <BookCard\n                                      key={book.id}\n                                      book={book}\n                                      editBook={props.editBook}\n                                      moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                                      removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                                      addNewImagesAlreadyRead={props.addNewImagesAlreadyRead}\n                                      alreadyRead={true}\n                                      settingsFont={props.settingsFont}\n                                      settingsColor={props.settingsColor}\n                                      updateCoverImg={props.updateCoverImg}\n                                      setBookRating={props.setBookRating}\n                                      resetRatingToZero={props.resetRatingToZero}\n                                      resetTimestampToZero={props.resetTimestampToZero}\n                                      setBookTimestamp={props.setBookTimestamp}\n                              />\n                      ))}\n                      </div>\n                </div>\n          );\n\n     } else {\n\n          return (\n              <div className=\"recently-added-already-read-area nothing-yet\">\n              </div>\n        );\n\n     }\n}\n\nexport default RecentlyAddedAlreadyRead;\n","import React from 'react';\nimport RecentlyAddedToRead from './RecentlyAddedToRead';\nimport RecentlyAddedAlreadyRead from './RecentlyAddedAlreadyRead';\n\n\n/// This page is once you've already logged in\n\nfunction Landing(props) {\n\n  return (\n    <div className=\"landing-page-area single-page\">\n      { props.notification &&\n           <div className=\"notification-area\">{props.notification}</div>\n      }\n      <RecentlyAddedToRead\n          booksToRead={props.booksToRead}\n          editBook={props.editBook}\n          moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n          removeBookFromToRead={props.removeBookFromToRead}\n          addNewImagesToRead={props.addNewImagesToRead}\n          settingsFont={props.settingsFont}\n          settingsColor={props.settingsColor}\n          updateCoverImg={props.updateCoverImg}\n          useGenres={props.useGenres}\n          useTags={props.useTags}\n          genres={props.genres}\n          tags={props.tags}\n          defaultDate={props.defaultDate}\n          newImprovedEditBook={props.newImprovedEditBook}\n      />\n      <RecentlyAddedAlreadyRead\n          booksAlreadyRead={props.booksAlreadyRead}\n          editBook={props.editBook}\n          removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n          addNewImagesAlreadyRead={props.addNewImagesAlreadyRead}\n          settingsFont={props.settingsFont}\n          settingsColor={props.settingsColor}\n          updateCoverImg={props.updateCoverImg}\n          setBookRating={props.setBookRating}\n          resetRatingToZero={props.resetRatingToZero}\n          resetTimestampToZero={props.resetTimestampToZero}\n          setBookTimestamp={props.setBookTimestamp}\n      />\n    </div>\n  );\n}\n\nexport default Landing;\n","import React from \"react\";\nimport Label from \"./Label.js\";\n\nconst Input = (props) => (\n  <div className=\"form-group\">\n    <input className=\"form-control\" {...props}/>\n  </div>\n)\n\nexport default Input;\n\n// make sure the <Input> component uses a closing tag rather than being self-closing so you can put the label text in the {props.children} location\n\n//  You will also need props for the 'for' and 'id' properties (labeled above as 'props.control'), as well as the placeholder.\n","import axios from \"axios\";\n\nexport default {\n  // Searches the NYT books according to the search criteria given in the form\n  getNewBooks: function(title) {\n    return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + title + \"&maxResults=36\" + \"&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU\");\n  },\n  // Gets saved Books\n  getSavedBooks: function() {\n    return axios.get(\"/api/books/\");\n  },\n  // Deletes the Book with the given id\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a Book to the database\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  }\n};\n","import React from 'react';\nimport BookCard from './BookCard.js';\n\nclass Results extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          books: [],\n          noResults: false,\n          notification: this.props.notification,\n       };\n\n     }\n\n     componentDidMount() {\n          // console.log(this.props);\n          // console.log(this.props.location);\n          const data = this.props.location.data;\n          // console.log(data);\n          if (data && data.results.length > 0) {\n\n           this.setState({\n             books: data.results.filter((value, index) => index < 40),\n           });\n         } else {\n           this.setState({\n             noResults: true\n           });\n         }\n\n     }\n\n     render() {\n\n          // console.log(this.state.books);\n          // console.log(this.props.addBookAlreadyRead);\n\n          let notificationArea = null;\n          if( this.state.noResults !== true && this.props.notification ) {\n\n               let currentTimestamp = Date.now();\n               if( this.props.notificationTimestamp > currentTimestamp - 1000 ) {\n                    notificationArea = ( <div className=\"notification-area\">{this.props.notification}</div> );\n               }\n          }\n\n       return (\n         <div className=\"results-page-area single-page\">\n         { notificationArea }\n           <h1>Search Results</h1>\n\n           <div className=\"results-grid\">\n           {this.state.books.map((book, index) => (\n                <BookCard\n                         key={book.id}\n                         book={book}\n                         searchResult={true}\n                         addBookAlreadyRead={this.props.addBookAlreadyRead}\n                         addBookToRead={this.props.addBookToRead}\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                         updateCoverImg={this.props.updateCoverImg}\n                         useGenres={this.props.useGenres}\n                         useTags={this.props.useTags}\n                         genres={this.props.genres}\n                         tags={this.props.tags}\n                         addNewTag={this.props.addNewTag}\n                         setBookTags={this.props.setBookTags}\n                         defaultDate={this.props.defaultDate}\n                         newImprovedEditBook={this.props.newImprovedEditBook}\n                         addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                    />\n          ))}\n          </div>\n         </div>\n       );\n\n     }\n}\n\nexport default Results;\n","import React from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport Input from './Input.js';\nimport API from \"../utils/API\";\nimport Results from './Results.js';\n\nclass Search extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          title: \"\",\n          toResults: false,\n          results: []\n       };\n\n     }\n\n     componentDidMount() {\n          console.log(\"Search mounted\");\n     }\n\n     handleInputChange = event => {\n          const { name, value } = event.target;\n               this.setState({\n                    [name]: value\n               });\n     };\n\n     handleFormSubmit = event => {\n          event.preventDefault();\n          if (this.state.title) {\n\n               const title = this.state.title.trim();\n               console.log(title);\n\n               API.getNewBooks(title)\n                  .then(res => {\n\n                    console.log(res.data.items);\n\n                    this.setState({\n                      toResults: true,\n                      results: res.data.items\n                    });\n                  })\n                  .catch(err => console.log(err));\n              }\n     }\n\n\nrender() {\n\n          console.log(this.state.title);\n\n          if (this.state.toResults) {\n           return <Redirect to={{\n             pathname: \"/results\",\n             data: { results: this.state.results }\n           }} />\n         }\n\n       return (\n         <div className=\"search-page-area single-page\">\n           <h1>Search for Books</h1>\n           <form id=\"book-title-search\">\n                 <Input\n                   value={this.state.title}\n                   onChange={this.handleInputChange}\n                   name=\"title\"\n                   label=\"Book Title\"\n                   placeholder=\"Search for a book title or author...\"\n                 />\n                 <button\n                   onClick={this.handleFormSubmit}\n                   className=\"btn btn-info\"\n                 >\n                   Find It\n                 </button>\n          </form>\n\n          <div className=\"recommended-section\">\n               <button id=\"show-recommended\"><a href=\"#/recommended\">Get Ideas Based on Your Bookshelf</a></button>\n          </div>\n\n         </div>\n       );\n\n }\n\n}\n\nexport default Search;\n","import React from 'react';\nimport API from \"../utils/API\";\nimport Results from './Results.js';\nimport BookCard from './BookCard.js';\n\nconst shortid = require('shortid');\n\nclass RecommendationsSection extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          authors: this.props.authors,\n          results: [],\n          searching: true,\n       };\n\n       this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n\n     }\n\n\n\n     componentDidMount() {\n\n                  const authorsRaw = this.props.authors;\n                  //let authors = authorsObj.map(author => author.name);\n                  console.log(\"RecommendationsSection mounted\");\n                  console.log(authorsRaw);\n\n                  const authors = authorsRaw.map( author => ( author.name ));\n                  this.setState({ authors: authors });\n                  console.log(authors);\n\n                  if (authors) {\n\n                       authors.forEach(author => {\n\n                            console.log( author );\n                            this.setState({ searching: true });\n\n                            API.getNewBooks(author)\n                               .then(res => {\n\n                                 //console.log(res.data.items);\n\n                                 this.setState({\n                                      results: [...this.state.results, ...res.data.items ],\n                                      searching: false\n                                 })\n                               })\n                               .catch(err => console.log(err));\n\n                       });\n\n                      }\n\n     }\n\n\n     forceUpdateHandler(){\n         this.forceUpdate();\n       };\n\n\nrender() {\n\n         console.log(this.props.authors);\n         console.log(this.props.removedFromSuggestions);\n         const results = this.state.results;\n         const authors = this.state.authors;\n         const banned = this.props.removedFromSuggestions;\n\n         // filter out any books that Google found that don't match the recommended authors\n         const filteredBooksByAuthor = results.filter(function(book) {\n              //console.log(book);\n              if( book.volumeInfo.authors !== undefined ) {\n                   //console.log(book.volumeInfo.authors.indexOf());\n                  return book.volumeInfo.authors.some( r => authors.indexOf(r) >= 0);\n             } else {\n                  return null;\n             }\n           //return book.volumeInfo.authors;\n         });\n\n         // WORK HERE TO REMOVE BOOK DUPLICATES esp by ID\n         const currentShelfIDs = this.props.books.map(book => book.id);\n         let filteredBooksRemoveDups = filteredBooksByAuthor.filter(function(book) {\n                  return !currentShelfIDs.includes(book.id);\n         });\n\n         console.log(filteredBooksRemoveDups);\n\n         // WORK HERE TO REMOVE removeBookFromSuggestions by ID\n         let removedBanned = filteredBooksRemoveDups.filter(function(book) {\n                  return !banned.includes(book.id);\n         });\n         console.log(removedBanned);\n\n\n         // WORK HERE TO REMOVE all books that are not in English\n         // bookObj.volumeInfo.language !== 'en'\n         let removedForeign = removedBanned.filter(function(book) {\n              let bookLanguage = '';\n              if (book.hasOwnProperty('volumeInfo')) {\n                  if (book.volumeInfo.hasOwnProperty('language')) {\n                        // do something\n                        console.log(\"Test Remove Languages\");\n                        console.log( book.volumeInfo.language );\n                        bookLanguage = book.volumeInfo.language;\n                    }\n               }\n\n                return bookLanguage === 'en';\n         });\n         console.log(\"removedForeign\");\n         console.log(removedForeign);\n\n\n         //filteredBooksRemoveDups = this.removeDuplicates( filteredBooksRemoveDups );\n         console.log( filteredBooksByAuthor );\n         console.log( filteredBooksRemoveDups );\n         console.log( results );\n         console.log(filteredBooksByAuthor);\n\n        // const uniqueBooks = Array.from(new Set(filteredBooksByAuthor.map(book => book.id)))\n        //    .map(id => {\n        //      return filteredBooksByAuthor.find(book => book.id === id)\n        // });\n        // console.log(uniqueBooks);\n\n        const uniqueBooks = Array.from(new Set(removedForeign.map(book => book.id)))\n           .map(id => {\n            return removedForeign.find(book => book.id === id)\n        });\n        console.log(uniqueBooks);\n\n\n        // now select 24 random books out of the list\n        let bookIndices = [];\n        console.log(uniqueBooks.length);\n        if( uniqueBooks.length > 24 ) {\n             while(bookIndices.length < 24) {\n                  let index = Math.floor(Math.random()*uniqueBooks.length);\n                  if(!bookIndices.includes(index)) { bookIndices.push(index); }\n             }\n        }\n\n        console.log(bookIndices);\n        const finalBooksToPublish = bookIndices.map((arrayIndex, index) =>  uniqueBooks[arrayIndex] );\n        console.log(finalBooksToPublish);\n\n        console.log(\"removedFromSuggestions\" + this.props.removedFromSuggestions);\n\n       return (\n         <div className=\"recommendations-page-area single-page\">\n                <p>More books by authors that you've liked:</p>\n               <div className=\"results-grid\">\n                    {finalBooksToPublish.map((book, index) => (\n                         <BookCard\n                                  key={book.id}\n                                  book={book}\n                                  searchResult={true}\n                                  addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                  addBookToRead={this.props.addBookToRead}\n                                  settingsFont={this.props.settingsFont}\n                                  settingsColor={this.props.settingsColor}\n                                  removeBookFromSuggestions={this.props.removeBookFromSuggestions}\n                             />\n                   ))}\n              </div>\n              { this.state.results &&\n                   <button id=\"more-ideas-refresh\" onClick= {this.forceUpdateHandler}>Get More Ideas</button>\n              }\n         </div>\n       );\n\n }\n\n}\n\nexport default RecommendationsSection;\n","import React from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport Input from './Input.js';\nimport API from \"../utils/API\";\nimport Results from './Results.js';\nimport BookCard from './BookCard.js';\nimport RecommendationsSection from './RecommendationsSection.js';\n\nconst shortid = require('shortid');\n\nclass Recommended extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          authors: [],\n          calculating: true\n       };\n\n     }\n\n\n     removeDuplicates(array) {\n       array.splice(0, array.length, ...(new Set(array)))\n     };\n\n\n     getAverageRating(books) {\n\n          let starRatingsArray = [];\n          if( starRatingsArray === undefined ) { return null; }\n          for( let i = 0; i < books.length; i++ ) {\n               if( books[i].bookshelfRating > 0 ) {\n                    starRatingsArray.push(parseInt(books[i].bookshelfRating));\n               }\n          }\n          if( starRatingsArray.length === 0 ) { return null; }\n          let sum = starRatingsArray.reduce((previous, current) => current += previous);\n          let avg = sum / starRatingsArray.length;\n          let avgToPublish = avg.toFixed(2);\n\n          return avg;\n     }\n\n\n     componentDidMount() {\n\n          console.log( \"RECOMMENDED MOUNTED\" );\n          const books = this.props.books;\n          console.log(books);\n          const rawAuthors = books.map((book, index) => ( book.authors )).flat();\n          const removeDupAuthors = this.removeDuplicates(rawAuthors);\n          console.log(rawAuthors);\n\n               let authorsObj = rawAuthors.map((author, index) => {\n                    console.log(author);\n                     const bookArrayByAuthor = books.filter(book => book.authors.includes(author) && book.alreadyRead === true);\n                     console.log(bookArrayByAuthor);\n                     let avgRatingForAuthor = this.getAverageRating(bookArrayByAuthor);\n                     return { name: author, id: shortid.generate(), books: bookArrayByAuthor, avgRating: avgRatingForAuthor };\n               });\n               console.log(authorsObj);\n\n               const authorListToPublish = [...authorsObj].filter(author => author.books.length > 0  && author.avgRating > 2 )\n\n                    .sort(function (a, b) {\n\n                    // If the first item has a higher number, move it down\n                    // If the first item has a lower number, move it up\n                    if (a.avgRating > b.avgRating) return -1;\n                    if (a.avgRating < b.avgRating) return 1;\n\n                    // If the count number is the same between both items, sort alphabetically\n                    // If the first item comes first in the alphabet, move it up\n                    // Otherwise move it down\n                    if (a.name > b.name) return 1;\n                    if (a.name < b.name) return -1;\n\n               });\n\n               console.log(authorListToPublish);\n\n               // now select 6 random authors to be highlighted on the suggestion page\n               // let authorIndices = [];\n               // for( let i = 0; i < 24; i++ ) {\n               //      authorIndices.push(Math.floor(Math.random()*authorListToPublish.length));\n               // }\n               // console.log(authorIndices);\n               // console.log(authorListToPublish[2]);\n               // const recAuthorsRaw = authorIndices.map((arrayIndex, index) =>  authorListToPublish[arrayIndex] );\n               // console.log(recAuthorsRaw);\n\n               this.setState({\n                    authors: authorListToPublish,\n                    calculating: false\n               });\n\n     }\n\n\nrender() {\n\n     const books = this.props.books;\n     console.log(this.state.authors);\n\n       return (\n         <div className=\"search-page-area single-page\">\n           <h1>Ideas for You</h1>\n\n           { this.state.calculating === false &&\n                <RecommendationsSection\n                    authors={this.state.authors}\n                    books={books}\n                    removedFromSuggestions={this.props.removedFromSuggestions}\n                    removeBookFromSuggestions={this.props.removeBookFromSuggestions}\n                    addBookAlreadyRead={this.props.addBookAlreadyRead}\n                    addBookToRead={this.props.addBookToRead}\n                />\n           }\n\n         </div>\n       );\n\n }\n\n}\n\nexport default Recommended;\n","import React from 'react';\n\nconst Logout = (props) => {\n\n     return (\n          <button type=\"submit\" onClick={props.logOutUser} className=\"settings-button\">Log Out</button>\n     );\n\n}\n\nexport default Logout;\n","import React from 'react';\n\nconst ChangePassword = (props) => {\n\n     return (\n          <button type=\"submit\" onClick={props.resetPassword} className=\"settings-button\">Change Password via Email Link</button>\n     );\n\n}\n\nexport default ChangePassword;\n","import React from 'react';\n\nconst DeleteAccount = (props) => {\n\n     const nowDeleteAccount = (event) => {\n          props.deleteAccount();\n     }\n\n     return (\n          <button\n               className=\"settings-button delete-account\"\n               type=\"submit\"\n               onClick={e =>\n            window.confirm(\n              \"Are you sure you want to permanelty delete your account? All of your information will be removed. You cannot undo this action.\"\n         ) && nowDeleteAccount()\n          }>Delete My Account</button>\n     );\n\n}\n\nexport default DeleteAccount;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectThemeColor extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setColor = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsColor(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsColor = this.props.settingsColor;\n          console.log(settingsColor);\n\n               var myColorToPublish = null;\n               if( settingsColor === 'default' ) { myColorToPublish = 'Default (Dark Blue)'; }\n               if( settingsColor === 'gray' ) { myColorToPublish = 'Gray'; }\n               if( settingsColor === 'green' ) { myColorToPublish = 'Green'; }\n               if( settingsColor === 'orange' ) { myColorToPublish = 'Orange'; }\n               if( settingsColor === 'purple' ) { myColorToPublish = 'Purple'; }\n\n          let defaultColorPublish = {\n               value: settingsColor,\n               label: myColorToPublish\n          };\n          if( settingsColor === null ) { defaultColorPublish = null; }\n\n          const colorOptions = [\n               { value: 'default', label: 'Default (Dark Blue)' },\n               { value: 'gray', label: 'Gray' },\n               { value: 'green', label: 'Green' },\n               { value: 'orange', label: 'Orange' },\n               { value: 'purple', label: 'Purple' },\n          ];\n\n          if( defaultColorPublish ) {\n\n               return (\n                 <Select\n                    placeholder='Select Color Theme'\n                    options={colorOptions}\n                    defaultValue={defaultColorPublish}\n                    isSearchable\n                    onChange={this.setColor}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select Color Theme'\n                    options={colorOptions}\n                    isSearchable\n                    onChange={this.setColor}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectThemeColor;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectThemeFont extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setFont = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsFont(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsColor = this.props.settingsFont;\n          console.log(settingsColor);\n\n               var myColorToPublish = null;\n               if( settingsColor === 'default' ) { myColorToPublish = 'Default'; }\n               if( settingsColor === 'handwritten' ) { myColorToPublish = 'Handwritten'; }\n               if( settingsColor === 'typewriter' ) { myColorToPublish = 'Typewriter'; }\n               if( settingsColor === 'sans' ) { myColorToPublish = 'Sans Serif'; }\n               if( settingsColor === 'serif' ) { myColorToPublish = 'Serif'; }\n\n          let defaultColorPublish = {\n               value: settingsColor,\n               label: myColorToPublish\n          };\n          if( settingsColor === null ) { defaultColorPublish = null; }\n\n          const colorOptions = [\n               { value: 'default', label: 'Default' },\n               { value: 'handwritten', label: 'Handwritten' },\n               { value: 'typewriter', label: 'Typewriter' },\n               { value: 'sans', label: 'Sans Serif' },\n               { value: 'serif', label: 'Serif' },\n          ];\n\n          if( defaultColorPublish ) {\n\n               return (\n                 <Select\n                    placeholder='Select Font'\n                    options={colorOptions}\n                    defaultValue={defaultColorPublish}\n                    isSearchable\n                    onChange={this.setFont}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select Font'\n                    options={colorOptions}\n                    isSearchable\n                    onChange={this.setFont}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectThemeFont;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectBookSize extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setBookSize = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsBookSize(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsBookSize = this.props.bookSize;\n          console.log(settingsBookSize);\n\n               var myBookSizesToPublish = null;\n               if( settingsBookSize === 'default' ) { myBookSizesToPublish = 'Default (Medium)'; }\n               if( settingsBookSize === 'large' ) { myBookSizesToPublish = 'Large'; }\n               if( settingsBookSize === 'small' ) { myBookSizesToPublish = 'Small'; }\n\n          let defaultBookSizePublish = {\n               value: settingsBookSize,\n               label: myBookSizesToPublish\n          };\n          if( settingsBookSize === null ) { defaultBookSizePublish = null; }\n\n          const bookSizes = [\n               { value: 'default', label: 'Default (Medium)' },\n               { value: 'large', label: 'Large' },\n               { value: 'small', label: 'Small' },\n          ];\n\n          if( defaultBookSizePublish ) {\n\n               return (\n                 <Select\n                    placeholder='Select Cover Size'\n                    options={bookSizes}\n                    defaultValue={defaultBookSizePublish}\n                    isSearchable\n                    onChange={this.setBookSize}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select Cover Size'\n                    options={bookSizes}\n                    isSearchable\n                    onChange={this.setBookSize}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectBookSize;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectUseGenres extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setUseGenres = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsUseGenres(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsUseGenres = this.props.useGenres;\n          console.log(settingsUseGenres);\n\n               var myGenreSettingsToPublish = null;\n               if( settingsUseGenres === true ) { myGenreSettingsToPublish = 'Yes'; }\n               if( settingsUseGenres === false ) { myGenreSettingsToPublish = 'No'; }\n\n          let defaultUseGenres = {\n               value: settingsUseGenres,\n               label: myGenreSettingsToPublish\n          };\n          if( settingsUseGenres === null ) {\n               defaultUseGenres = null;\n          }\n\n          const useGenres = [\n               { value: true, label: 'Yes' },\n               { value: false, label: 'No' },\n          ];\n\n          if( defaultUseGenres ) {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useGenres}\n                    defaultValue={defaultUseGenres}\n                    isSearchable\n                    onChange={this.setUseGenres}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useGenres}\n                    isSearchable\n                    onChange={this.setUseGenres}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectUseGenres;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectUseTags extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setUseTags = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsUseTags(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsUseTags = this.props.useTags;\n          console.log(settingsUseTags);\n\n               var myTagSettingsToPublish = null;\n               if( settingsUseTags === true ) { myTagSettingsToPublish = 'Yes'; }\n               if( settingsUseTags === false ) { myTagSettingsToPublish = 'No'; }\n\n          let defaultUseTags = {\n               value: settingsUseTags,\n               label: myTagSettingsToPublish\n          };\n          if( settingsUseTags === null ) {\n               defaultUseTags = null;\n          }\n\n          const useTags = [\n               { value: true, label: 'Yes' },\n               { value: false, label: 'No' },\n          ];\n\n          if( defaultUseTags ) {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useTags}\n                    defaultValue={defaultUseTags}\n                    isSearchable\n                    onChange={this.setUseTags}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useTags}\n                    isSearchable\n                    onChange={this.setUseTags}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectUseTags;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectUseGenres extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setDefaultDate = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeDefaultDate(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const defaultDateSetting = this.props.defaultDateSetting;\n          console.log(defaultDateSetting);\n\n          let dateSettingToPublish = {\n               value: defaultDateSetting,\n               label: defaultDateSetting\n          };\n\n          const useGenres = [\n               { value: 'Today', label: 'Today' },\n               { value: 'No Date Set', label: 'No Date Set' },\n          ];\n\n          if( defaultDateSetting ) {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useGenres}\n                    defaultValue={dateSettingToPublish}\n                    isSearchable\n                    onChange={this.setDefaultDate}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useGenres}\n                    isSearchable\n                    onChange={this.setDefaultDate}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectUseGenres;\n","import React from 'react';\nimport Logout from './Logout.js';\nimport ChangePassword from './ChangePassword.js';\nimport DeleteAccount from './DeleteAccount.js';\nimport SelectThemeColor from './SelectThemeColor.js';\nimport SelectThemeFont from './SelectThemeFont.js';\nimport SelectBookSize from './SelectBookSize.js';\nimport SelectUseGenres from './SelectUseGenres.js';\nimport SelectUseTags from './SelectUseTags.js';\nimport SelectDateDefault from './SelectDateDefault.js';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\nclass Settings extends React.Component {\n\n\n     constructor(props) {\n          super(props);\n\n          this.state = {\n              emailedResetLink: false,\n            };\n\n     }\n\n\n\n     resetPassword = () => {\n\n          var auth = firebaseApp.auth();\n          const emailAddress = this.props.loggedInEmail;\n\n          auth.sendPasswordResetEmail(emailAddress).then(function() {\n            // Email sent.\n            console.log(\"Reset password email sent\");\n\n          }).catch(function(error) {\n            // An error happened.\n            console.log(\"ERROR: could not send reset password email\");\n          });\n\n          this.setState({ emailedResetLink: true });\n\n     }\n\n\n     deleteAccount = () => {\n\n          var user = firebaseApp.auth().currentUser;\n\n          user.delete().then(function() {\n            // User deleted.\n            console.log(\"Current User PERMANENTLY DELETED\");\n          }).catch(function(error) {\n            // An error happened.\n            console.log(\"ERROR: could not delete current user\");\n          });\n\n          this.props.permanentlyDeleteUserAndInfo(user);\n\n     }\n\n\n     render() {\n\n          console.log(this.props.defaultDate);\n\n\n       return (\n         <div className=\"settings-page-area single-page\">\n           <h1>Settings</h1>\n           <div className=\"color-font-area\">\n                <div className=\"select-color-area\">\n                    <h4>Select Color</h4>\n                     <SelectThemeColor\n                         settingsColor={this.props.settingsColor}\n                         changeSettingsColor={this.props.changeSettingsColor}\n                     />\n                </div>\n                <div className=\"select-font-area\">\n                    <h4>Select Font</h4>\n                     <SelectThemeFont\n                         settingsFont={this.props.settingsFont}\n                         changeSettingsFont={this.props.changeSettingsFont}\n                     />\n                </div>\n           </div>\n           <div className=\"color-font-area\">\n                <div className=\"select-color-area\">\n                    <h4>Book Cover Size</h4>\n                     <SelectBookSize\n                          changeSettingsBookSize={this.props.changeSettingsBookSize}\n                          bookSize={this.props.bookSize}\n                     />\n                </div>\n                <div className=\"select-font-area\">\n                    <h4>View Genres?</h4>\n                     <SelectUseGenres\n                         changeSettingsUseGenres={this.props.changeSettingsUseGenres}\n                         useGenres={this.props.useGenres}\n                     />\n                </div>\n           </div>\n           <div className=\"color-font-area\">\n                <div className=\"select-color-area\">\n                    <h4>View Tags?</h4>\n                     <SelectUseTags\n                          changeSettingsUseTags={this.props.changeSettingsUseTags}\n                          useTags={this.props.useTags}\n                     />\n                </div>\n\n                <div className=\"select-color-area\">\n                    <h4>Date Default</h4>\n                     <SelectDateDefault\n                          changeDefaultDate={this.props.changeDefaultDate}\n                          defaultDateSetting={this.props.defaultDate}\n                     />\n                </div>\n           </div>\n           <p>Currently logged in as: {this.props.loggedInEmail}</p>\n           <div className=\"settings-action-buttons-area\">\n                <Logout logOutUser={this.props.logOutUser} />\n                <ChangePassword resetPassword={this.resetPassword} />\n                <DeleteAccount deleteAccount={this.deleteAccount} />\n           </div>\n         </div>\n       );\n     }\n\n\n}\n\nexport default Settings;\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div className=\"settings-page-area\">\n      <h1>Not Found - please go back to the homepage.</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectToReadView extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setView = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeToReadView(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const defaultView = this.props.defaultView;\n          console.log(defaultView);\n\n               var myViewToPublish = null;\n               if( defaultView === 'date' ) { myViewToPublish = 'Date (Recently Added)'; }\n               if( defaultView === 'alphabetical' ) { myViewToPublish = 'Alphabetical'; }\n\n          let defaultViewPublish = {\n               value: defaultView,\n               label: myViewToPublish\n          };\n          if( defaultView === null ) { defaultViewPublish = null; }\n          //console.log(defaultView);\n\n          const ratingOptions = [\n               { value: 'alphabetical', label: 'Alphabetical' },\n               { value: 'date', label: 'Date (Recently Added)' },\n          ];\n\n          if( defaultView ) {\n\n               return (\n                 <Select\n                    placeholder='Alphabetical'\n                    options={ratingOptions}\n                    defaultValue={defaultViewPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Alphabetical'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectToReadView;\n","import React from 'react';\nimport BookCard from './BookCard.js';\nimport SelectToReadView from './SelectToReadView.js';\n\nvar shortid = require('shortid');\n\nclass SavedForLater extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             booksToRead: [],\n             booksToReadView: '',\n      };\n    }\n\n\n\n    render() {\n\n         const booksToRead = this.props.booksToRead;\n         console.log(this.props);\n         console.log(booksToRead);\n         //console.log(booksToRead.length);\n\n         let orderedBooks = booksToRead;\n\n               // order these books!\n               if( this.props.booksToReadView === 'alphabetical') {\n                    orderedBooks = [...booksToRead].sort((a, b) => (a.titleForSorting > b.titleForSorting) ? 1 : -1);\n               }\n\n               if( this.props.booksToReadView === 'date') {\n\n                         // New sorting\n                         orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                         \t// If the first item has a higher number, move it down\n                         \t// If the first item has a lower number, move it up\n                         \tif (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                         \tif (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                         \t// If the count number is the same between both items, sort alphabetically\n                         \t// If the first item comes first in the alphabet, move it up\n                         \t// Otherwise move it down\n                         \tif (a.titleForSorting > b.titleForSorting) return 1;\n               \t          if (a.titleForSorting < b.titleForSorting) return -1;\n\n                         });\n\n               }\n\n               if( this.props.booksToReadView === 'rating') {\n\n                         // New sorting\n                         orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                         \t// If the first item has a higher number, move it down\n                         \t// If the first item has a lower number, move it up\n                         \tif (a.bookshelfRating > b.bookshelfRating) return -1;\n                         \tif (a.bookshelfRating < b.bookshelfRating) return 1;\n\n                         \t// If the count number is the same between both items, sort alphabetically\n                         \t// If the first item comes first in the alphabet, move it up\n                         \t// Otherwise move it down\n                         \tif (a.titleForSorting > b.titleForSorting) return 1;\n               \t          if (a.titleForSorting < b.titleForSorting) return -1;\n\n                         });\n\n               }\n\n\n\n       if( booksToRead === undefined || booksToRead.length === 0  ) {\n\n                return(\n                <div className=\"saved-for-later-area single-page\">\n                  <h1>To Read</h1>\n                       <p className=\"no-books-yet-message\">You don't have any books saved for later. But you can <a href=\"/search\">run a search</a> and start adding books!</p>\n                  <div>{this.props.loggedInEmail}</div>\n                </div>\n                );\n\n           } else {\n\n\n    return(\n    <div className=\"saved-for-later-area single-page\">\n      <h1>To Read</h1>\n      { this.props.notification &&\n           <div className=\"notification-area\">{this.props.notification}</div>\n      }\n           <div className=\"view-type\">\n                     <div className=\"viewer-label\">View Your Books by: </div>\n                     <div className=\"viewer-selector-area\">\n                          <SelectToReadView\n                               defaultView={this.props.booksToReadView}\n                               changeToReadView={this.props.changeToReadView}\n                          />\n                </div>\n           </div>\n           <div className={\"results-grid \" + this.props.bookSize}>\n                {orderedBooks.map((book, index) => (\n                     <BookCard\n                              key={book.id}\n                              book={book}\n                              editBook={this.props.editBook}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              savedForLater={true}\n                              toRead={true}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              useGenres={this.props.useGenres}\n                              updateCoverImg={this.props.updateCoverImg}\n                              createNotification={this.createNotification}\n                              genres={this.props.genres}\n                              resetGenreToZero={this.props.resetGenreToZero}\n                              addNewGenre={this.props.addNewGenre}\n                              useTags={this.props.useTags}\n                              addNewTag={this.props.addNewTag}\n                              setBookTags={this.props.setBookTags}\n                              tags={this.props.tags}\n                              resetAllTags={this.props.resetAllTags}\n                              newImprovedEditBook={this.props.newImprovedEditBook}\n                         />\n              ))}\n         </div>\n    </div>\n    );\n\n     }\n\n    }\n\n}\n\n\nexport default SavedForLater;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectAlreadyReadView extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setView = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeAlreadyReadView(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const defaultView = this.props.defaultView;\n          console.log(defaultView);\n\n               var myViewToPublish = null;\n               if( defaultView === 'alphabetical' ) { myViewToPublish = 'Alphabetical'; }\n               if( defaultView === 'rating' ) { myViewToPublish = 'Rating (High to Low)'; }\n               if( defaultView === 'date' ) { myViewToPublish = 'Date (Recently Completed)'; }\n\n          let defaultViewPublish = {\n               value: defaultView,\n               label: myViewToPublish\n          };\n          if( defaultView === null ) { defaultViewPublish = null; }\n          //console.log(defaultView);\n\n          const ratingOptions = [\n               { value: 'alphabetical', label: 'Alphabetical' },\n               { value: 'rating', label: 'Rating (High to Low)' },\n               { value: 'date', label: 'Date (Recently Completed)' },\n          ];\n\n          if( defaultView ) {\n\n               return (\n                 <Select\n                    placeholder='Rating'\n                    options={ratingOptions}\n                    defaultValue={defaultViewPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Rating'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectAlreadyReadView;\n","import React from 'react';\n\nconst shortid = require('shortid');\n\nexport default function AdvancedStats(props) {\n\n     function formatNumber(num) {\n          return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n     }\n\n     function getYear(book) {\n          const dateObj = new Date( book.bookshelfTimestamp );\n          const yearToReturn = dateObj.getFullYear();\n          return yearToReturn;\n     }\n\n     function getTotalPages(books) {\n          //console.log(\"getTotalPages\");\n          let totalPages = 0;\n          for( let i = 0; i < books.length; i++ ) {\n               if( books[i].pageCount !== null && books[i].pageCount !== undefined && books[i].pageCount > 0 ) {\n                    totalPages += books[i].pageCount;\n               }\n          }\n          return totalPages.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n     }\n\n     function getAverageRating(books) {\n\n          let starRatingsArray = [];\n          for( let i = 0; i < books.length; i++ ) {\n               if( books[i].bookshelfRating > 0 ) {\n                    starRatingsArray.push(parseInt(books[i].bookshelfRating));\n               }\n          }\n          if( starRatingsArray.length === 0 ) { return(<span className=\"no-ratings-assigned-message\">No ratings assigned</span>); }\n          let sum = starRatingsArray.reduce((previous, current) => current += previous);\n          let avg = sum / starRatingsArray.length;\n          let avgToPublish = avg.toFixed(2);\n\n          return avgToPublish;\n     }\n\n       const books = props.books;\n       // console.log(props.books);\n\n       // get total pages\n       let totalPages = 0;\n       let starRatingsArray = [];\n       for( let i = 0; i < books.length; i++ ) {\n            //console.log(books[i].pageCount);\n            totalPages += books[i].pageCount;\n            if( books[i].bookshelfRating > 0 ) {\n                 //console.log(books[i]);\n                 starRatingsArray.push(parseInt(books[i].bookshelfRating));\n            }\n       }\n\n       // console.log(starRatingsArray);\n       let avgToPublish = 'No ratings assigned';\n       if( starRatingsArray.length > 0 ) {\n            let sum = starRatingsArray.reduce((previous, current) => current += previous);\n            // console.log(sum);\n            // console.log(starRatingsArray.length);\n            let avg = sum / starRatingsArray.length;\n            avgToPublish = avg.toFixed(2);\n       }\n\n\n       // get number of books read each year\n\n\n       // get total books read without any date assigned\n       //console.log(books);\n       const booksNoDateAssigned = books.filter(function(book) {\n                                                         return book.bookshelfTimestamp === 0;\n                                                       });\n       //console.log(booksNoDateAssigned);\n\n\n\n\n       // loop through remaining books (timestamp > 0) and create groups of books by year\n       const booksWithDate = books.filter(function(book) {\n                                                         return book.bookshelfTimestamp > 0;\n                                                       });\n\n               console.log(booksWithDate);\n               console.log(booksWithDate.length);\n\n               let yearlyChart = [];\n\n       if( booksWithDate.length > 0 ) {\n\n            // re-order the array of books by timestamp\n            booksWithDate.sort((a, b) => (a.bookshelfTimestamp < b.bookshelfTimestamp) ? 1 : -1)\n            console.log(booksWithDate);\n\n\n            let prevDateRaw = new Date( booksWithDate[0].bookshelfTimestamp );\n            //console.log(booksWithDate[0].bookshelfTimestamp);\n            let prevDateYear = prevDateRaw.getFullYear();\n            let currentYearBooks = [];\n\n            for( let j = 0; j < booksWithDate.length; j++ ) {\n\n                 let bookDate = new Date(booksWithDate[j].bookshelfTimestamp);\n                 let currentBookYear = bookDate.getFullYear();\n                 console.log(\"currentBookYear: \" + currentBookYear);\n\n                 //currentYearBooks.push(booksWithDate[j]);\n\n                 if( j === 0 || currentBookYear !== prevDateYear ) { // USE MAP in line 119 to assign unique keys\n\n                      // create new array, filtered just for this year\n                      currentYearBooks = books.filter(function(book) { return getYear(book) === currentBookYear; });\n                      console.log(currentBookYear);\n                      console.log(prevDateYear);\n                      console.log(j);\n\n                      yearlyChart.push(\n                           <div className=\"yearly-chart-area\">\n                              <h3 className=\"yearly-summary\">{currentBookYear}</h3>\n                              <div className=\"number-of-books\">Books read: {currentYearBooks.length}</div>\n                              <div className=\"pages\">Approx. pages: {getTotalPages(currentYearBooks)}</div>\n                              <div className=\"average-rating\">Average rating: {getAverageRating(currentYearBooks)}</div>\n                           </div>\n                         );\n\n\n                    prevDateYear = currentBookYear;\n\n                 }\n\n                 if( currentBookYear !== prevDateYear ) {\n                      currentYearBooks = [];\n                 }\n\n                    console.log(yearlyChart);\n\n               }\n\n          }\n\n       // now end with all the books that don't have a year assigned\n       // first check if there are any books with a date === 0\n       let booksWithoutDate = [];\n       booksWithoutDate = books.filter(function(book) { return book.bookshelfTimestamp === 0; });\n       if( booksWithoutDate.length > 0 ) {\n       yearlyChart.push(<div className=\"yearly-chart-area\">\n                              <h3 className=\"yearly-summary\">No date assigned</h3>\n                              <div className=\"number-of-books\">Books read: {booksNoDateAssigned.length}</div>\n                              <div className=\"pages\">Approx. pages: {getTotalPages(booksNoDateAssigned)}</div>\n                              <div className=\"average-rating\">Average rating: {getAverageRating(booksNoDateAssigned)}</div>\n                           </div>);\n                      }\n\n\n       return (\n            <div className=\"advanced-stats-area\">\n               <h2>Your Reading, by the Numbers</h2>\n               <div className=\"stat-item total-books-read\">Total books read: {books.length}</div>\n               <div className=\"stat-item total-pages-read\">Approx. total pages read: {getTotalPages(books)}</div>\n               <div className=\"stat-item alltime-avg-stars\">All-time average rating: {avgToPublish}</div>\n               <div className=\"stat-item chart-area-all-years\">\n                    { yearlyChart.map((year) => (\n                         <div key={shortid.generate()} className=\"single-year\">{year}</div>\n                    ))}</div>\n            </div>\n\n       );\n}\n","import React from 'react';\n\nconst shortid = require('shortid');\n\nclass AuthorList extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n          this.state = {\n\n            };\n\n     }\n\n     // removeDuplicates(array) {\n     //   return array.filter((a, b) => array.indexOf(a) === b)\n     // };\n\n     removeDuplicates(array) {\n       array.splice(0, array.length, ...(new Set(array)))\n     };\n\n\n     getAverageRating(books) {\n\n          let starRatingsArray = [];\n          if( starRatingsArray === undefined ) { return null; }\n          for( let i = 0; i < books.length; i++ ) {\n               if( books[i].bookshelfRating > 0 ) {\n                    starRatingsArray.push(parseInt(books[i].bookshelfRating));\n               }\n          }\n          if( starRatingsArray.length === 0 ) { return null; }\n          let sum = starRatingsArray.reduce((previous, current) => current += previous);\n          let avg = sum / starRatingsArray.length;\n          let avgToPublish = avg.toFixed(2);\n\n          return avg;\n     }\n\n\n     render() {\n\n          const books = this.props.books;\n          const rawAuthors = books.map((book, index) => ( book.authors )).flat();\n          const removeDupAuthors = this.removeDuplicates(rawAuthors);\n          console.log(rawAuthors);\n\n\n\n               let authorsObj = rawAuthors.map((author, index) => {\n                    console.log(author);\n                     const bookArrayByAuthor = books.filter(book => book.authors.includes(author));\n                     console.log(bookArrayByAuthor);\n                     let avgRatingForAuthor = this.getAverageRating(bookArrayByAuthor);\n                     return { name: author, id: shortid.generate(), books: bookArrayByAuthor, avgRating: avgRatingForAuthor };\n               });\n               console.log(authorsObj);\n\n               // re-arrange by author avg rating\n               //authorsObj.sort((a, b) => (a.avgRating < b.avgRating) ? 1 : -1);\n               // New sorting\n               const authorListToPublish = [...authorsObj].sort(function (a, b) {\n\n                    // If the first item has a higher number, move it down\n                    // If the first item has a lower number, move it up\n                    if (a.avgRating > b.avgRating) return -1;\n                    if (a.avgRating < b.avgRating) return 1;\n\n                    // If the count number is the same between both items, sort alphabetically\n                    // If the first item comes first in the alphabet, move it up\n                    // Otherwise move it down\n                    if (a.name > b.name) return 1;\n                    if (a.name < b.name) return -1;\n\n               });\n\n\n\n          return(\n               <>\n               <h2>AuthorList</h2>\n               <ul>\n                    { authorListToPublish.map((author,index) => ( <li>{author.name} (# books read: {author.books.length} | Avg. rating: {author.avgRating.toFixed(2)}</li> ) ) }\n               </ul>\n               </>\n          );\n\n     }\n\n}\n\nexport default AuthorList;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectFilter extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               selectRating: this.props.currentSelection\n          }\n     }\n\n\n     selectRating = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setRatingFilter(selectedOption.value);\n               this.setState({ selectRating: selectedOption.value });\n          } else {\n               this.props.clearRatingFilter();\n          }\n\n     }\n\n\n     selectAuthor = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setAuthorFilter(selectedOption.value);\n               this.setState({ selectRating: selectedOption.value });\n          } else {\n               this.props.clearAuthorFilter();\n          }\n\n     }\n\n\n     selectGenre = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setGenreFilter(selectedOption.value);\n          } else {\n               this.props.clearGenreFilter();\n          }\n\n     }\n\n\n     selectTag = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setTagFilter(selectedOption.value);\n          } else {\n               this.props.clearTagFilter();\n          }\n\n     }\n\n\n\n     removeDuplicates(array) {\n       return array.filter((a, b) => array.indexOf(a) === b)\n     };\n\n\n     render() {\n\n          const books = this.props.books;\n\n          // create empty variables\n          let filterOptions = [];\n          let placeholder = '';\n\n          // set vars based on props //////////////////////////////////////////\n          // RATING selections //////////////\n          if( this.props.type === 'rating' ) {\n               placeholder = 'Rating';\n               console.log(\"CURRENT RATING SELECTION: \" + this.state.selectRating);\n               console.log(\"CURRENT PROPS SELECTION: \" + this.props.currentSelection);\n               filterOptions = [\n                    { value: '5', label: '⭐⭐⭐⭐⭐ Life-Changing' },\n                    { value: '4', label: '⭐⭐⭐⭐ Great +' },\n                    { value: '3', label: '⭐⭐⭐ Good +' },\n                    { value: '2', label: '⭐⭐ OK +' },\n               ];\n\n               let myRatingToPublish = null;\n               let defaultRating = this.state.selectRating;\n               if( defaultRating > 0 ) {\n                    if( defaultRating === '5' ) { myRatingToPublish = '⭐⭐⭐⭐⭐ Life-Changing'; }\n                    if( defaultRating === '4' ) { myRatingToPublish = '⭐⭐⭐⭐ Great'; }\n                    if( defaultRating === '3' ) { myRatingToPublish = '⭐⭐⭐ Good'; }\n                    if( defaultRating === '2' ) { myRatingToPublish = '⭐⭐ OK'; }\n                    if( defaultRating === '1' ) { myRatingToPublish = \"⭐ Bad / Didn't Finish\"; }\n               }\n\n               let defaultRatingPublish = {\n                    value: defaultRating,\n                    label: myRatingToPublish\n               };\n\n               if( defaultRating > 0 && this.props.currentSelection > 0 ) {\n\n                    console.log(\"Returning option 1\");\n\n                    return (\n                      <Select\n                         placeholder='Rating'\n                         options={filterOptions}\n                         defaultValue={defaultRatingPublish}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectRating}\n                      />\n                    );\n\n               } else {\n\n                    console.log(\"Returning option 2\");\n\n                    return (\n                      <Select\n                         placeholder='Rating'\n                         defaultValue={''}\n                         value={null}\n                         options={filterOptions}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectRating}\n                      />\n                    );\n\n               }\n\n\n          }\n\n\n\n          // AUTHOR selections //////////////\n          if( this.props.type === 'author' ) {\n\n               const books = this.props.books;\n               const rawAuthors = books.map((book, index) => ( book.authors )).flat();\n               rawAuthors.splice(0, rawAuthors.length, ...(new Set(rawAuthors)));\n               console.log(rawAuthors);\n\n               // alpabetize by last name\n               rawAuthors.sort(function (a, b) {\n                   if (a.split(' ')[1] > b.split(' ')[1])\n                     return 1;\n                   if (a.split(' ')[1] < b.split(' ')[1])\n                     return -1;\n                   return 0;\n               });\n               console.log(rawAuthors);\n\n               let filterOptions = [];\n               for( let i = 0; i < rawAuthors.length; i++ ) {\n                    filterOptions.push({ value: rawAuthors[i], label: rawAuthors[i] });\n               }\n\n               placeholder = 'Author';\n               if( this.props.currentSelection === '' ) {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         value={null}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectAuthor}\n                      />\n                    );\n\n               } else {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectAuthor}\n                      />\n                    );\n\n               }\n\n          }\n\n\n\n          // GENRE selections //////////////\n          if( this.props.type === 'genres' ) {\n\n               const genresRaw = books.map(book => book.genre);\n               let genres = genresRaw.filter(Boolean);\n               genres = this.removeDuplicates(genres);\n               genres.sort();\n\n               let filterOptions = [];\n               for( let i = 0; i < genres.length; i++ ) {\n                    filterOptions.push({ value: genres[i], label: genres[i] });\n               }\n\n               placeholder = 'Genre';\n               if( this.props.currentSelection === '' ) {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         value={null}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectGenre}\n                      />\n                    );\n\n               } else {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectGenre}\n                      />\n                    );\n\n               }\n\n          }\n\n\n          // TAGS selections //////////////\n          if( this.props.type === 'tags' ) {\n               placeholder = 'Tag';\n\n               const tagsRaw = books.map(book => book.tags);\n               let tags = tagsRaw.filter(Boolean).flat();\n\n               tags = this.removeDuplicates(tags);\n               console.log(tags);\n               tags.sort((a, b) => a.toString().localeCompare(b, 'fr', {ignorePunctuation: true}));\n\n               let filterOptions = [];\n               for( let i = 0; i < tags.length; i++ ) {\n                    filterOptions.push({ value: tags[i], label: tags[i] });\n               }\n\n               placeholder = 'Tags';\n               if( this.props.currentSelection === '' ) {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         value={null}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectTag}\n                      />\n                    );\n\n               } else {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectTag}\n                      />\n                    );\n\n               }\n\n          }\n\n\n\n     }\n\n}\n\nexport default SelectFilter;\n","import React from 'react';\nimport BookCard from './BookCard.js';\nimport SelectAlreadyReadView from './SelectAlreadyReadView';\nimport AdvancedStats from './AdvancedStats.js';\nimport AuthorList from './AuthorList.js';\nimport SelectFilter from './SelectFilter.js';\nimport Switch from '@material-ui/core/Switch';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n\nvar shortid = require('shortid');\n\nclass PreviouslyRead extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             bookOrder: this.props.booksAlreadyReadView,\n             authorFilter: '',\n             genreFilter: '',\n             tagFilter: '',\n             ratingFilter: 0,\n             displayedBooks: this.props.booksAlreadyRead,\n             showStats: false,\n             showFilters: false,\n      };\n    }\n\n\n\n    orderBooks = ( bookOrderString, booksArray ) => {\n         console.log( bookOrderString );\n         console.log( booksArray )\n\n         let orderedBooks = null;\n         if( bookOrderString === 'alphabetical') {\n              orderedBooks = [...booksArray].sort((a, b) => (a.titleForSorting > b.titleForSorting) ? 1 : -1);\n         }\n\n         if( this.props.booksAlreadyReadView === 'date') {\n\n                   // New sorting\n                   orderedBooks = [...booksArray].sort(function (a, b) {\n\n                        // If the first item has a higher number, move it down\n                        // If the first item has a lower number, move it up\n                        if (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                        if (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                        // If the count number is the same between both items, sort alphabetically\n                        // If the first item comes first in the alphabet, move it up\n                        // Otherwise move it down\n                        if (a.title > b.title) return 1;\n                        if (a.title < b.title) return -1;\n\n                   });\n\n         }\n\n         if( this.props.booksAlreadyReadView === 'rating') {\n\n                   // New sorting\n                   orderedBooks = [...booksArray].sort(function (a, b) {\n\n                        // If the first item has a higher number, move it down\n                        // If the first item has a lower number, move it up\n                        if (a.bookshelfRating > b.bookshelfRating) return -1;\n                        if (a.bookshelfRating < b.bookshelfRating) return 1;\n\n                        // If the count number is the same between both items, sort alphabetically\n                        // If the first item comes first in the alphabet, move it up\n                        // Otherwise move it down\n                        if (a.titleForSorting > b.titleForSorting) return 1;\n                        if (a.titleForSorting < b.titleForSorting) return -1;\n\n                   });\n\n         }\n\n         return orderedBooks;\n    }\n\n\n    setGenreFilter = ( string ) => {\n         console.log(\"setGenreFilter = \" + string);\n         this.setState({ genreFilter: string });\n    }\n\n    clearGenreFilter = () => {\n         console.log(\"resetGenreFilter\");\n         this.setState({ genreFilter: '' });\n    }\n\n\n    setAuthorFilter = ( string ) => {\n         console.log(\"setAuthorFilter = \" + string);\n         this.setState({ authorFilter: string });\n    }\n\n    clearAuthorFilter = () => {\n         console.log(\"clearAuthorFilter\");\n         this.setState({ authorFilter: '' });\n    }\n\n\n\n\n    setTagFilter = ( string ) => {\n         console.log(\"setTagFilter = \" + string);\n         this.setState({ tagFilter: string });\n    }\n\n    clearTagFilter = () => {\n         console.log(\"resetTagFilter\");\n         this.setState({ tagFilter: '' });\n    }\n\n\n\n\n    setRatingFilter = ( number ) => {\n         console.log(\"setRatingFilter = \" + number);\n         this.setState({ ratingFilter: number });\n    }\n\n    clearRatingFilter = () => {\n         console.log(\"resetRatingFilter\");\n         this.setState({ ratingFilter: 0 });\n    }\n\n\n\n    clearAllFilters = (e) => {\n         e.preventDefault();\n         const filteredBooksInOrder = this.orderBooks( this.props.booksAlreadyReadView, this.props.booksAlreadyRead );\n         this.setState({\n              tagFilter: '',\n              genreFilter: '',\n              authorFilter: '',\n              ratingFilter: 0,\n              displayedBooks: filteredBooksInOrder\n         });\n    }\n\n\n\n     showHideStats = (event) => {\n          console.log(\"showHideStats\");\n          this.setState(prevState => ({\n               showStats: !prevState.showStats\n          }));\n     };\n\n     showHideFilters = (event) => {\n          console.log(\"showHideFilters\");\n          this.setState(prevState => ({\n               showFilters: !prevState.showFilters\n          }));\n     };\n\n\n\n    componentDidMount() {\n         console.log(\"MOUNTED\");\n         const booksAlreadyRead = this.orderBooks( this.props.booksAlreadyReadView, this.props.booksAlreadyRead );\n         this.setState({\n              displayedBooks: booksAlreadyRead\n         });\n    }\n\n\n\n    render() {\n\n\n         let booksAlreadyRead = this.props.booksAlreadyRead;\n         let displayedBooks = this.state.displayedBooks;\n         // console.log(booksAlreadyRead);\n         // console.log(displayedBooks);\n\n\n         /////////// Getting all of the button resets right and current displayedBooks ///////\n         console.log('Rating filter: ' + this.state.ratingFilter);\n         console.log('Author filter: ' + this.state.authorFilter);\n         console.log('Genre filter: ' + this.state.genreFilter);\n         console.log('Tag filter: ' + this.state.tagFilter);\n\n\n              // Let's do GENRE\n              const genre = this.state.genreFilter;\n              let filteredBooks = null;\n              if( genre !== '' ) {\n                   filteredBooks = displayedBooks.filter(function(book) {\n                     return book.genre === genre;\n                   });\n\n                   // run the re-ordering function to make sure everything is in the correct order\n                   displayedBooks = this.orderBooks( this.props.booksAlreadyReadView, filteredBooks );\n\n              }\n\n\n\n              // Let's do AUTHOR\n              const author = this.state.authorFilter;\n              filteredBooks = null;\n              if( author !== '' ) {\n                   filteredBooks = displayedBooks.filter(function(book) {\n                     return book.authors.includes(author);\n                   });\n\n                   // run the re-ordering function to make sure everything is in the correct order\n                   displayedBooks = this.orderBooks( this.props.booksAlreadyReadView, filteredBooks );\n\n              }\n\n\n\n               // Let's do TAGS\n               const tag = this.state.tagFilter;\n               if( tag !== '' && tag !== undefined ) {\n               filteredBooks = displayedBooks.filter(function(book) {\n                  let myBookTags = book.tags;\n                  if( myBookTags === undefined ) { console.log(\"UNDEF\"); myBookTags = ''; }\n                  console.log(myBookTags);\n                  if( book.tags === undefined ) { book.tags = ''; }\n                  return myBookTags.includes(tag);\n               });\n\n               // run the re-ordering function to make sure everything is in the correct order\n               displayedBooks = this.orderBooks( this.props.booksAlreadyReadView, filteredBooks );\n\n               }\n\n               // And Now Rating\n               const minRating = this.state.ratingFilter;\n               if( minRating !== 0 ) {\n                    filteredBooks = displayedBooks.filter(function(book) {\n                      return book.bookshelfRating >= minRating;\n                    });\n\n               // run the re-ordering function to make sure everything is in the correct order\n               displayedBooks = this.orderBooks( this.props.booksAlreadyReadView, filteredBooks );\n\n               }\n\n\n\n\n         let clearButton = null;\n         if( this.state.genreFilter !== '' || this.state.authorFilter !== '' || this.state.tagFilter !== '' || this.state.ratingFilter !== 0 ) {\n              clearButton = (<div className=\"viewer-selector-area clear\">\n                   <button id=\"clear-all-filters\" className=\"clear-all-filters\" onClick={this.clearAllFilters}>Clear All Filters</button>\n              </div>);\n         }\n\n\n         if( booksAlreadyRead === undefined || booksAlreadyRead.length === 0 ) {\n\n                  return(\n                  <div className=\"previously-read-area single-page\">\n                    <h1>Already Read</h1>\n                         <p className=\"no-books-yet-message\">You haven't recorded any books yet. But you can <a href=\"/search\">run a search</a> and start adding books!</p>\n                    <div>{this.props.loggedInEmail}</div>\n                  </div>\n                  );\n\n             } else {\n\n         return(\n         <div className=\"previously-read-area single-page\">\n           <h1>Already Read</h1>\n           { //<AuthorList books={booksAlreadyRead} />\n           }\n\n               <div className=\"switch-area\">\n                    <div className=\"single-switch stats\">\n                    <FormControlLabel\n                       control={\n                            <Switch\n                              checked={this.state.showStats}\n                              onChange={this.showHideStats}\n                              label=\"Show Advanced Reading Stats\"\n                              inputProps={{ 'aria-label': 'show stats' }}\n                           />\n                       }\n                       label=\"Show Stats\"\n                     />\n                     </div>\n                     <div className=\"single-switch filters\">\n                     <FormControlLabel\n                        control={\n                             <Switch\n                               checked={this.state.showFilters}\n                               onChange={this.showHideFilters}\n                               label=\"Use Filters\"\n                               inputProps={{ 'aria-label': 'show filters' }}\n                            />\n                        }\n                        label=\"Use Filters\"\n                      />\n                      </div>\n               </div>\n               {this.state.showStats &&\n               <AdvancedStats\n                    books={booksAlreadyRead}\n               />\n               }\n               <div className=\"prev-views\">\n                    <div className=\"view-type orderby-area\">\n                              <div className=\"viewer-label\">Order by: </div>\n                              <div className=\"viewer-selector-area\">\n                                   <SelectAlreadyReadView\n                                        defaultView={this.props.booksAlreadyReadView}\n                                        changeAlreadyReadView={this.props.changeAlreadyReadView}\n                                   />\n                         </div>\n                    </div>\n               {this.state.showFilters &&\n               <div className=\"view-type filters-area\">\n                         <div className=\"viewer-label\">Filter by: </div>\n                         <div className=\"viewer-selector-area filter\">\n                              <SelectFilter\n                                   books={displayedBooks}\n                                   type={\"rating\"}\n                                   currentSelection={this.state.ratingFilter}\n                                   setRatingFilter={this.setRatingFilter}\n                                   clearRatingFilter={this.clearRatingFilter}\n                              />\n                         </div>\n                         <div className=\"viewer-selector-area filter\">\n                              <SelectFilter\n                                   books={displayedBooks}\n                                   type={\"author\"}\n                                   currentSelection={this.state.authorFilter}\n                                   setAuthorFilter={this.setAuthorFilter}\n                                   clearAuthorFilter={this.clearAuthorFilter}\n                              />\n                         </div>\n                         {this.props.useGenres &&\n                         <div className=\"viewer-selector-area filter\">\n                              <SelectFilter\n                                   books={displayedBooks}\n                                   type={\"genres\"}\n                                   currentSelection={this.state.genreFilter}\n                                   setGenreFilter={this.setGenreFilter}\n                                   clearGenreFilter={this.clearGenreFilter}\n                              />\n                         </div>\n                         }\n                         {this.props.useTags &&\n                         <div className=\"viewer-selector-area filter\">\n                              <SelectFilter\n                                   books={displayedBooks}\n                                   type={\"tags\"}\n                                   currentSelection={this.state.tagFilter}\n                                   setTagFilter={this.setTagFilter}\n                                   clearTagFilter={this.clearTagFilter}\n                              />\n                         </div>\n                         }\n                         {clearButton}\n               </div>\n          }\n          </div>\n                <div className={\"results-grid \" + this.props.bookSize}>\n                {displayedBooks.map((book, index) => (\n                     <BookCard\n                              key={book.id}\n                              book={book}\n                              editBook={this.props.editBook}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              alreadyRead={true}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              useGenres={this.props.useGenres}\n                              useTags={this.props.useTags}\n                              setBookRating={this.props.setBookRating}\n                              resetRatingToZero={this.props.resetRatingToZero}\n                              resetTimestampToZero={this.props.resetTimestampToZero}\n                              setBookGenre={this.props.setBookGenre}\n                              genres={this.props.genres}\n                              resetGenreToZero={this.props.resetGenreToZero}\n                              addNewGenre={this.props.addNewGenre}\n                              addNewTag={this.props.addNewTag}\n                              setBookTags={this.props.setBookTags}\n                              tags={this.props.tags}\n                              resetAllTags={this.props.resetAllTags}\n                              setBookTimestamp={this.props.setBookTimestamp}\n                              updateCoverImg={this.props.updateCoverImg}\n                         />\n              ))}\n              </div>\n         </div>\n         );\n\n         }\n\n    }\n\n}\n\n\nexport default PreviouslyRead;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { firebaseApp } from '../base';\n\nclass Register extends React.Component {\n     constructor(props) {\n          super(props);\n          this.state = {\n            email: '',\n            password: '',\n            error: null,\n          };\n\n          console.log(this.props);\n     }\n\n\nhandleInputChange = (event) => {\n   this.setState({ [event.target.name]: event.target.value });\n   console.log(event.target.value);\n };\n\nhandleSubmit = (event) => {\n   event.preventDefault();\n   console.log('Registration submitted');\n   const { email, password } = this.state;\n   console.log(this.state);\nfirebaseApp\n     .auth()\n     .createUserWithEmailAndPassword(email, password)\n     .then((user) => {\n          //console.log(user);\n          //this.props.history.push('/');\n\n          // add new user to App-->state and Firebase\n          this.props.registerNewUser(user);\n     })\n     .catch((error) => {\n       this.setState({ error: error });\n     });\n };\n\n     render() {\n\n          //const classes = useStyles();\n          const { email, password, error } = this.state;\n          //console.log(this.props.registerNewUser);\n\n          return (\n               <div className=\"login-form-area\">\n               <p>Enter your information below to register for your free Bookshelf:</p>\n               {error ? (\n                     <div>{error.message}</div>\n               ) : null}\n\n               <form id=\"registration-form\" onSubmit={this.handleSubmit}>\n                    <div className=\"registration-area\">\n                         <input\n                             type=\"text\"\n                             id=\"login-form-email\"\n                             name=\"email\"\n                             label=\"Email\"\n                             required\n                             value={this.email}\n                             onChange={this.handleInputChange}\n                             />\n                        </div>\n                        <div className=\"registration-area\">\n                             <input\n                                 type=\"text\"\n                                 id=\"login-form-password\"\n                                 name=\"password\"\n                                 label=\"Password\"\n                                 required\n                                 placeholder=\"Password\"\n                                 value={this.password}\n                                onChange={this.handleInputChange}\n                                 />\n                       </div>\n                       <button type=\"submit\">Register Now</button>\n                       </form>\n             </div>\n          );\n\n     }\n\n}\n\nexport default Register;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Landing from './Landing.js';\nimport Search from './Search.js';\nimport Recommended from './Recommended.js';\nimport Settings from './Settings.js';\nimport NotFound from './NotFound.js';\nimport SavedForLater from './SavedForLater.js';\nimport PreviouslyRead from './PreviouslyRead.js';\nimport Results from './Results.js';\nimport Register from './Register.js';\n\nclass Router extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n       };\n\n     }\n\n     render() {\n\n          console.log(this.props);\n          console.log(this.props.books);\n\n          return(\n\n               <div className={\"clb-grail-body color-\" + this.props.settingsColor + \" font-\" + this.props.settingsFont}>\n     <HashRouter basename=\"/\">\n          <Switch>\n               <Route exact path=\"/\"\n                    component={() =>\n                         <Landing\n                              booksToRead={this.props.booksToRead}\n                              booksAlreadyRead={this.props.booksAlreadyRead}\n                              editBook={this.props.editBook}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              notification={this.props.notification}\n                              notificationTimestamp={this.props.notificationTimestamp}\n                              updateCoverImg={this.props.updateCoverImg}\n                              useGenres={this.props.useGenres}\n                              useTags={this.props.useTags}\n                              setBookRating={this.props.setBookRating}\n                              resetRatingToZero={this.props.resetRatingToZero}\n                              resetTimestampToZero={this.props.resetTimestampToZero}\n                              setBookTimestamp={this.props.setBookTimestamp}\n                              genres={this.props.genres}\n                              tags={this.props.tags}\n                              defaultDate={this.props.defaultDate}\n                              newImprovedEditBook={this.props.newImprovedEditBook}\n                         />}\n               />\n               <Route exact path=\"/search\" component={Search} />\n               <Route exact path=\"/results\"\n                                        render={(props) => <Results {...props}\n                                             addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                             addBookToRead={this.props.addBookToRead}\n                                             settingsFont={this.props.settingsFont}\n                                             settingsColor={this.props.settingsColor}\n                                             notification={this.props.notification}\n                                             notificationTimestamp={this.props.notificationTimestamp}\n                                             updateCoverImg={this.props.updateCoverImg}\n                                             useGenres={this.props.useGenres}\n                                             useTags={this.props.useTags}\n                                             genres={this.props.genres}\n                                             tags={this.props.tags}\n                                             addNewTag={this.props.addNewTag}\n                                             setBookTags={this.props.setBookTags}\n                                             newImprovedEditBook={this.props.newImprovedEditBook}\n                                             defaultDate={this.props.defaultDate}\n                                             addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                                        />}\n               />\n\n               <Route exact path=\"/recommended\"\n                                        render={(props) => <Recommended {...props}\n                                             books={this.props.books}\n                                             addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                             addBookToRead={this.props.addBookToRead}\n                                             settingsFont={this.props.settingsFont}\n                                             settingsColor={this.props.settingsColor}\n                                             notification={this.props.notification}\n                                             notificationTimestamp={this.props.notificationTimestamp}\n                                             removedFromSuggestions={this.props.removedFromSuggestions}\n                                             removeBookFromSuggestions={this.props.removeBookFromSuggestions}\n                                        />}\n               />\n\n               <Route exact path=\"/saved\"\n                    component={() =>\n                         <SavedForLater\n                              booksToRead={this.props.booksToRead}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              editBook={this.props.editBookToRead}\n                              booksToReadView={this.props.booksToReadView}\n                              changeToReadView={this.props.changeToReadView}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              notification={this.props.notification}\n                              updateCoverImg={this.props.updateCoverImg}\n                              bookSize={this.props.bookSize}\n                              useGenres={this.props.useGenres}\n                              genres={this.props.genres}\n                              resetGenreToZero={this.props.resetGenreToZero}\n                              addNewGenre={this.props.addNewGenre}\n                              useTags={this.props.useTags}\n                              addNewTag={this.props.addNewTag}\n                              setBookTags={this.props.setBookTags}\n                              tags={this.props.tags}\n                              resetAllTags={this.props.resetAllTags}\n                              defaultDate={this.props.defaultDate}\n                              newImprovedEditBook={this.props.newImprovedEditBook}\n                         />}\n               />\n\n               <Route exact path=\"/read\"\n                    component={() =>\n                         <PreviouslyRead\n                              booksAlreadyRead={this.props.booksAlreadyRead}\n                              booksAlreadyReadView={this.props.booksAlreadyReadView}\n                              changeAlreadyReadView={this.props.changeAlreadyReadView}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              editBook={this.props.editBook}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              updateCoverImg={this.props.updateCoverImg}\n                              bookSize={this.props.bookSize}\n                              useGenres={this.props.useGenres}\n                              useTags={this.props.useTags}\n                              setBookRating={this.props.setBookRating}\n                              resetRatingToZero={this.props.resetRatingToZero}\n                              resetTimestampToZero={this.props.resetTimestampToZero}\n                              setBookGenre={this.props.setBookGenre}\n                              genres={this.props.genres}\n                              resetGenreToZero={this.props.resetGenreToZero}\n                              addNewGenre={this.props.addNewGenre}\n                              addNewTag={this.props.addNewTag}\n                              setBookTags={this.props.setBookTags}\n                              tags={this.props.tags}\n                              resetAllTags={this.props.resetAllTags}\n                              setBookTimestamp={this.props.setBookTimestamp}\n                         />}\n               />\n               <Route exact path=\"/settings\"\n                    component={() =>\n                         <Settings\n                              logOutUser={this.props.logOutUser}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              resetPassword={this.props.resetPassword}\n                              permanentlyDeleteUserAndInfo={this.props.permanentlyDeleteUserAndInfo}\n                              settingsColor={this.props.settingsColor}\n                              changeSettingsColor={this.props.changeSettingsColor}\n                              settingsFont={this.props.settingsFont}\n                              changeSettingsFont={this.props.changeSettingsFont}\n                              changeSettingsBookSize={this.props.changeSettingsBookSize}\n                              bookSize={this.props.bookSize}\n                              changeSettingsUseGenres={this.props.changeSettingsUseGenres}\n                              changeSettingsUseTags={this.props.changeSettingsUseTags}\n                              useGenres={this.props.useGenres}\n                              useTags={this.props.useTags}\n                              defaultDate={this.props.defaultDate}\n                              changeDefaultDate={this.props.changeDefaultDate}\n                         />}\n               />\n               <Route exact path=\"/register\"\n                    component={() =>\n                         <Register\n                              logOutUser={this.props.logOutUser}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                         />}\n               />\n               <Route component={NotFound} />\n          </Switch>\n     </HashRouter>\n          </div>);\n\n     }\n\n}\n\nexport default Router;\n","import React from 'react';\nimport Router from './Router.js';\nimport Header from './Header.js';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\n\n\nvar shortid = require('shortid');\nconst image2base64 = require('image-to-base64');\n\nclass BookManager extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             books: [],\n             settings: {\n                         color: 'default',\n                         font: 'default',\n                         sortViewToRead: 'alphabetical',\n                         sortViewAlreadyRead: 'alphabetical',\n                         bookSize: 'default',\n                         genres: [\n                              'Fiction',\n                              'Nonfiction',\n                              'Memoir',\n                              'Children',\n                              'Cooking',\n                              'Historical Fiction',\n                              'Mystery',\n                              'Science Fiction',\n                              'Young Adult',\n                         ],\n                         tags: [],\n                         useGenres: false,\n                         useTags: false,\n                         defaultDate: 'Today',\n                         customFields: [],\n                         removedFromSuggestions: [],\n                    },\n             notification: null,\n             notificationTimestamp: null,\n    }\n\n}\n\n\n    componentDidMount(){\n\n       console.log(\"componentDidMount\");\n       const loggedInID = this.props.loggedInID;\n       console.log(\"loggedInID:\" + loggedInID);\n\n\n       // Firebase Connections\n\n       base.syncState(`${loggedInID}/books`, {\n         context: this,\n         state: 'books',\n         asArray: true\n       });\n\n       base.syncState(`${loggedInID}/settings`, {\n         context: this,\n         state: 'settings',\n         asArray: false\n       });\n\n\n       // Updating theme data & saving to localStorage\n       // Color\n       const localStorageKeyColor = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n       const settingsColorLocal = localStorage.getItem(localStorageKeyColor);\n\n            base.fetch(`${loggedInID}/settings/color`, {\n              context: this,\n              asArray: false,\n              then(data){\n                if( settingsColorLocal !== data ) {\n                     console.log(\"Setting updated color into localStorage: \" + data);\n                     localStorage.setItem(localStorageKeyColor, data);\n                }\n              }\n            });\n\n\n       // Updating theme data & saving to localStorage\n       // Font\n       const localStorageKeyFont = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n       const settingsFontLocal = localStorage.getItem(localStorageKeyFont);\n\n            base.fetch(`${loggedInID}/settings/font`, {\n              context: this,\n              asArray: false,\n              then(data){\n                   if( settingsFontLocal !== data ) {\n                       console.log(\"Setting updated font into localStorage: \" + data);\n                       localStorage.setItem(localStorageKeyFont, data);\n                  }\n              }\n            });\n\n  }\n\n\n     // Functions to maniuplate state / books\n     addBookAlreadyRead = (bookObj) => {\n\n         // set my fields for books in DB\n         const newBook = {};\n\n         this.fetchCoverImage(bookObj);\n\n         let subtitle = bookObj.volumeInfo.subtitle;\n         if( subtitle === undefined ) { subtitle = null; }\n\n         let description = bookObj.volumeInfo.description;\n         if( description === undefined ) { description = null; }\n\n         let publisher = bookObj.volumeInfo.publisher;\n         if( publisher === undefined ) { publisher = null; }\n\n         let pageCount = bookObj.volumeInfo.pageCount;\n         if( pageCount === undefined ) { pageCount = null; }\n\n         newBook.id = bookObj.id;\n         newBook.title = bookObj.volumeInfo.title;\n         newBook.titleForSorting = this.createAlphabeticalSortingTitle(bookObj.volumeInfo.title);\n         newBook.subtitle = subtitle;\n         newBook.authors = bookObj.volumeInfo.authors;\n         newBook.bookshelfTimestamp = Date.now();\n         newBook.bookshelfRating = 0;\n         newBook.notes = [];\n         newBook.coverImg = null;\n         newBook.alreadyRead = true;\n         newBook.googleLink = bookObj.selfLink;\n         newBook.description = description;\n         newBook.publisher = publisher;\n         newBook.publishedDate = bookObj.volumeInfo.publishedDate\n         newBook.pageCount = pageCount;\n         newBook.genre = null;\n         newBook.tags = [];\n\n         console.log(newBook);\n\n         let bookTitle = bookObj.volumeInfo.title;\n         this.setState(prevState => ({\n            books: [...prevState.books, newBook],\n            notification: 'You added ' + bookTitle + ' to your ALREADY READ shelf',\n            notificationTimestamp: Date.now(),\n           }));\n\n           this.startNotificationTimer();\n\n       }\n\n       // New on March 18, fixes many previous cover image issues\n       fetchCoverImage = (bookObj) => {\n            console.log(\"FETCH COVER IMAGE\");\n            console.log(bookObj);\n            let selfLink = bookObj.selfLink;\n            if( selfLink === undefined ) {\n                 selfLink = bookObj.googleLink;\n            }\n            console.log(selfLink);\n            let coverImageURL = null;\n            if( bookObj.volumeInfo !== undefined ) {\n                 if( bookObj.volumeInfo.imageLinks !== undefined ) {\n                      coverImageURL = bookObj.volumeInfo.imageLinks.smallThumbnail;\n                    }\n               }\n\n            // Get the details straight from Google, including larger image sizes\n                 fetch(selfLink)\n                 .then(res => res.json())\n                 .then((originalBookJSON) => {\n\n                   console.log('fetchCoverImage CONNECTED');\n                   console.log(originalBookJSON);\n\n                   if( originalBookJSON.volumeInfo.imageLinks !== undefined ) {\n                        console.log(originalBookJSON.volumeInfo.imageLinks);\n                        if( originalBookJSON.volumeInfo.imageLinks.thumbnail !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.thumbnail + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                        if( originalBookJSON.volumeInfo.imageLinks.small !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.small + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                        if( originalBookJSON.volumeInfo.imageLinks.medium !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.medium + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                        if( originalBookJSON.volumeInfo.imageLinks.large !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.large + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                        if( originalBookJSON.volumeInfo.imageLinks.extraLarge !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.extraLarge + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                   }\n\n                   console.log(selfLink);\n                   console.log(\"FINAL IMAGE: \" + coverImageURL);\n\n                   // update the book object with the new thumbnail cover image\n                 const bookID = bookObj.id;\n                 const clbCopyBookState = [...this.state.books];\n                 const getBookObjInState = clbCopyBookState.filter(obj => {\n                   return obj.id === bookID\n                 });\n\n                 const bookToUpdate = getBookObjInState[0];\n                 console.log(bookToUpdate);\n                 bookToUpdate.coverImg = coverImageURL;\n                 console.log(bookToUpdate);\n\n                 // REMOVE BOOK\n                 let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n                 clbCopyBookState.splice(index, 1);\n                 this.setState({ books: clbCopyBookState });\n\n                 // ADD Book with URL\n                 this.setState(prevState => ({\n                    books: [...prevState.books, bookToUpdate],\n                   }));\n\n         });\n\n\n\n       }\n\n\n       addBookToRead = (bookObj) => {\n            // set my fields for books in DB\n          const newBook = {};\n\n          this.fetchCoverImage(bookObj);\n          console.log(\"addBookToRead\");\n\n          let subtitle = bookObj.volumeInfo.subtitle;\n          if( subtitle === undefined ) { subtitle = null; }\n\n          let description = bookObj.volumeInfo.description;\n          if( description === undefined ) { description = null; }\n\n          let publisher = bookObj.volumeInfo.publisher;\n          if( publisher === undefined ) { publisher = null; }\n\n          let pageCount = bookObj.volumeInfo.pageCount;\n         if( pageCount === undefined ) { pageCount = null; }\n\n          newBook.id = bookObj.id;\n          newBook.title = bookObj.volumeInfo.title;\n          newBook.titleForSorting = this.createAlphabeticalSortingTitle(bookObj.volumeInfo.title);\n          newBook.subtitle = subtitle;\n          newBook.authors = bookObj.volumeInfo.authors;\n          newBook.bookshelfTimestamp = Date.now();\n          newBook.bookshelfRating = 0;\n          newBook.notes = [];\n          newBook.coverImg = null;\n          newBook.alreadyRead = false;\n          newBook.googleLink = bookObj.selfLink;\n          newBook.description = description;\n          newBook.publisher = publisher;\n          newBook.publishedDate = bookObj.volumeInfo.publishedDate\n          newBook.pageCount = pageCount;\n          newBook.genre = null;\n\n          console.log(newBook);\n          this.setState(prevState => ({\n             books: [...prevState.books, newBook],\n             notification: 'You added ' + newBook.title + ' to your TO READ shelf',\n             notificationTimestamp: Date.now(),\n            }));\n\n            this.startNotificationTimer();\n\n        }\n\n\n        moveBooktoAlreadyRead = (bookObj) => {\n\n           console.log(bookObj);\n\n           // get the book object\n           const bookID = bookObj.id;\n           const bookTitle = bookObj.title;\n           const clbCopyBookState = [...this.state.books];\n           const getBookObjInState = clbCopyBookState.filter(obj => {\n            return obj.id === bookID\n           });\n           console.log(getBookObjInState);\n\n           const index = clbCopyBookState.findIndex(obj => {\n            return obj.id === bookID\n           });\n           console.log(index);\n\n           clbCopyBookState[index].alreadyRead = true;\n           clbCopyBookState[index].bookshelfTimestamp = Date.now();\n           this.setState({ books: this.state.books });\n\n         }\n\n\n       removeBookFromAlreadyRead = (bookObj) => {\n          console.log(\"Removed: \" + JSON.stringify(bookObj));\n          let bookID = bookObj.id;\n          let clbCopyBookState = [...this.state.books];\n          let getBookObjInState = clbCopyBookState.filter(obj => {\n           return obj.id === bookID\n          });\n\n          let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n          clbCopyBookState.splice(index, 1);\n\n          this.setState({ books: clbCopyBookState });\n\n        }\n\n\n        removeBookFromToRead = (bookObj) => {\n           console.log(\"Removed: \" + JSON.stringify(bookObj));\n           let bookID = bookObj.id;\n           let clbCopyBookState = [...this.state.books];\n           let getBookObjInState = clbCopyBookState.filter(obj => {\n            return obj.id === bookID\n           });\n\n           let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n           clbCopyBookState.splice(index, 1);\n\n           this.setState({ books: clbCopyBookState });\n\n         }\n\n\n         editBook = (bookObj) => {\n            console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               let bookID = bookObj.id;\n               let clbCopyBookState = [...this.state.books];\n               let getBookObjInState = clbCopyBookState.filter(obj => {\n                 return obj.id === bookID\n               });\n               let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               let ids = [...this.state.books];     // create the copy of state array\n               ids[index] = bookObj;                  //new value\n               console.log(ids[index]);\n\n               this.setState({ books: ids });            //update the value\n\n          }\n\n\n\n          newImprovedEditBook = (bookObj, view) => {\n\n               console.log(\"newImprovedEditBook 12pm\");\n               console.log(view);\n\n               if( view === 'savedForLater' ) {\n\n                      console.log(\"newImprovedEditBook via TO READ\");\n                      bookObj.alreadyRead = true;\n                      console.log(\"NEW & IMPROVED --> Editing this book: \" + JSON.stringify(bookObj));\n\n                      let bookID = bookObj.id;\n                      let clbCopyBookState = [...this.state.books];\n                      let getBookObjInState = clbCopyBookState.filter(obj => {\n                        return obj.id === bookID\n                      });\n                      let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n                      let ids = [...this.state.books];     // create the copy of state array\n                      ids[index] = bookObj;                  //new value\n                      console.log(ids[index]);\n\n                      this.setState({ books: ids });            //update the value\n\n            } else if ( view === 'searchResults' ) {\n                 console.log(bookObj);\n                 console.log(\"newImprovedEditBook via searchResults\");\n\n                 // translate Google Data into my own schema\n                 const newBook = {};\n                 newBook.alreadyRead = true;\n                 newBook.authors = bookObj.volumeInfo.authors;\n                 newBook.bookshelfRating = bookObj.bookshelfRating;\n                 newBook.bookshelfTimestamp = bookObj.bookshelfTimestamp;\n                 newBook.coverImg = bookObj.volumeInfo.imageLinks.smallThumbnail;\n                 newBook.description = bookObj.volumeInfo.description;\n                 newBook.genre = bookObj.genre;\n                 newBook.googleLink = bookObj.selfLink;\n                 newBook.id = bookObj.id;\n                 newBook.pageCount = bookObj.volumeInfo.pageCount;\n                 newBook.publishedDate = bookObj.volumeInfo.publishedDate;\n                 newBook.publisher = bookObj.volumeInfo.publisher;\n                 newBook.tags = bookObj.tags;\n                 newBook.title = bookObj.volumeInfo.title;\n                 newBook.titleForSorting = this.createAlphabeticalSortingTitle(bookObj.volumeInfo.title);\n\n                 console.log(newBook);\n                 let bookID = newBook.id;\n                 let clbCopyBookState = [...this.state.books];\n                 let getBookObjInState = clbCopyBookState.filter(obj => {\n                  return obj.id === bookID\n                 });\n                 let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n                 let ids = [...this.state.books];     // create the copy of state array\n                 ids[index] = newBook;                  //new value\n                 console.log(ids[index]);\n                             //update the value\n                 this.setState(prevState => ({\n                    books: ids,\n                    notification: 'You added ' + newBook.title + ' to your ALREADY READ shelf',\n                    notificationTimestamp: Date.now(),\n                   }));\n\n                   this.startNotificationTimer();\n                   this.fetchCoverImage(newBook);\n\n            }\n\n          }\n\n\n\n          updateCoverImg = ( bookCoverURL, bookObj ) => {\n               console.log(bookObj);\n               console.log(bookCoverURL);\n\n              //get the book object\n              const bookID = bookObj.id;\n              const bookTitle = bookObj.title;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n              console.log(\"getBookObjInState\");\n              console.log(getBookObjInState);\n\n              getBookObjInState.coverImg = bookCoverURL;\n\n              const index = clbCopyBookState.findIndex(obj => {\n              return obj.id === bookID\n             });\n             console.log(index);\n\n             clbCopyBookState[index].coverImg = bookCoverURL;\n             this.setState({ books: this.state.books });\n\n          }\n\n\n\n          editBookToRead = (bookObj) => {\n            console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               let bookID = bookObj.id;\n               let clbCopyBookState = [...this.state.booksToRead];\n               let getBookObjInState = clbCopyBookState.filter(obj => {\n                 return obj.id === bookID\n               });\n               let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               let ids = [...this.state.booksToRead];     // create the copy of state array\n               ids[index] = bookObj;                  //new value\n               console.log(ids[index]);\n               this.setState({ booksToRead: ids });            //update the value\n\n          }\n\n\n\n          addNewImagesAlreadyRead = (bookObj) => {\n               console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n                  let bookID = bookObj.id;\n                  let clbCopyBookState = [...this.state.books];\n                  let getBookObjInState = clbCopyBookState.filter(obj => {\n                    return obj.id === bookID\n                  });\n                  let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n                  let ids = [...this.state.books];     // create the copy of state array\n                  if( bookObj.volumeInfo.imageLinks.large ) { ids[index].volumeInfo.imageLinks.large = bookObj.volumeInfo.imageLinks.large; } else { ids[index].volumeInfo.imageLinks.large = '' }                 //new value, image only\n                  if( bookObj.volumeInfo.imageLinks.medium ) { ids[index].volumeInfo.imageLinks.medium = bookObj.volumeInfo.imageLinks.medium; } else { ids[index].volumeInfo.imageLinks.medium = '' }\n                  if( bookObj.volumeInfo.imageLinks.small ) { ids[index].volumeInfo.imageLinks.small = bookObj.volumeInfo.imageLinks.small; } else { ids[index].volumeInfo.imageLinks.small = '' }\n                  if( bookObj.volumeInfo.imageLinks.smallThumbnail ) { ids[index].volumeInfo.imageLinks.smallThumbnail = bookObj.volumeInfo.imageLinks.smallThumbnail; } else { ids[index].volumeInfo.imageLinks.smallThumbnail = '' }\n                  if( bookObj.volumeInfo.imageLinks.thumbnail ) { ids[index].volumeInfo.imageLinks.thumbnail = bookObj.volumeInfo.imageLinks.thumbnail; } else { ids[index].volumeInfo.imageLinks.thumbnail = '' }\n                  console.log(ids[index]);\n                  this.setState({ booksAlreadyRead: ids });            //update the value\n          }\n\n\n          addNewImagesToRead = (bookObj) => {\n               // console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               //    let bookID = bookObj.id;\n               //    let clbCopyBookState = [...this.state.booksToRead];\n               //    let getBookObjInState = clbCopyBookState.filter(obj => {\n               //      return obj.id === bookID\n               //    });\n               //    let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               //    let ids = [...this.state.booksToRead];     // create the copy of state array\n               //    if( bookObj.volumeInfo.imageLinks.large ) { ids[index].volumeInfo.imageLinks.large = bookObj.volumeInfo.imageLinks.large; } else { ids[index].volumeInfo.imageLinks.large = ''; }               //new value, image only\n               //    if( bookObj.volumeInfo.imageLinks.medium ) { ids[index].volumeInfo.imageLinks.medium = bookObj.volumeInfo.imageLinks.medium; } else { ids[index].volumeInfo.imageLinks.medium = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.small ) { ids[index].volumeInfo.imageLinks.small = bookObj.volumeInfo.imageLinks.small; } else { ids[index].volumeInfo.imageLinks.small = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.smallThumbnail) { ids[index].volumeInfo.imageLinks.smallThumbnail = bookObj.volumeInfo.imageLinks.smallThumbnail; } else { ids[index].volumeInfo.imageLinks.smallThumbnail = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.thumbnail) { ids[index].volumeInfo.imageLinks.thumbnail = bookObj.volumeInfo.imageLinks.thumbnail; } else { ids[index].volumeInfo.imageLinks.thumbnail = ''; }\n               //    console.log(ids[index]);\n               //    this.setState({ booksToRead: ids });            //update the value\n          }\n\n\n          setBookRating = (selectedOption, bookObj) => {\n               console.log(\"Update BOOK RATING in DB\");\n               console.log(selectedOption);\n               console.log(bookObj);\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].bookshelfRating = selectedOption.value;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n\n          setBookGenre = (selectedOption, bookObj) => {\n               console.log(\"Update BOOK GENRE in DB\");\n               console.log(selectedOption);\n               console.log(bookObj);\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].genre = selectedOption.value;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          setBookTimestamp = (newDateTimestamp, bookObj) => {\n               console.log(\"Update BOOK Timestamp in DB\");\n               console.log(newDateTimestamp);\n               console.log(bookObj);\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].bookshelfTimestamp = newDateTimestamp;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n\n          addNewTag = (allTagsArray) => {\n\n               console.log(allTagsArray);\n               let prevTags = this.state.settings.tags;\n                    if( prevTags === undefined ) { prevTags = []; }\n               console.log(prevTags);\n               console.log(prevTags.filter(Boolean));\n\n               let difference = allTagsArray.filter(x => !prevTags.includes(x));\n               console.log(\"DIFFERENCE\");\n               console.log(difference);\n\n               const updatedTags = prevTags.concat(difference);\n               this.setState({ settings: {\n                                        tags: updatedTags\n                                   }\n                          });\n\n          }\n\n\n\n          setBookTags = (selectedOption, bookObj) => {\n               console.log(\"Update TAGS in DB\");\n               console.log(selectedOption);\n               console.log(bookObj);\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].tags = selectedOption;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          resetRatingToZero = (bookObj) => {\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].bookshelfRating = 0;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          resetTimestampToZero = (bookObj) => {\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].bookshelfTimestamp = 0;\n              this.setState({ books: this.state.books });\n\n          }\n\n          resetGenreToZero = (bookObj) => {\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].genre = '';\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          resetAllTags = (bookObj) => {\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].tags = [];\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          addNewGenre = (newGenre) => {\n\n               console.log(newGenre);\n              let previousGenres = [...this.state.settings.genres];\n              console.log(previousGenres);\n              let included = previousGenres.includes(newGenre);\n              console.log(included);\n              if( included === false ) {\n\n                   // Sort all beer types, then update state\n                   let updatedGenres = [...previousGenres, newGenre];\n                   let orderedGenres = [...updatedGenres].sort();\n\n                   // remove any nulls, false, or undefined\n                   orderedGenres = orderedGenres.filter(Boolean);\n                   console.log(orderedGenres);\n\n                   this.setState({ settings: {\n                                            genres: orderedGenres\n                                       }\n                              });\n              }\n\n          }\n\n\n          changeAlreadyReadView = (selectedOption) => {\n              console.log('CHANGE sortViewAlreadyRead');\n              console.log(selectedOption);\n\n              let sortViewAlreadyRead = 'alphabetical';\n              if(selectedOption) {\n                  if( selectedOption.value === 'rating' ) { sortViewAlreadyRead = 'rating'; }\n                  if( selectedOption.value === 'date' ) { sortViewAlreadyRead = 'date'; }\n              }\n\n              this.setState({ settings: {\n                         sortViewAlreadyRead: sortViewAlreadyRead\n                    }\n              });\n\n         }\n\n\n\n         changeToReadView = (selectedOption) => {\n\n            let newBookCardView = 'alphabetical';\n            if(selectedOption) {\n                 if( selectedOption.value === 'date' ) { newBookCardView = 'date'; }\n            }\n\n            //this.setState({ booksToReadView: newBookCardView });\n            this.setState({ settings: {\n                       sortViewToRead: newBookCardView\n                  }\n            });\n\n        }\n\n\n\n        changeSettingsBookSize = (selectedOption) => {\n\n             console.log('changeSettingsBookSize');\n\n           let newBookSize = 'default';\n           if(selectedOption) {\n                newBookSize = selectedOption.value;\n           }\n\n           this.setState({ settings: {\n                     bookSize: newBookSize\n                 }\n           });\n\n       }\n\n\n\n\n       changeSettingsUseGenres = (selectedOption) => {\n\n            console.log('changeSettingsUseGenres');\n\n          let newGenreSetting = false;\n          if(selectedOption) {\n               newGenreSetting = selectedOption.value;\n          }\n\n          this.setState({ settings: {\n                    useGenres: newGenreSetting\n               }\n          });\n\n     }\n\n\n     changeSettingsUseTags = (selectedOption) => {\n\n          console.log('changeSettingsUseTags');\n\n        let newTagsSetting = false;\n        if(selectedOption) {\n             newTagsSetting = selectedOption.value;\n        }\n\n        this.setState({ settings: {\n                  useTags: newTagsSetting\n             }\n        });\n\n   }\n\n\n\n        changeSettingsColor = (selectedOption) => {\n\n           let newSettingsColor = 'default';\n           if(selectedOption) {\n                newSettingsColor = selectedOption.value;\n           }\n\n           this.setState({ settings: {\n                      color: newSettingsColor\n                 }\n           });\n\n           const localStorageKey = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n           localStorage.setItem(localStorageKey, newSettingsColor);\n\n       }\n\n\n       changeSettingsFont = (selectedOption) => {\n\n          let newSettingsFont = 'default';\n          if(selectedOption) {\n               newSettingsFont = selectedOption.value;\n          }\n\n          this.setState({ settings: {\n                     font: newSettingsFont\n               }\n          });\n\n          const localStorageKey = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n          localStorage.setItem(localStorageKey, newSettingsFont);\n\n     }\n\n\n     changeDefaultDate = (selectedOption) => {\n\n          console.log(\"changeDefaultDate: \" + selectedOption.value);\n\n        let newDefaultDate = 'Today';\n        if(selectedOption) {\n             newDefaultDate = selectedOption.value;\n        }\n\n        this.setState({ settings: {\n                   defaultDate: newDefaultDate\n             }\n        });\n\n   }\n\n\n     resetNotification = () => {\n          this.setState({ notification: null, notificationTimestamp: null, });\n     }\n\n     startNotificationTimer = () => {\n       if(!this.timerId){\n         this.timerId = setTimeout(()=>{\n           this.resetNotification();\n           console.log(\"startNotificationTimer - tick\");\n           console.log(this.timerId);\n      }, 6000);\n       }\n     }\n\n\n\n     // Title work, move \"The\" \"A\" \"An\" to the back for alphabetizing\n     createAlphabeticalSortingTitle = ( title ) => {\n          let updatedTitle = title;\n          console.log(\"createAlphabeticalSortingTitle\");\n\n               if( title.startsWith('The ') ) {\n                    updatedTitle = title.substr(4) + ', The';\n               } else if( title.startsWith('A ') ) {\n                    updatedTitle = title.substr(2) + ', A';\n               } else if( title.startsWith('An ') ) {\n                    updatedTitle = title.substr(3) + ', An';\n               }\n\n          console.log(updatedTitle);\n          return updatedTitle;\n     }\n\n\n\n\n     removeBookFromSuggestions = ( book ) => {\n          console.log(\"removeBookFromSuggestions: \" + book.id);\n          let previousRemoved = [];\n          if( this.state.settings.removedFromSuggestions !== undefined ) {\n               previousRemoved = [...this.state.settings.removedFromSuggestions];\n         }\n          let updatedRemoved = [...previousRemoved, book.id];\n          this.setState({ settings: {\n                     removedFromSuggestions: updatedRemoved\n               }\n          });\n     }\n\n\n\n  render() {\n\n       const books = this.state.books;\n\n       const localStorageKeyColor = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n       const settingsColorLocal = localStorage.getItem(localStorageKeyColor);\n       const settingsColor = settingsColorLocal;\n\n       const localStorageKeyFont = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n       const settingsFontLocal = localStorage.getItem(localStorageKeyFont);\n       const settingsFont = settingsFontLocal;\n\n\n       // run filter operations to separate To Read from Already Read\n       const updatedBooksToRead = books.filter(book => book.alreadyRead === false);\n       const updatedBooksAlreadyRead = books.filter(book => book.alreadyRead === true);\n       // console.log(updatedBooksToRead);\n       // console.log(updatedBooksAlreadyRead);\n\n       return(\n            <>\n            <Header\n               settingsColor={settingsColor}\n               settingsFont={settingsFont}\n            />\n            <Router\n                 books={this.state.books}\n                 logOutUser={this.props.logOutUser}\n                 loggedInID={this.props.loggedInID}\n                 loggedInEmail={this.props.loggedInEmail}\n                 permanentlyDeleteUserAndInfo={this.props.permanentlyDeleteUserAndInfo}\n                 booksAlreadyRead={updatedBooksAlreadyRead}\n                 booksAlreadyReadView={this.state.settings.sortViewAlreadyRead}\n                 booksToReadView={this.state.settings.sortViewToRead}\n                 changeAlreadyReadView={this.changeAlreadyReadView}\n                 changeToReadView={this.changeToReadView}\n                 settingsColor={settingsColor}\n                 changeSettingsColor={this.changeSettingsColor}\n                 settingsFont={settingsFont}\n                 changeSettingsFont={this.changeSettingsFont}\n                 booksToRead={updatedBooksToRead}\n                 editBook={this.editBook}\n                 editBookToRead={this.editBookToRead}\n                 addBookAlreadyRead={this.addBookAlreadyRead}\n                 addBookToRead={this.addBookToRead}\n                 moveBooktoAlreadyRead={this.moveBooktoAlreadyRead}\n                 removeBookFromAlreadyRead={this.removeBookFromAlreadyRead}\n                 removeBookFromToRead={this.removeBookFromToRead}\n                 addNewImagesAlreadyRead={this.addNewImagesAlreadyRead}\n                 addNewImagesToRead={this.addNewImagesToRead}\n                 notification={this.state.notification}\n                 notificationTimestamp={this.state.notificationTimestamp}\n                 updateCoverImg={this.updateCoverImg}\n                 changeSettingsBookSize={this.changeSettingsBookSize}\n                 bookSize={this.state.settings.bookSize}\n                 changeSettingsUseGenres={this.changeSettingsUseGenres}\n                 changeSettingsUseTags={this.changeSettingsUseTags}\n                 useGenres={this.state.settings.useGenres}\n                 useTags={this.state.settings.useTags}\n                 setBookRating={this.setBookRating}\n                 resetRatingToZero={this.resetRatingToZero}\n                 resetTimestampToZero={this.resetTimestampToZero}\n                 resetAllTags={this.resetAllTags}\n                 setBookGenre={this.setBookGenre}\n                 genres={this.state.settings.genres}\n                 tags={this.state.settings.tags}\n                 resetGenreToZero={this.resetGenreToZero}\n                 addNewGenre={this.addNewGenre}\n                 addNewTag={this.addNewTag}\n                 setBookTags={this.setBookTags}\n                 setBookTimestamp={this.setBookTimestamp}\n                 resetNotification={this.resetNotification}\n                 removedFromSuggestions={this.state.settings.removedFromSuggestions}\n                 removeBookFromSuggestions={this.removeBookFromSuggestions}\n                 newImprovedEditBook={this.newImprovedEditBook}\n                 defaultDate={this.state.settings.defaultDate}\n                 changeDefaultDate={this.changeDefaultDate}\n            />\n            <footer className={\"clb-bookshelf-footer color-\" + settingsColor + \" font-\" + settingsFont}>\n              Bookshelf &middot; <a href=\"https://github.com/tomatillodesign/bookshelf\" target=\"_blank\">Version 1.0</a> &middot; By Chris Liu-Beers, <a href=\"http://tomatillodesign.com\" target=\"_blank\">Tomatillo Design</a>\n            </footer>\n            </>\n       );\n\n       }\n\n  }\n\n\nexport default BookManager;\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\nclass LostPassword extends React.Component {\n\n     constructor(props) {\n       super(props);\n       this.state = {\n            showModal: false,\n            email: '',\n            sentEmail: false,\n       };\n\n       this.handleEmailChange = this.handleEmailChange.bind(this);\n       this.handleSubmit = this.handleSubmit.bind(this);\n\n     }\n\n     sentEmailAddress = null;\n\n     handleShow = () => this.setState({ showModal: true });\n     handleClose = () => (\n          this.setState({\n               showModal: false\n          })\n     );\n\n     handleEmailChange(event) {\n          this.setState({ email: event.target.value });\n     }\n\n     handleSubmit(event) {\n       console.log('Lost password, attempting to send email to: ' + this.state.email);\n       event.preventDefault();\n\n       //this.props.authenticateUser( this.state.email, this.state.password );\n\n           var auth = firebaseApp.auth();\n           const emailAddress = this.state.email;\n\n           auth.sendPasswordResetEmail(emailAddress).then(function() {\n             // Email sent.\n             console.log(\"Reset password email sent\");\n\n           }).catch(function(error) {\n             // An error happened.\n             console.log(\"ERROR: could not send reset password email\");\n             console.log(error);\n           });\n\n           this.sentEmailAddress = this.emailAdress;\n           this.setState({\n                sentEmail: true\n           });\n\n     }\n\n\n\n\n     render() {\n\n          const emailAdress = this.sentEmailAddress;\n\n          return (\n               <div className=\"lost-password-area\">\n                 <button onClick={this.handleShow} >\n                   Lost Password\n                 </button>\n\n                 <Modal show={this.state.showModal} onHide={this.handleClose} className=\"clb-single-beer-notes\">\n                   <Modal.Header closeButton>\n                     <Modal.Title>Lost Your Password</Modal.Title>\n                   </Modal.Header>\n                   <Modal.Body>\n                   { this.state.sentEmail !== true ? (\n                         <form className=\"lost-pw-area\" onSubmit={this.handleSubmit} >\n                          Enter your email below to reset your password:\n                          <div className=\"login-item\">\n                          <input\n                              type=\"text\"\n                              id=\"lost-pw-form-email\"\n                              name=\"email\"\n                              label=\"Email\"\n                              required\n                              onChange={this.handleEmailChange}\n                              />\n                              </div>\n                         <button type=\"submit\" id=\"lost-pw-submit\">Submit</button>\n                         </form> )\n                    : (\n                         <p className=\"sent-email-message\">If an account exists for {this.state.email}, we've sent an email that will allow you to reset your password. Thanks!</p>\n                    )}\n                   </Modal.Body>\n                 </Modal>\n               </div>\n\n          );\n\n     }\n\n}\n\nexport default LostPassword;\n","import React from 'react';\nimport LostPassword from './LostPassword';\nimport Modal from 'react-bootstrap/Modal';\nimport { firebaseApp } from '../base';\nimport Register from './Register';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n         showModal: false,\n         email: '',\n         password: '',\n         error: null,\n    };\n\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePWChange = this.handlePWChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRegistrationSubmit = this.handleRegistrationSubmit.bind(this);\n    this.handleShowRegister = this.handleShowRegister.bind(this);\n    this.handleCloseRegister = this.handleCloseRegister.bind(this);\n\n  }\n\n\n  handleShowRegister(event) {\n       event.preventDefault();\n       this.setState({ showModal: true });\n }\n\n  handleCloseRegister(event) {\n       //event.preventDefault();\n       this.setState({\n            showModal: false\n       });\n}\n\n\n  handleEmailChange(event) {\n    this.setState({email: event.target.value});\n  }\n\n  handlePWChange(event) {\n    this.setState({password: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    this.props.authenticateUser( this.state.email, this.state.password );\n\n  }\n\n\n  handleRegistrationSubmit = (event) => {\n     event.preventDefault();\n     console.log('Registration submitted');\n     const { email, password } = this.state;\n     console.log(this.state);\n  firebaseApp\n       .auth()\n       .createUserWithEmailAndPassword(email, password)\n       .then((user) => {\n            //console.log(user);\n            //this.props.history.push('/');\n\n            // add new user to App-->state and Firebase\n            this.props.registerNewUser(user);\n       })\n       .catch((error) => {\n         this.setState({ error: error });\n       });\n   };\n\n\nrender() {\n\n     const loginError = this.props.loginError;\n     const { email, password, error } = this.state;\n\n     return (\n\n          <div className=\"login-form-area\">\n          <p>Welcome! Bookshelf is an easy, free way to keep track of your reading.<br/>\n          It's for personal use only and your information will never be shared with advertisers or social networks.<br/>\n          If you're new here, <a href=\"/bookshelf/register\" onClick={this.handleShowRegister} >click here to register for a new free account</a>. Or if you've already registered, then simply login below.</p>\n          { loginError === true ?\n               <h2>Incorrect email/password combination. Please try again:</h2>\n               :\n               <h2>Login Below:</h2>\n          }\n          <form className=\"login-area\" onSubmit={this.handleSubmit} >\n          <div className=\"login-item\">\n               <input\n                   type=\"text\"\n                   id=\"login-form-email\"\n                   name=\"email\"\n                   label=\"Email\"\n                   required\n                   onChange={this.handleEmailChange}\n                   />\n                   </div>\n                   <div className=\"login-item\">\n              <input\n                  id=\"login-form-password\"\n                  name=\"password\"\n                  label=\"Password\"\n                  required\n                  type=\"password\"\n                  onChange={this.handlePWChange}\n                  />\n             </div>\n             <button type=\"submit\">Submit</button>\n             </form>\n             <LostPassword />\n\n\n             <Modal show={this.state.showModal} onHide={this.handleCloseRegister} className=\"clb-single-beer-notes\">\n               <Modal.Header closeButton>\n                 <Modal.Title><h3>Register for a New Account</h3></Modal.Title>\n               </Modal.Header>\n               <Modal.Body>\n                    <Register\n                         registerNewUser={this.props.registerNewUser}\n                    />\n               </Modal.Body>\n             </Modal>\n\n        </div>\n     );\n\n     }\n\n}\n\nexport default Login;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// my components\nimport Login from './Login';\nimport Register from './Register';\nimport Logout from './Logout';\n\n\nexport default function LandingPage(props) {\n\n       return (\n            <div className=\"landing-page-area single-page\">\n             <h1>Login & New User Registration</h1>\n                 <div className=\"login-register-area\">\n                 <Login\n                         authenticateUser={props.authenticateUser}\n                         loginError={props.loginError}\n                         registerNewUser={props.registerNewUser} />\n                 </div>\n            </div>\n\n       );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Header from './components/Header.js';\nimport BookManager from './components/BookManager.js';\nimport LandingPage from './components/LandingPage.js';\n\nimport base from './base';\nimport { firebaseApp } from './base';\n\nclass App extends React.Component {\n     constructor(props) {\n          super(props);\n\n      this.state = {\n         loggedInID: '',\n         loggedInEmail: '',\n         loginError: false,\n       };\n\n     }\n\n\n     componentDidMount() {\n          console.log(\"App.js mounted newBookForm 10:41am\");\n     }\n\n\n\n     registerNewUser = (user) => {\n\n             const newUserID = user.user.uid;\n             const newUserEmail = user.user.email;\n              console.log(newUserID);\n\n             // Create new Journal view if it doesn't exist yet for this user\n              firebaseApp.database().ref().update({\n                 [newUserID]: {\n                      ownerID: newUserID,\n                      ownerEmail: newUserEmail,\n                      books: [],\n                      settings: {\n                                   color: 'default',\n                                   font: 'default',\n                                   sortViewToRead: 'alphabetical',\n                                   sortViewAlreadyRead: 'alphabetical',\n                                   bookSize: 'default',\n                                   genres: [\n                                        'Fiction',\n                                        'Nonfiction',\n                                        'Memoir',\n                                        'Children',\n                                        'Cooking',\n                                        'Historical Fiction',\n                                        'Mystery',\n                                        'Science Fiction',\n                                        'Young Adult',\n                                   ],\n                                   customFields: [],\n                              },\n                         },\n              });\n\n              this.setState({\n                   loggedInID: newUserID,\n                   loggedInEmail: newUserEmail,\n               });\n               localStorage.setItem('bookshelf.loggedInID', newUserID);\n               localStorage.setItem('bookshelf.loggedInEmail', newUserEmail);\n               console.log(\"REGISTERED AND Logged in: \" + newUserID);\n\n        }\n\n\n        authenticateUser = (email, password) => {\n\n                 console.log(\"AuthenticateUser: \" + email);\n                 // const loggedInID = user.user.uid;\n\n               firebaseApp\n                    .auth()\n                    .signInWithEmailAndPassword(email, password)\n                    .then((user) => {\n                      console.log(\"User successfully LOGGED IN\" + user.user.uid);\n                      this.setState({\n                           loggedInID: user.user.uid,\n                           loggedInEmail: user.user.email,\n                           loginError: false });\n                      localStorage.setItem('bookshelf.loggedInID', user.user.uid);\n                      localStorage.setItem('bookshelf.loggedInEmail', email);\n                    })\n                    .catch((error) => {\n                      console.log(\"ERROR: User trying to log in\");\n                      this.setState({ loginError: true });\n                    });\n\n                }\n\n\n\n      authHandler = async authData => {\n\n           //console.log(authData);\n           const user = firebaseApp.auth().currentUser;\n\n           console.log(user);\n           if( user !== null ) {\n                const userUID = user.uid;\n                console.log(\"Current User ID: \" + userUID);\n                console.log(\"Current User Email: \" + user.email);\n\n                //update state\n                this.setState({\n                     loggedInID: userUID,\n                     loggedInEmail: user.email,\n                       });\n               localStorage.setItem('bookshelf.loggedInID', userUID);\n               localStorage.setItem('bookshelf.loggedInEmail', user.email);\n\n           } else {\n                console.log(\"authHandler == no user found\");\n           }\n\n      }\n\n\n\n\n   logOutUser = event => {\n\n        firebaseApp.auth().signOut().then(function() {\n          // Sign-out successful.\n          console.log(\"Logged OUT successful\");\n\n        }).catch(function(error) {\n          // An error happened.\n          console.log(\"ERROR: Trying to log out\");\n        });\n\n        //update state\n        this.setState({\n             loggedInID: '',\n             loggedInEmail: '',\n          });\n        localStorage.removeItem('bookshelf.loggedInID');\n        localStorage.removeItem('bookshelf.loggedInEmail');\n\n        base.reset();\n\n   }\n\n\n   // Delete user not working ????\n   permanentlyDeleteUserAndInfo = user => {\n\n        console.log(user);\n        const userUID = user.uid;\n\n             base.remove(userUID)\n            .then(() => {\n              console.log(\"User \" + userUID + \" permanently deleted\");\n\n            })\n            .catch(error => {\n              //handle error\n            });\n\n            //update state\n           this.setState({\n                loggedInID: '',\n                loggedInEmail: '',\n             });\n           localStorage.removeItem('bookshelf.loggedInID');\n           localStorage.removeItem('bookshelf.loggedInEmail');\n\n       }\n\n\n\n     render() {\n\n          let loggedInID = this.state.loggedInID;\n          let loggedInEmail = this.state.loggedInEmail;\n          const loginError = this.state.loginError;\n\n          const loggedInIDLocal = localStorage.getItem('bookshelf.loggedInID');\n          const loggedInEmailLocal = localStorage.getItem('bookshelf.loggedInEmail');\n          console.log(\"LOCAL STORAGE: \" + loggedInIDLocal);\n\n          if( loggedInIDLocal !== null ) { loggedInID = loggedInIDLocal; }\n          if( loggedInEmailLocal !== null ) { loggedInEmail = loggedInEmailLocal; }\n\n       return (\n         <div className=\"App\">\n\n           { loggedInID !== '' ?\n               <>\n                     <BookManager\n                          logOutUser={this.logOutUser}\n                          loggedInID={loggedInID}\n                          loggedInEmail={loggedInEmail}\n                          permanentlyDeleteUserAndInfo={this.permanentlyDeleteUserAndInfo}\n                     />\n               </>\n               :\n               <>\n                    <Header\n                       logOutUser={this.logOutUser}\n                       permanentlyDeleteUserAndInfo={this.permanentlyDeleteUserAndInfo}\n                    />\n                    <div className=\"logged-out-area\">\n                       <LandingPage\n                              registerNewUser={this.registerNewUser}\n                              authenticateUser={this.authenticateUser}\n                              loginError={loginError}\n                              logOutUser={this.logOutUser}\n                         />\n                       </div>\n             </>\n             }\n\n         </div>\n       );\n     }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}