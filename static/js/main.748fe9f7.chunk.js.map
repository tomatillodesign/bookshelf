{"version":3,"sources":["logo.svg","../node_modules/encoding/lib sync","components/LightBook.js","components/SolidBook.js","components/Header.js","components/BookButtonToRead.js","components/BookButtonAlreadyRead.js","components/SelectRating.js","components/Notes.js","components/ReadDate.js","components/EditBookForm.js","components/BookButtonRemove.js","components/BookButtonMoveToAlreadyRead.js","base.js","components/ReplaceCover.js","components/BookModal.js","components/Stars.js","components/BookCard.js","components/RecentlyAddedToRead.js","components/RecentlyAddedAlreadyRead.js","components/Landing.js","components/Input.js","utils/API.js","components/Results.js","components/Search.js","components/Logout.js","components/ChangePassword.js","components/DeleteAccount.js","components/SelectThemeColor.js","components/SelectThemeFont.js","components/Settings.js","components/NotFound.js","components/SelectToReadView.js","components/SavedForLater.js","components/SelectAlreadyReadView.js","components/PreviouslyRead.js","components/Register.js","components/Router.js","components/BookManager.js","components/LostPassword.js","components/Login.js","components/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","LightBook","props","icon","faBook","SolidBook","Header","className","settingsColor","settingsFont","href","aria-label","faSearch","faCog","BookButtonToRead","createNewBook","event","preventDefault","console","log","book","newBook","addBookToRead","state","title","onClick","this","React","Component","BookButtonAlreadyRead","addBookAlreadyRead","SelectRating","defaultRating","myRatingToPublish","defaultRatingPublish","value","label","ratingOptions","placeholder","options","defaultValue","isClearable","isSearchable","onChange","setRating","ReadDate","useState","Date","setSelectedDate","formattedDate","bookshelfTimestamp","toISOString","slice","TextField","required","type","InputLabelProps","shrink","date","currentTarget","getCompletedDate","EditBookForm","bookshelfRating","bookNotes","bookshelfNote","editThisBook","undefined","entry","editBook","selectedOption","setState","updatedTimestamp","parseInt","getTime","toFixed","currentlyEditing","JSON","stringify","onSubmit","hideRating","hideDate","BookButtonRemove","removeThisBook","bookObj","context","removeBookFromAlreadyRead","removeBookFromToRead","window","confirm","faTrashAlt","BookButtonMoveToAlreadyRead","moveBooktoAlreadyRead","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","ReplaceCover","require","handleChangeUsername","username","target","handleUploadStart","isUploading","progress","handleProgress","handleUploadError","error","handleUploadSuccess","filename","bookCover","storage","ref","child","getDownloadURL","then","url","bookCoverURL","updateCoverImg","isEditing","src","style","hidden","accept","randomizeFilename","storageRef","onUploadStart","onUploadError","onUploadSuccess","onProgress","BookModal","show","setShow","handleClose","handleShow","bookCoverModal","bookTitleModal","coverImageURL","subtitle","hasSubtitle","description","authors","authorClass","authorsToPublish","pageCount","searchResult","categories","publishedDate","coverImg","length","join","toString","volumeInfo","imageLinks","thumbnail","large","medium","small","smallThumbnail","editForm","alreadyRead","Modal","onHide","closeButton","Title","Body","Accordion","Toggle","as","Button","variant","eventKey","Collapse","dangerouslySetInnerHTML","__html","Footer","savedForLater","removeBook","startsWith","replace","Stars","rating","stars","faStar","BookCard","originalBookJSON","connected","toRead","RecentlyAddedToRead","booksToRead","orderedBooksToPublish","sort","a","b","map","index","key","addNewImagesToRead","RecentlyAddedAlreadyRead","booksAlreadyRead","addNewImagesAlreadyRead","Landing","notification","Input","axios","get","Results","books","noResults","location","data","results","filter","test","Search","handleInputChange","name","handleFormSubmit","trim","API","res","items","toResults","catch","err","to","pathname","Logout","logOutUser","ChangePassword","resetPassword","DeleteAccount","deleteAccount","SelectThemeColor","setColor","changeSettingsColor","myColorToPublish","defaultColorPublish","colorOptions","SelectThemeFont","setFont","changeSettingsFont","Settings","auth","emailAddress","loggedInEmail","sendPasswordResetEmail","emailedResetLink","user","currentUser","delete","permanentlyDeleteUserAndInfo","NotFound","SelectToReadView","setView","changeToReadView","defaultView","myViewToPublish","defaultViewPublish","SavedForLater","booksToReadView","orderedBooks","SelectAlreadyReadView","changeAlreadyReadView","PreviouslyRead","booksAlreadyReadView","Register","handleSubmit","email","password","createUserWithEmailAndPassword","registerNewUser","message","Router","basename","exact","path","component","render","loggedInID","editBookToRead","BookManager","fetchCoverImage","now","notes","googleLink","selfLink","publisher","genre","bookTitle","prevState","startNotificationTimer","fetch","json","extraLarge","bookID","clbCopyBookState","bookToUpdate","obj","indexOf","splice","getBookObjInState","findIndex","ids","sortViewAlreadyRead","settings","newBookCardView","sortViewToRead","newSettingsColor","color","localStorageKey","localStorage","setItem","newSettingsFont","font","resetNotification","timerId","setTimeout","bookSize","genres","customFields","syncState","asArray","localStorageKeyColor","settingsColorLocal","getItem","localStorageKeyFont","settingsFontLocal","updatedBooksToRead","updatedBooksAlreadyRead","LostPassword","sentEmailAddress","showModal","sentEmail","handleEmailChange","bind","emailAdress","Login","handleRegistrationSubmit","handlePWChange","handleShowRegister","handleCloseRegister","authenticateUser","loginError","LandingPage","App","newUserID","uid","newUserEmail","update","ownerID","ownerEmail","signInWithEmailAndPassword","authHandler","authData","async","userUID","signOut","removeItem","reset","remove","loggedInIDLocal","loggedInEmailLocal","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.748fe9f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 248;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-light-svg-icons';\n\nconst LightBook = (props) => (\n     <FontAwesomeIcon icon={faBook} />\n)\n\nexport default LightBook;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nconst SolidBook = (props) => (\n     <FontAwesomeIcon icon={faBook} />\n)\n\nexport default SolidBook;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import { faCog, faSearch } from '@fortawesome/pro-duotone-svg-icons';\nimport { faCog, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\nimport LightBook from './LightBook';\nimport SolidBook from './SolidBook';\n\n\nfunction Header(props) {\n  return (\n    <header className={\"header color-\" + props.settingsColor + \" font-\" + props.settingsFont}>\n      <h1 className=\"logo-area\"><a href=\"/bookshelf/\">Bookshelf</a></h1>\n      <nav className=\"nav-primary\" aria-label=\"Main\" id=\"bookshelf-nav-primary\" className=\"main-menu\">\n           <ul id=\"menu-main-menu\" className=\"menu-main-menu\">\n                <li id=\"menu-item-search\" className=\"menu-item search\"><a href=\"#search\"><FontAwesomeIcon icon={faSearch} /> New Books</a></li>\n                <li id=\"menu-item-saved\" className=\"menu-item saved\"><a href=\"#saved\"><LightBook /> To Read</a></li>\n                <li id=\"menu-item-read\" className=\"menu-item read\"><a href=\"#read\"><SolidBook /> Already Read</a></li>\n                <li id=\"menu-item-settings\" className=\"menu-item settings\"><a href=\"#settings\"><FontAwesomeIcon icon={faCog} /> Settings</a></li>\n           </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-light-svg-icons';\n\nclass BookButtonToRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.addBookToRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action to-read\"\n                    title=\"Add to your To Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonToRead;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nclass BookButtonAlreadyRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n          console.log(this.props.addBookAlreadyRead);\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.addBookAlreadyRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action already-read\"\n                    title=\"Add to your Already Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonAlreadyRead;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectRating extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n\n     render() {\n\n          const defaultRating = this.props.defaultRating;\n          console.log(defaultRating);\n\n               var myRatingToPublish = null;\n               if( defaultRating === '5' ) { myRatingToPublish = '⭐⭐⭐⭐⭐ Life-Changing'; }\n               if( defaultRating === '4' ) { myRatingToPublish = '⭐⭐⭐⭐ Great'; }\n               if( defaultRating === '3' ) { myRatingToPublish = '⭐⭐⭐ Good'; }\n               if( defaultRating === '2' ) { myRatingToPublish = '⭐⭐ OK'; }\n               if( defaultRating === '1' ) { myRatingToPublish = \"⭐ Bad / Didn't Finish\"; }\n\n          let defaultRatingPublish = {\n               value: defaultRating,\n               label: myRatingToPublish\n          };\n          if( defaultRating === null ) { defaultRatingPublish = null; }\n          //console.log(defaultRating);\n\n          const ratingOptions = [\n               { value: '5', label: '⭐⭐⭐⭐⭐ Life-Changing' },\n               { value: '4', label: '⭐⭐⭐⭐ Great' },\n               { value: '3', label: '⭐⭐⭐ Good' },\n               { value: '2', label: '⭐⭐ OK' },\n               { value: '1', label: \"⭐ Bad / Didn't Finish\" }\n          ];\n\n          if( defaultRating ) {\n\n               return (\n                 <Select\n                    placeholder='Rating'\n                    options={ratingOptions}\n                    defaultValue={defaultRatingPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.props.setRating}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Rating'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.props.setRating}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectRating;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nclass Notes extends React.Component {\n\n     useStyles = makeStyles(theme => ({\n       root: {\n         '& > *': {\n           margin: theme.spacing(1),\n           marginLeft: 0\n         },\n       },\n     }));\n\n  classes = this.useStyles;\n\n //  onChange = (event) => {\n //       console.log(event.target.value);\n // }\n\nrender() {\n\n          const edit = this.props.edit;\n\n          if( edit ) {\n\n       return (\n\n           <TextField\n               id=\"notes-basic-outline\"\n               defaultValue={this.props.defaultValue}\n               label={this.props.placeholder}\n               fullWidth\n               multiline\n               rows=\"4\"\n               onChange={this.props.setNotes}\n               />\n\n       );\n\n } else {\n\n      return (\n\n          <TextField\n              id=\"outlined-basic\"\n              defaultValue={this.props.defaultValue}\n              label={this.props.placeholder}\n              fullWidth\n              multiline\n              rows=\"4\"\n              onChange={this.props.setNotes}\n              />\n\n      );\n\n}\n\n}\n\n}\n\nexport default Notes;\n","//import 'date-fns';\nimport React from 'react';\n//import DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function ReadDate(props) {\n\n// The first commit of Material-UI\nconst [selectedDate, setSelectedDate] = React.useState(new Date());\n\nconst handleDateChange = date => {\n     console.log(date.currentTarget.value);\n     setSelectedDate(date.currentTarget.value);\n     props.getCompletedDate(date.currentTarget.value);\n\n};\n\n\nconst bookshelfTimestamp = new Date(props.bookshelfTimestamp);\nconst formattedDate = bookshelfTimestamp.toISOString().slice(0,10);\nconsole.log(formattedDate);\n\nreturn (\n     <TextField\n         id=\"date\"\n         required\n         label=\"Date Completed\"\n         type=\"date\"\n         defaultValue={formattedDate}\n         className=\"book-date-field\"\n         InputLabelProps={{\n           shrink: true,\n         }}\n         onChange={handleDateChange}\n  />\n);\n\n}\n","import React from 'react';\nimport Select from 'react-select';\n//import Notes from './Notes';\nimport SelectRating from './SelectRating';\nimport Notes from './Notes';\nimport ReadDate from './ReadDate';\n\n///////////////////////////////////////////////////////////////////////\n\n\nclass EditBookForm extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               currentlyEditing: true,\n               book: this.props.book,\n               bookshelfNote: this.props.bookshelfNote,\n               bookshelfRating: this.props.bookshelfRating\n          }\n     }\n\n\n\n     id = this.props.book.id;\n     bookshelfRating = this.props.bookshelfRating;\n     bookNotes = this.props.bookshelfNote;\n     bookshelfTimestamp = this.props.bookshelfTimestamp;\n\n\n     editThisBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          const book = this.state.book;\n          console.log(book);\n\n          // Make sure no fields cause \"undefined\" errors even if missing info\n               // if( this.count === undefined ) { this.count = 0; }\n               // if( this.type_of_beer === undefined ) { this.type_of_beer = ''; }\n               // if( this.brewery_name === undefined ) {\n               //      this.brewery_name = '';\n               //      this.brewery_slug = '';\n               // }\n\n               console.log(this.state.book.bookshelfTimestamp);\n\n               //timestamp fix\n               //let updatedDate =\n\n\n               if( this.bookshelfTimestamp === undefined ) { this.bookshelfTimestamp = this.state.book.bookshelfTimestamp; }\n               if( this.bookshelfRating === undefined ) { this.bookshelfRating = this.state.book.bookshelfRating; }\n               if( this.bookNotes === undefined ) { this.bookNotes = []; }\n\n               book.bookshelfRating = this.bookshelfRating;\n               book.bookshelfNote = this.bookNotes;\n               book.bookshelfTimestamp = this.bookshelfTimestamp;\n               const entry = book;\n\n          console.log(entry);\n          // console.log(this.props.editCurrentBeer);\n          // 2 add the new beer to state (App.js)\n          this.props.editBook(entry);\n\n     }\n\n     setRating = (selectedOption) => {\n          if(selectedOption) {\n               this.bookshelfRating = selectedOption.value;\n               this.setState({ bookshelfRating: selectedOption.value });\n          }\n          else {\n               this.setState({ bookshelfRating: 505 });\n          }\n\n     }\n\n     // setNotes = (event) => {\n     //      this.bookNotes = (event.target.value);\n     // }\n\n     getCompletedDate = (date) => {\n          //this.bookshelfTimestamp = date;\n          console.log(\"Completed DATE: \" + this.bookshelfTimestamp);\n          let updatedTimestamp = parseInt((new Date(date).getTime()).toFixed(0));\n          console.log(updatedTimestamp);\n          this.bookshelfTimestamp = updatedTimestamp;\n     }\n\n\nrender() {\n\n     console.log(\"Current book: \" + JSON.stringify(this.props.book));\n     console.log(\"Current book RATING: \" + JSON.stringify(this.props.bookshelfRating));\n     const defaultRating = this.props.bookshelfRating;\n     //const bookshelfNote = this.props.bookshelfNote;\n     const bookshelfTimestamp = this.props.bookshelfTimestamp;\n     //console.log(\"NOTE: \" + bookshelfNote);\n\n       return (\n            <>\n\n            <form className=\"edit-book\" onSubmit={this.editThisBook} >\n               <div className=\"top-info-line\">\n                      { this.props.hideRating !== true &&\n                         <div className=\"book-rating-area\">\n                         <SelectRating\n                              setRating={this.setRating}\n                              defaultRating={defaultRating}\n                         />\n                         </div>\n                    }\n                    { this.props.hideDate !== true &&\n                         <div className=\"book-date-area\">\n                         <ReadDate\n                              bookshelfTimestamp={bookshelfTimestamp}\n                              getCompletedDate={this.getCompletedDate}\n                         />\n                         </div>\n                    }\n               </div>\n\n               <button type=\"submit\" className=\"update-this-book\">Save Changes</button>\n            </form>\n         </>\n       );\n     }\n\n}\n\n\nexport default EditBookForm;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/pro-solid-svg-icons';\n\nclass BookButtonRemove extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     removeThisBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          // console.log(this.props.book);\n          // console.log(this.props.context);\n          // console.log(this.props.removeBookFromAlreadyRead);\n          const bookObj = this.props.book;\n\n          if(this.props.context === 'removeBookFromAlreadyRead') {\n               this.props.removeBookFromAlreadyRead(bookObj);\n          }\n\n          if(this.props.context === 'removeBookFromToRead') {\n               this.props.removeBookFromToRead(bookObj);\n          }\n\n\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action remove-book\"\n                    title=\"Permanently remove this book from your collection\"\n                    onClick={event =>\n                 window.confirm(\n                   \"Are you sure you want to delete this book? All of your ratings and notes for this book will also be removed. You cannot undo this action.\"\n              ) && this.removeThisBook(event)\n               }>\n          <FontAwesomeIcon icon={faTrashAlt} />\n          </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonRemove;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nclass BookButtonMoveToAlreadyRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.moveBooktoAlreadyRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action already-read\"\n                    title=\"Move this book to your Already Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonMoveToAlreadyRead;\n","import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n     apiKey: \"AIzaSyDniUweenII-q4xtU2jywgLN_lVEcLNnlM\",\n     authDomain: \"bookshelf-9d11e.firebaseapp.com\",\n     databaseURL: \"https://bookshelf-9d11e.firebaseio.com\",\n     projectId: \"bookshelf-9d11e\",\n     storageBucket: \"bookshelf-9d11e.appspot.com\",\n     messagingSenderId: \"16890829596\",\n     appId: \"1:16890829596:web:44b99ad2e1677bca39f8d9\"\n})\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n// This is a named export\nexport { firebaseApp };\n\n// This is a default export\nexport default base;\n","import React, { Component } from \"react\";\nimport base from '../base';\nimport { firebaseApp } from '../base';\nimport FileUploader from \"react-firebase-file-uploader\";\n\nconst shortid = require('shortid');\n\nclass ReplaceCover extends Component {\n     constructor(props) {\n    super(props);\n       this.state = {\n         bookCover: \"\",\n         isUploading: false,\n         progress: 0,\n         bookCoverURL: \"\",\n         isEditing: true\n       };\n   }\n\n\n   handleChangeUsername = event =>\n    this.setState({ username: event.target.value });\n   handleUploadStart = () => this.setState({ isUploading: true, progress: 0 });\n   handleProgress = progress => this.setState({ progress });\n   handleUploadError = error => {\n    this.setState({ isUploading: false });\n    console.error(error);\n   };\n   handleUploadSuccess = filename => {\n    this.setState({ bookCover: filename, progress: 100, isUploading: false });\n    firebaseApp\n       .storage()\n       .ref(\"images\")\n       .child(filename)\n       .getDownloadURL()\n       .then(url =>\n\n            this.setState({ bookCoverURL: url },\n            // Update book.coverImg in book object in Firebase\n            this.props.updateCoverImg( this.props.bookObj, url )\n\n       ));\n\n   };\n\n  render() {\n\n\n\n    return (\n      <div>\n        <form>\n          <h3>Current URL: {this.state.bookCoverURL}</h3>\n          {this.state.isUploading && <p>Progress: {this.state.progress}</p>}\n          {this.state.bookCoverURL && <><p>Updated cover:</p><div className=\"updated-cover-thumbnail\"><img src={this.state.bookCoverURL} /></div></>}\n          <label className=\"button replace-cover\" style={{}}>\n               Replace Cover\n               <FileUploader\n                     hidden\n                     accept=\"image/*\"\n                     randomizeFilename\n                     storageRef={firebaseApp.storage().ref('images')}\n                     onUploadStart={this.handleUploadStart}\n                     onUploadError={this.handleUploadError}\n                     onUploadSuccess={this.handleUploadSuccess}\n                     onProgress={this.handleProgress}\n                   />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ReplaceCover;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Accordion from 'react-bootstrap/Accordion';\nimport BookButtonToRead from './BookButtonToRead.js';\nimport BookButtonAlreadyRead from './BookButtonAlreadyRead.js';\nimport EditBookForm from './EditBookForm.js';\nimport BookButtonRemove from './BookButtonRemove';\nimport BookButtonMoveToAlreadyRead from './BookButtonMoveToAlreadyRead';\nimport ReplaceCover from './ReplaceCover';\n\nimport SelectRating from './SelectRating';\n\nexport default function BookModal(props) {\n\n     const [show, setShow] = React.useState(false);\n\n     const handleClose = () => setShow(false);\n     const handleShow = () => setShow(true);\n\n     const book = props.book;\n     console.log(book);\n\n     const bookCoverModal = props.bookCoverModal;\n     const bookTitleModal = props.bookTitleModal;\n\n     let coverImageURL = null;\n     let title = null;\n     let subtitle = null;\n     let hasSubtitle = false;\n     let description = null;\n     let authors = null;\n     let hasAuthor = false;\n     let authorClass = null;\n     let categories = null;\n     let authorsToPublish = null;\n     let dateToPublish = null;\n     let date = null;\n     let pageCount = null;\n\n     if( props.searchResult !== true ) {\n\n          title = book.title;\n          console.log(title);\n          if( book.subtitle !== undefined ) {\n               hasSubtitle = true;\n               authorClass = \" has-subtitle\";\n               subtitle = <h3 className=\"book-subtitle\">{book.subtitle}</h3>;\n          }\n          if( book.authors !== undefined ) { authors = book.authors; }\n\n          description = book.description;\n\n          categories = book.categories;\n          date = book.publishedDate;\n          pageCount = book.pageCount;\n\n          // new image work here\n          if( book.coverImg == undefined || book.coverImg == null ) {\n               coverImageURL = 'https://firebasestorage.googleapis.com/v0/b/bookshelf-9d11e.appspot.com/o/images%2Foverstory-cover.jpg?alt=media&token=52aa3fae-7968-459b-abab-c71daa39d547';\n          } else {\n               coverImageURL = book.coverImg;\n          }\n\n          if( book.authors !== undefined ) {\n               if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n               if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n               if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n\n               if( hasSubtitle ) {\n                    authorsToPublish = <div className={\"authors\" + authorClass}>{authorsToPublish}, {pageCount} pages</div>;\n               } else {\n                    authorsToPublish = <div className=\"authors\">{authorsToPublish}, {pageCount} pages</div>;\n               }\n          }\n\n          if( date ) {\n               let yearOnly = date.toString()\n               dateToPublish = 'Date: ' + yearOnly;\n          }\n\n     } else {\n\n               if( book.volumeInfo !== undefined ) {\n\n               if( book.volumeInfo.imageLinks !== undefined ) {\n                    console.log(book.volumeInfo.imageLinks.thumbnail);\n                    coverImageURL = book.volumeInfo.imageLinks.thumbnail;\n                    coverImageURL = book.volumeInfo.imageLinks.large;\n                    if( book.volumeInfo.imageLinks.large === undefined || book.volumeInfo.imageLinks.large === '' ) {\n                         coverImageURL = book.volumeInfo.imageLinks.medium;\n                    }\n                    if( book.volumeInfo.imageLinks.medium === undefined || book.volumeInfo.imageLinks.medium === '' ) {\n                         coverImageURL = book.volumeInfo.imageLinks.small;\n                    }\n                    if( book.volumeInfo.imageLinks.small === undefined || book.volumeInfo.imageLinks.small === '' ) {\n                         coverImageURL = book.volumeInfo.imageLinks.smallThumbnail;\n                    }\n                    if( book.volumeInfo.imageLinks.smallThumbnail === undefined ) {\n                         coverImageURL = book.volumeInfo.imageLinks.thumbnail;\n                    }\n               }\n\n               title = book.volumeInfo.title;\n               if( book.volumeInfo.subtitle !== undefined ) {\n                    hasSubtitle = true;\n                    authorClass = \" has-subtitle\";\n                    subtitle = <h3 className=\"book-subtitle\">{book.volumeInfo.subtitle}</h3>;\n               }\n               if( book.volumeInfo.authors !== undefined ) { authors = book.volumeInfo.authors; }\n\n               description = book.volumeInfo.description;\n\n               categories = book.volumeInfo.categories;\n               date = book.volumeInfo.publishedDate;\n               pageCount = book.volumeInfo.pageCount;\n\n               if( book.volumeInfo.authors !== undefined ) {\n                    if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n                    if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n                    if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n\n                    if( hasSubtitle ) {\n                         authorsToPublish = <div className={\"authors\" + authorClass}>{authorsToPublish}, {pageCount} pages</div>;\n                    } else {\n                         authorsToPublish = <div className=\"authors\">{authorsToPublish}, {pageCount} pages</div>;\n                    }\n               }\n\n               if( date ) {\n                    let yearOnly = date.toString()\n                    dateToPublish = 'Date: ' + yearOnly;\n               }\n          }\n\n     }\n\n     //console.log(props.bookshelfRating);\n     let editForm = null;\n     if( props.searchResult !== true ) {\n          if( props.alreadyRead !== true ) {\n               editForm = <EditBookForm\n                    book={book}\n                    hideRating={true}\n                    hideDate={true}\n                    bookshelfRating={props.bookshelfRating}\n                    bookshelfNote={props.bookshelfNote}\n                    bookshelfTimestamp={props.bookshelfTimestamp}\n                    editBook={props.editBook}\n               />;\n          } else if( props.alreadyRead ) {\n               editForm = <EditBookForm\n                    book={book}\n                    bookshelfRating={props.bookshelfRating}\n                    bookshelfNote={props.bookshelfNote}\n                    bookshelfTimestamp={props.bookshelfTimestamp}\n                    editBook={props.editBook}\n               />;\n          }\n     }\n\n     if( bookTitleModal ) {\n\n          return (\n            <>\n              <button onClick={handleShow} className=\"card-book-title\">\n                <h2 className=\"book-title\">{title}</h2>\n              </button>\n\n              <Modal show={show} onHide={handleClose} className={\"single-book-modal\" + \" font-\" + props.settingsFont + \" color-\" + props.settingsColor}>\n                <Modal.Header closeButton>\n                  <Modal.Title className=\"single-book-title\">{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"small-thumbnail-area\">\n                         <img src={coverImageURL} />\n                         {props.searchResult !== true &&\n                              <ReplaceCover\n                                   bookObj={book}\n                                   updateCoverImg={props.updateCoverImg}\n                              />\n                         }\n                    </div>\n                    {subtitle}\n                    {authorsToPublish}\n                         <>\n                         {editForm}\n                         <Accordion>\n                              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" className=\"already-read-description-toggle\">\n                                <h3>Description +</h3>\n                              </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"0\">\n                              <div className=\"book-description\" dangerouslySetInnerHTML={ { __html: description } }></div>\n                            </Accordion.Collapse>\n                        </Accordion>\n                        </>\n                </Modal.Body>\n                <Modal.Footer>\n                <div className=\"book-meta button-area\">\n                { props.alreadyRead &&\n                     <BookButtonRemove\n                         book={book}\n                         context={'removeBookFromAlreadyRead'}\n                         removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                      />\n                }\n                { props.savedForLater &&\n                     <>\n                     <BookButtonRemove\n                          book={book}\n                          removeBook={props.removeBookFromToRead}\n                          context={'removeBookFromToRead'}\n                          removeBookFromToRead={props.removeBookFromToRead}\n                     />\n                     <BookButtonMoveToAlreadyRead\n                          book={props.book}\n                          coverImageURL={coverImageURL}\n                          moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                     />\n                     </>\n                }\n                { props.searchResult &&\n                     <>\n                     <BookButtonToRead />\n                     <BookButtonAlreadyRead\n                         coverImageURL={coverImageURL}\n                         addBookAlreadyRead={props.addBookAlreadyRead}\n                     />\n                     </>\n                }\n                </div>\n                </Modal.Footer>\n              </Modal>\n            </>\n          );\n\n     } else if ( bookCoverModal ) {\n\n          if( coverImageURL !== null ) {\n               //console.log(\"1-26 Update 1025am - COVER IMG URL: \" + coverImageURL);\n               if( coverImageURL.startsWith(\"http://\") ) {\n                    coverImageURL = coverImageURL.replace(\"http://\", \"https://\");\n                    //console.log(\"Updated COVER IMG URL: \" + coverImageURL);\n               }\n          }\n\n          return (\n            <>\n              <div className=\"cover-image-area\">\n                   <button onClick={handleShow} className=\"card-book-cover\"><img src={coverImageURL} className=\"cover-image\" /></button>\n              </div>\n\n              <Modal show={show} onHide={handleClose} className={\"single-book-modal\" + \" font-\" + props.settingsFont + \" color-\" + props.settingsColor}>\n                <Modal.Header closeButton>\n                  <Modal.Title className=\"single-book-title\">{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                     <div className=\"small-thumbnail-area\">\n                          <img src={coverImageURL} />\n                          {props.searchResult !== true &&\n                               <ReplaceCover\n                                    bookObj={book}\n                                    updateCoverImg={props.updateCoverImg}\n                               />\n                          }\n                     </div>\n                    {subtitle}\n                    {authorsToPublish}\n                         {editForm}\n                         <Accordion>\n                              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" className=\"already-read-description-toggle\">\n                                <h3>View Description +</h3>\n                              </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"0\">\n                              <div className=\"book-description\" dangerouslySetInnerHTML={ { __html: description } }></div>\n                            </Accordion.Collapse>\n                        </Accordion>\n\n                </Modal.Body>\n                <Modal.Footer>\n                <div className=\"book-meta button-area\">\n                { props.alreadyRead &&\n                     <BookButtonRemove\n                         book={book}\n                         context={'removeBookFromAlreadyRead'}\n                         removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                      />\n                }\n                { props.savedForLater &&\n                     <>\n                     <BookButtonRemove\n                          book={book}\n                          removeBook={props.removeBookFromToRead}\n                          context={'removeBookFromToRead'}\n                          removeBookFromToRead={props.removeBookFromToRead}\n                     />\n                     <BookButtonMoveToAlreadyRead\n                          book={props.book}\n                          moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                     />\n                     </>\n                }\n                { props.searchResult &&\n                     <>\n                     <BookButtonToRead />\n                     <BookButtonAlreadyRead />\n                     </>\n                }\n                </div>\n                </Modal.Footer>\n              </Modal>\n            </>\n          );\n\n     }\n\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n\nfunction Stars(props) {\n\n\n     const rating = parseInt(props.bookshelfRating);\n     console.log(props.bookshelfRating);\n\n     let stars = null;\n     if(rating === 5) {\n          stars = <><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span></>;\n     }\n     else if(rating === 4) {\n          stars = <><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span></>;\n     }\n     else if(rating === 3) {\n          stars = <><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span></>;\n     }\n     else if(rating === 2) {\n          stars = <><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span></>;\n     }\n     else if(rating === 1) {\n          stars = <><span className=\"star-icon\"><FontAwesomeIcon icon={faStar} /></span></>;\n     }\n     else {\n          stars = <div className=\"not-yet-rated\">Not yet rated</div>;\n     }\n\n  return (\n    <div className=\"star-rating-area\">\n          {stars}\n    </div>\n  );\n}\n\nexport default Stars;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/pro-light-svg-icons';\nimport { faFileEdit } from '@fortawesome/pro-light-svg-icons';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport BookModal from './BookModal.js';\nimport BookButtonToRead from './BookButtonToRead.js';\nimport BookButtonAlreadyRead from './BookButtonAlreadyRead.js';\nimport BookButtonRemove from './BookButtonRemove.js';\nimport BookButtonMoveToAlreadyRead from './BookButtonMoveToAlreadyRead';\nimport Stars from './Stars';\n\nclass BookCard extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n          this.state = {\n               originalBookJSON: null,\n               connected: false,\n            };\n\n     }\n\n     componentDidMount() {\n\n     // get vars from book\n     console.log(this.props.book);\n\n     // let selfLink = this.props.book.selfLink;\n     // console.log(selfLink);\n\n     // if( this.props.alreadyRead === true || this.props.toRead === true ) {\n     //      if( (this.props.book.volumeInfo.imageLinks.large === undefined || this.props.book.volumeInfo.imageLinks.large === '')\n     //           && (this.props.book.volumeInfo.imageLinks.medium === undefined || this.props.book.volumeInfo.imageLinks.medium === '')\n     //           && (this.props.book.volumeInfo.imageLinks.small === undefined || this.props.book.volumeInfo.imageLinks.small === '') ) {\n     //\n     //           // Get the details straight from Google, including larger image sizes\n     //           fetch(selfLink)\n     //           .then(res => res.json())\n     //           .then((originalBookJSON) => {\n     //             console.log('Checkout this JSON! ', originalBookJSON);\n     //             //coverImageURL = originalBookJSON.volumeInfo.imageLinks.large;\n     //             if(originalBookJSON.hasOwnProperty('error')) {\n     //                  this.setState({\n     //                      connected: false\n     //                 });\n     //             } else {\n     //\n     //                  // update thumbnail URL to larger size if possible\n     //                  if( this.props.alreadyRead === true  ) { this.props.addNewImagesAlreadyRead(originalBookJSON); }\n     //                  if( this.props.toRead === true  ) { this.props.addNewImagesToRead(originalBookJSON); }\n     //                  console.log(\"UPDATED: \" + originalBookJSON.volumeInfo.title);\n     //\n     //                  this.setState({\n     //                       originalBookJSON: originalBookJSON,\n     //                       connected: true\n     //                  });\n     //             }\n     //\n     //                })\n     //                .catch(err => {\n     //                     this.setState({\n     //                          connected: false\n     //                     });\n     //                     throw err;\n     //                });\n     //\n     //           }\n     //\n     //      }\n\n     }\n\n     render() {\n\n          // console.log(this.state.originalBookJSON);\n          // console.log(this.state.connected);\n          let book = this.state.originalBookJSON;\n          let bookJSON = JSON.stringify(book);\n\n          if( this.state.connected === false) {\n               book = this.props.book;\n          }\n\n          if( book !== null ) {\n\n          let coverImageURL = null;\n          let title = null;\n          let subtitle = null;\n          let authors = null;\n          let categories = null;\n          let authorsToPublish = null;\n          let dateToPublish = null;\n          let date = null;\n\n               title = book.title;\n               if( book.subtitle !== undefined ) { subtitle = book.subtitle; }\n               if( book.authors !== undefined ) { authors = book.authors; }\n\n               categories = book.categories;\n               date = book.publishedDate;\n\n               if( book.authors !== undefined ) {\n                    if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n                    if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n                    if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n               }\n\n               if( date ) {\n                    let yearOnly = date.toString()\n                    dateToPublish = 'Date: ' + yearOnly;\n               }\n\n          // show star ratings\n          //console.log(this.props.book.bookshelfRating);\n          let bookshelfRating = this.props.book.bookshelfRating;\n          let bookshelfNote = this.props.book.bookshelfNote;\n\n          let bookshelfTimestamp = this.props.book.bookshelfTimestamp;\n          console.log(bookshelfTimestamp);\n\n          //console.log(this.props.removeBookFromAlreadyRead);\n\n\n          return(\n\n               <div className=\"book-card\">\n                    <BookModal\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                         bookCoverModal={true}\n                         book={book}\n                         alreadyRead={this.props.alreadyRead}\n                         savedForLater={this.props.savedForLater}\n                         editBook={this.props.editBook}\n                         bookshelfRating={bookshelfRating}\n                         bookshelfNote={bookshelfNote}\n                         bookshelfTimestamp={bookshelfTimestamp}\n                         removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                         removeBookFromToRead={this.props.removeBookFromToRead}\n                         searchResult={this.props.searchResult}\n                         moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                         updateCoverImg={this.props.updateCoverImg}\n                    />\n                    <BookModal\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                         bookTitleModal={true}\n                         book={book}\n                         alreadyRead={this.props.alreadyRead}\n                         savedForLater={this.props.savedForLater}\n                         editBook={this.props.editBook}\n                         bookshelfRating={bookshelfRating}\n                         bookshelfNote={bookshelfNote}\n                         bookshelfTimestamp={bookshelfTimestamp}\n                         removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                         removeBookFromToRead={this.props.removeBookFromToRead}\n                         searchResult={this.props.searchResult}\n                         moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                         updateCoverImg={this.props.updateCoverImg}\n                    />\n                    <div className=\"book-meta-area\">\n                         <div className=\"book-meta author\">{authorsToPublish}</div>\n                         <div className=\"book-meta button-area\">\n                         { this.props.alreadyRead === true &&\n                              <>\n                              <Stars bookshelfRating={bookshelfRating} />\n                              </>\n                         }\n                         { this.props.toRead === true &&\n                              <>\n                              <BookButtonRemove\n                                   book={this.props.book}\n                                   removeBook={this.props.removeBookFromToRead}\n                                   context={'removeBookFromToRead'}\n                                   removeBookFromToRead={this.props.removeBookFromToRead}\n                              />\n                              <BookButtonMoveToAlreadyRead\n                                   book={this.props.book}\n                                   moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              />\n                              </>\n                         }\n                         { this.props.searchResult === true &&\n                              <>\n                              <BookButtonToRead\n                                   book={this.props.book}\n                                   addBookToRead={this.props.addBookToRead}\n                              />\n                              <BookButtonAlreadyRead\n                                   book={this.props.book}\n                                   addBookAlreadyRead={this.props.addBookAlreadyRead}\n                              />\n                              </>\n                         }\n                         </div>\n                    </div>\n               </div>\n\n          );\n\n          } else {\n          return 'NOT WORKING';\n     }\n\n}\n\n}\n\nexport default BookCard;\n","import React from 'react';\nimport BookCard from './BookCard';\n\nfunction RecentlyAddedToRead(props) {\n\n     const booksToRead = props.booksToRead;\n     let orderedBooks = null;\n     // console.log(booksToRead);\n     // console.log(booksToRead.length);\n\n      if( booksToRead !== undefined && booksToRead.length !== 0 ) {\n\n           // New sorting\n           orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                // If the first item has a higher number, move it down\n                // If the first item has a lower number, move it up\n                if (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                if (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                // If the count number is the same between both items, sort alphabetically\n                // If the first item comes first in the alphabet, move it up\n                // Otherwise move it down\n                if (a.title > b.title) return 1;\n                if (a.title < b.title) return -1;\n\n           });\n\n           let orderedBooksToPublish = orderedBooks.slice(0, 4);\n\n            return (\n                <div className=\"recently-added-to-read-area\">\n                    <h2 className=\"section-title\">Up Next</h2>\n                         <div className=\"results-grid four-col\">\n                        {orderedBooksToPublish.map((book, index) => (\n                             <BookCard\n                                      key={book.id}\n                                      book={book}\n                                      editBook={props.editBook}\n                                      moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                                      removeBookFromToRead={props.removeBookFromToRead}\n                                      addNewImagesToRead={props.addNewImagesToRead}\n                                      savedForLater={true}\n                                      toRead={true}\n                                      settingsFont={props.settingsFont}\n                                      settingsColor={props.settingsColor}\n                                      updateCoverImg={props.updateCoverImg}\n                              />\n                      ))}\n                      </div>\n                </div>\n          );\n\n     } else {\n\n          return (\n              <div className=\"recently-added-to-read-area nothing-yet\">\n                    <p>Time to <a href=\"/bookshelf/#search\">add more books</a> to your shelf!</p>\n              </div>\n        );\n\n     }\n}\n\nexport default RecentlyAddedToRead;\n","import React from 'react';\nimport BookCard from './BookCard';\n\nfunction RecentlyAddedAlreadyRead(props) {\n\n     const booksAlreadyRead = props.booksAlreadyRead;\n     let orderedBooks = null;\n     // console.log(booksToRead);\n     // console.log(booksToRead.length);\n\n      if( booksAlreadyRead !== undefined && booksAlreadyRead.length !== 0 ) {\n\n           // New sorting\n           orderedBooks = [...booksAlreadyRead].sort(function (a, b) {\n\n                // If the first item has a higher number, move it down\n                // If the first item has a lower number, move it up\n                if (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                if (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                // If the count number is the same between both items, sort alphabetically\n                // If the first item comes first in the alphabet, move it up\n                // Otherwise move it down\n                if (a.volumeInfo.title > b.volumeInfo.title) return 1;\n                if (a.volumeInfo.title < b.volumeInfo.title) return -1;\n\n           });\n\n           let orderedBooksToPublish = orderedBooks.slice(0, 4);\n\n            return (\n                <div className=\"recently-added-already-read-area\">\n                <h2 className=\"section-title\">Just Finished</h2>\n                         <div className=\"results-grid four-col\">\n                        {orderedBooksToPublish.map((book, index) => (\n                             <BookCard\n                                      key={book.id}\n                                      book={book}\n                                      editBook={props.editBook}\n                                      moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                                      removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                                      addNewImagesAlreadyRead={props.addNewImagesAlreadyRead}\n                                      alreadyRead={true}\n                                      settingsFont={props.settingsFont}\n                                      settingsColor={props.settingsColor}\n                                      updateCoverImg={props.updateCoverImg}\n                              />\n                      ))}\n                      </div>\n                </div>\n          );\n\n     } else {\n\n          return (\n              <div className=\"recently-added-already-read-area nothing-yet\">\n              </div>\n        );\n\n     }\n}\n\nexport default RecentlyAddedAlreadyRead;\n","import React from 'react';\nimport RecentlyAddedToRead from './RecentlyAddedToRead';\nimport RecentlyAddedAlreadyRead from './RecentlyAddedAlreadyRead';\n\n\n/// This page is once you've already logged in\n\nfunction Landing(props) {\n\n  return (\n    <div className=\"landing-page-area single-page\">\n      { props.notification &&\n           <div className=\"notification-area\">{props.notification}</div>\n      }\n      <RecentlyAddedToRead\n          booksToRead={props.booksToRead}\n          editBook={props.editBook}\n          moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n          removeBookFromToRead={props.removeBookFromToRead}\n          addNewImagesToRead={props.addNewImagesToRead}\n          settingsFont={props.settingsFont}\n          settingsColor={props.settingsColor}\n          updateCoverImg={props.updateCoverImg}\n      />\n      <RecentlyAddedAlreadyRead\n          booksAlreadyRead={props.booksAlreadyRead}\n          editBook={props.editBook}\n          removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n          addNewImagesAlreadyRead={props.addNewImagesAlreadyRead}\n          settingsFont={props.settingsFont}\n          settingsColor={props.settingsColor}\n          updateCoverImg={props.updateCoverImg}\n      />\n    </div>\n  );\n}\n\nexport default Landing;\n","import React from \"react\";\nimport Label from \"./Label.js\";\n\nconst Input = (props) => (\n  <div className=\"form-group\">\n    <input className=\"form-control\" {...props}/>\n  </div>\n)\n\nexport default Input;\n\n// make sure the <Input> component uses a closing tag rather than being self-closing so you can put the label text in the {props.children} location\n\n//  You will also need props for the 'for' and 'id' properties (labeled above as 'props.control'), as well as the placeholder.\n","import axios from \"axios\";\n\nexport default {\n  // Searches the NYT books according to the search criteria given in the form\n  getNewBooks: function(title) {\n    return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + title + \"&maxResults=36\" + \"&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU\");\n  },\n  // Gets saved Books\n  getSavedBooks: function() {\n    return axios.get(\"/api/books/\");\n  },\n  // Deletes the Book with the given id\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a Book to the database\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  }\n};\n","import React from 'react';\nimport BookCard from './BookCard.js';\n\nclass Results extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          books: [],\n          noResults: false\n       };\n\n     }\n\n     componentDidMount() {\n          console.log(this.props.location);\n          const data = this.props.location.data;\n          console.log(data);\n          if (data && data.results.length > 0) {\n\n           this.setState({\n             books: data.results.filter((value, index) => index < 40),\n           });\n         } else {\n           this.setState({\n             noResults: true\n           });\n         }\n     }\n\n     render() {\n\n          console.log(this.state.books);\n          console.log(this.props.addBookAlreadyRead);\n          console.log(this.props.test);\n\n       return (\n         <div className=\"results-page-area single-page\">\n         { this.props.notification &&\n              <div className=\"notification-area\">{this.props.notification}</div>\n         }\n           <h1>Search Results</h1>\n\n           <div className=\"results-grid\">\n           {this.state.books.map((book, index) => (\n                <BookCard\n                         key={book.id}\n                         book={book}\n                         searchResult={true}\n                         addBookAlreadyRead={this.props.addBookAlreadyRead}\n                         addBookToRead={this.props.addBookToRead}\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                    />\n          ))}\n          </div>\n         </div>\n       );\n\n     }\n}\n\nexport default Results;\n","import React from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport Input from './Input.js';\nimport API from \"../utils/API\";\nimport Results from './Results.js';\n\nclass Search extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          title: \"\",\n          toResults: false,\n          results: []\n       };\n\n     }\n\n     componentDidMount() {\n          console.log(\"Search mounted\");\n     }\n\n     handleInputChange = event => {\n          const { name, value } = event.target;\n               this.setState({\n                    [name]: value\n               });\n     };\n\n     handleFormSubmit = event => {\n          event.preventDefault();\n          if (this.state.title) {\n\n               const title = this.state.title.trim();\n               console.log(title);\n\n               API.getNewBooks(title)\n                  .then(res => {\n\n                    console.log(res.data.items);\n\n                    this.setState({\n                      toResults: true,\n                      results: res.data.items\n                    });\n                  })\n                  .catch(err => console.log(err));\n              }\n     }\n\n\nrender() {\n\n          console.log(this.state.title);\n\n          if (this.state.toResults) {\n           return <Redirect to={{\n             pathname: \"/results\",\n             data: { results: this.state.results }\n           }} />\n         }\n\n       return (\n         <div className=\"search-page-area single-page\">\n           <h1>Search for Books</h1>\n           <form id=\"book-title-search\">\n                 <Input\n                   value={this.state.title}\n                   onChange={this.handleInputChange}\n                   name=\"title\"\n                   label=\"Book Title\"\n                   placeholder=\"Search for a book title or author...\"\n                 />\n                 <button\n                   onClick={this.handleFormSubmit}\n                   className=\"btn btn-info\"\n                 >\n                   Find It\n                 </button>\n          </form>\n         </div>\n       );\n\n }\n\n}\n\nexport default Search;\n","import React from 'react';\n\nconst Logout = (props) => {\n\n     return (\n          <button type=\"submit\" onClick={props.logOutUser} className=\"settings-button\">Log Out</button>\n     );\n\n}\n\nexport default Logout;\n","import React from 'react';\n\nconst ChangePassword = (props) => {\n\n     return (\n          <button type=\"submit\" onClick={props.resetPassword} className=\"settings-button\">Change Password via Email Link</button>\n     );\n\n}\n\nexport default ChangePassword;\n","import React from 'react';\n\nconst DeleteAccount = (props) => {\n\n     const nowDeleteAccount = (event) => {\n          props.deleteAccount();\n     }\n\n     return (\n          <button\n               className=\"settings-button delete-account\"\n               type=\"submit\"\n               onClick={e =>\n            window.confirm(\n              \"Are you sure you want to permanelty delete your account? All of your information will be removed. You cannot undo this action.\"\n         ) && nowDeleteAccount()\n          }>Delete My Account</button>\n     );\n\n}\n\nexport default DeleteAccount;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectThemeColor extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setColor = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsColor(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsColor = this.props.settingsColor;\n          console.log(settingsColor);\n\n               var myColorToPublish = null;\n               if( settingsColor === 'default' ) { myColorToPublish = 'Default (Dark Blue)'; }\n               if( settingsColor === 'gray' ) { myColorToPublish = 'Gray'; }\n               if( settingsColor === 'green' ) { myColorToPublish = 'Green'; }\n               if( settingsColor === 'orange' ) { myColorToPublish = 'Orange'; }\n               if( settingsColor === 'purple' ) { myColorToPublish = 'Purple'; }\n\n          let defaultColorPublish = {\n               value: settingsColor,\n               label: myColorToPublish\n          };\n          if( settingsColor === null ) { defaultColorPublish = null; }\n\n          const colorOptions = [\n               { value: 'default', label: 'Default (Dark Blue)' },\n               { value: 'gray', label: 'Gray' },\n               { value: 'green', label: 'Green' },\n               { value: 'orange', label: 'Orange' },\n               { value: 'purple', label: 'Purple' },\n          ];\n\n          if( defaultColorPublish ) {\n\n               return (\n                 <Select\n                    placeholder='Select Color Theme'\n                    options={colorOptions}\n                    defaultValue={defaultColorPublish}\n                    isSearchable\n                    onChange={this.setColor}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select Color Theme'\n                    options={colorOptions}\n                    isSearchable\n                    onChange={this.setColor}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectThemeColor;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectThemeFont extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setFont = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsFont(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsColor = this.props.settingsFont;\n          console.log(settingsColor);\n\n               var myColorToPublish = null;\n               if( settingsColor === 'default' ) { myColorToPublish = 'Default'; }\n               if( settingsColor === 'handwritten' ) { myColorToPublish = 'Handwritten'; }\n               if( settingsColor === 'typewriter' ) { myColorToPublish = 'Typewriter'; }\n               if( settingsColor === 'sans' ) { myColorToPublish = 'Sans Serif'; }\n               if( settingsColor === 'serif' ) { myColorToPublish = 'Serif'; }\n\n          let defaultColorPublish = {\n               value: settingsColor,\n               label: myColorToPublish\n          };\n          if( settingsColor === null ) { defaultColorPublish = null; }\n\n          const colorOptions = [\n               { value: 'default', label: 'Default' },\n               { value: 'handwritten', label: 'Handwritten' },\n               { value: 'typewriter', label: 'Typewriter' },\n               { value: 'sans', label: 'Sans Serif' },\n               { value: 'serif', label: 'Serif' },\n          ];\n\n          if( defaultColorPublish ) {\n\n               return (\n                 <Select\n                    placeholder='Select Font'\n                    options={colorOptions}\n                    defaultValue={defaultColorPublish}\n                    isSearchable\n                    onChange={this.setFont}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select Font'\n                    options={colorOptions}\n                    isSearchable\n                    onChange={this.setFont}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectThemeFont;\n","import React from 'react';\nimport Logout from './Logout.js';\nimport ChangePassword from './ChangePassword.js';\nimport DeleteAccount from './DeleteAccount.js';\nimport SelectThemeColor from './SelectThemeColor.js';\nimport SelectThemeFont from './SelectThemeFont.js';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\nclass Settings extends React.Component {\n\n\n     constructor(props) {\n          super(props);\n\n          this.state = {\n              emailedResetLink: false,\n            };\n\n     }\n\n\n\n     resetPassword = () => {\n\n          var auth = firebaseApp.auth();\n          const emailAddress = this.props.loggedInEmail;\n\n          auth.sendPasswordResetEmail(emailAddress).then(function() {\n            // Email sent.\n            console.log(\"Reset password email sent\");\n\n          }).catch(function(error) {\n            // An error happened.\n            console.log(\"ERROR: could not send reset password email\");\n          });\n\n          this.setState({ emailedResetLink: true });\n\n     }\n\n\n     deleteAccount = () => {\n\n          var user = firebaseApp.auth().currentUser;\n\n          user.delete().then(function() {\n            // User deleted.\n            console.log(\"Current User PERMANENTLY DELETED\");\n          }).catch(function(error) {\n            // An error happened.\n            console.log(\"ERROR: could not delete current user\");\n          });\n\n          this.props.permanentlyDeleteUserAndInfo(user);\n\n     }\n\n\n     render() {\n\n          console.log(this.props.settingsFont);\n\n\n       return (\n         <div className=\"settings-page-area single-page\">\n           <h1>Settings</h1>\n           <div className=\"color-font-area\">\n                <div className=\"select-color-area\">\n                    <h4>Select Color</h4>\n                     <SelectThemeColor\n                         settingsColor={this.props.settingsColor}\n                         changeSettingsColor={this.props.changeSettingsColor}\n                     />\n                </div>\n                <div className=\"select-font-area\">\n                    <h4>Select Font</h4>\n                     <SelectThemeFont\n                         settingsFont={this.props.settingsFont}\n                         changeSettingsFont={this.props.changeSettingsFont}\n                     />\n                </div>\n           </div>\n           <p>Currently logged in as: {this.props.loggedInEmail}</p>\n           <div className=\"settings-action-buttons-area\">\n                <Logout logOutUser={this.props.logOutUser} />\n                <ChangePassword resetPassword={this.resetPassword} />\n                <DeleteAccount deleteAccount={this.deleteAccount} />\n           </div>\n         </div>\n       );\n     }\n\n\n}\n\nexport default Settings;\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div className=\"settings-page-area\">\n      <h1>Not Found - please go back to the homepage.</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectToReadView extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setView = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeToReadView(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const defaultView = this.props.defaultView;\n          console.log(defaultView);\n\n               var myViewToPublish = null;\n               if( defaultView === 'date' ) { myViewToPublish = 'Date (Recently Added)'; }\n               if( defaultView === 'alphabetical' ) { myViewToPublish = 'Alphabetical'; }\n\n          let defaultViewPublish = {\n               value: defaultView,\n               label: myViewToPublish\n          };\n          if( defaultView === null ) { defaultViewPublish = null; }\n          //console.log(defaultView);\n\n          const ratingOptions = [\n               { value: 'alphabetical', label: 'Alphabetical' },\n               { value: 'date', label: 'Date (Recently Added)' },\n          ];\n\n          if( defaultView ) {\n\n               return (\n                 <Select\n                    placeholder='Alphabetical'\n                    options={ratingOptions}\n                    defaultValue={defaultViewPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Alphabetical'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectToReadView;\n","import React from 'react';\nimport BookCard from './BookCard.js';\nimport SelectToReadView from './SelectToReadView.js';\n\nvar shortid = require('shortid');\n\nclass SavedForLater extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             booksToRead: [],\n             booksToReadView: '',\n      };\n    }\n\n\n\n\n    render() {\n\n         const booksToRead = this.props.booksToRead;\n         console.log(this.props);\n         console.log(booksToRead);\n         //console.log(booksToRead.length);\n\n         let orderedBooks = booksToRead;\n\n               // order these books!\n               if( this.props.booksToReadView === 'alphabetical') {\n                    orderedBooks = [...booksToRead].sort((a, b) => (a.title > b.title) ? 1 : -1);\n               }\n\n               if( this.props.booksToReadView === 'date') {\n\n                         // New sorting\n                         orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                         \t// If the first item has a higher number, move it down\n                         \t// If the first item has a lower number, move it up\n                         \tif (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                         \tif (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                         \t// If the count number is the same between both items, sort alphabetically\n                         \t// If the first item comes first in the alphabet, move it up\n                         \t// Otherwise move it down\n                         \tif (a.title > b.title) return 1;\n               \t          if (a.title < b.title) return -1;\n\n                         });\n\n               }\n\n               if( this.props.booksToReadView === 'rating') {\n\n                         // New sorting\n                         orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                         \t// If the first item has a higher number, move it down\n                         \t// If the first item has a lower number, move it up\n                         \tif (a.bookshelfRating > b.bookshelfRating) return -1;\n                         \tif (a.bookshelfRating < b.bookshelfRating) return 1;\n\n                         \t// If the count number is the same between both items, sort alphabetically\n                         \t// If the first item comes first in the alphabet, move it up\n                         \t// Otherwise move it down\n                         \tif (a.title > b.title) return 1;\n               \t          if (a.title < b.title) return -1;\n\n                         });\n\n               }\n\n\n\n       if( booksToRead === undefined || booksToRead.length === 0  ) {\n\n                return(\n                <div className=\"saved-for-later-area single-page\">\n                  <h1>To Read</h1>\n                       <p className=\"no-books-yet-message\">You don't have any books saved for later. But you can <a href=\"/search\">run a search</a> and start adding books!</p>\n                  <div>{this.props.loggedInEmail}</div>\n                </div>\n                );\n\n           } else {\n\n    return(\n    <div className=\"saved-for-later-area single-page\">\n      <h1>To Read</h1>\n      { this.props.notification &&\n           <div className=\"notification-area\">{this.props.notification}</div>\n      }\n           <div className=\"view-type\">\n                     <div className=\"viewer-label\">View Your Books by: </div>\n                     <div className=\"viewer-selector-area\">\n                          <SelectToReadView\n                               defaultView={this.props.booksToReadView}\n                               changeToReadView={this.props.changeToReadView}\n                          />\n                </div>\n           </div>\n           <div className=\"results-grid\">\n                {orderedBooks.map((book, index) => (\n                     <BookCard\n                              key={book.id}\n                              book={book}\n                              editBook={this.props.editBook}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              savedForLater={true}\n                              toRead={true}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                         />\n              ))}\n         </div>\n    </div>\n    );\n\n     }\n\n    }\n\n}\n\n\nexport default SavedForLater;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectAlreadyReadView extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setView = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeAlreadyReadView(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const defaultView = this.props.defaultView;\n          console.log(defaultView);\n\n               var myViewToPublish = null;\n               if( defaultView === 'alphabetical' ) { myViewToPublish = 'Alphabetical'; }\n               if( defaultView === 'rating' ) { myViewToPublish = 'Rating (High to Low)'; }\n               if( defaultView === 'date' ) { myViewToPublish = 'Date (Recently Completed)'; }\n\n          let defaultViewPublish = {\n               value: defaultView,\n               label: myViewToPublish\n          };\n          if( defaultView === null ) { defaultViewPublish = null; }\n          //console.log(defaultView);\n\n          const ratingOptions = [\n               { value: 'alphabetical', label: 'Alphabetical' },\n               { value: 'rating', label: 'Rating (High to Low)' },\n               { value: 'date', label: 'Date (Recently Completed)' },\n          ];\n\n          if( defaultView ) {\n\n               return (\n                 <Select\n                    placeholder='Rating'\n                    options={ratingOptions}\n                    defaultValue={defaultViewPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Rating'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectAlreadyReadView;\n","import React from 'react';\nimport BookCard from './BookCard.js';\nimport SelectAlreadyReadView from './SelectAlreadyReadView';\n\nvar shortid = require('shortid');\n\nclass PreviouslyRead extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             // booksAlreadyRead: [],\n             // booksAlreadyReadView: '',\n      };\n    }\n\n\n\n\n    render() {\n\n         const booksAlreadyRead = this.props.booksAlreadyRead;\n         console.log(booksAlreadyRead);\n\n         console.log(this.props.booksAlreadyReadView);\n         let orderedBooks = null;\n\n               // order these books!\n               if( this.props.booksAlreadyReadView === 'alphabetical') {\n                    orderedBooks = [...booksAlreadyRead].sort((a, b) => (a.title > b.title) ? 1 : -1);\n\n               }\n\n               if( this.props.booksAlreadyReadView === 'date') {\n\n                         // New sorting\n                         orderedBooks = [...booksAlreadyRead].sort(function (a, b) {\n\n                         \t// If the first item has a higher number, move it down\n                         \t// If the first item has a lower number, move it up\n                         \tif (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                         \tif (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                         \t// If the count number is the same between both items, sort alphabetically\n                         \t// If the first item comes first in the alphabet, move it up\n                         \t// Otherwise move it down\n                         \tif (a.title > b.title) return 1;\n               \t          if (a.title < b.title) return -1;\n\n                         });\n\n               }\n\n               if( this.props.booksAlreadyReadView === 'rating') {\n\n                         // New sorting\n                         orderedBooks = [...booksAlreadyRead].sort(function (a, b) {\n\n                         \t// If the first item has a higher number, move it down\n                         \t// If the first item has a lower number, move it up\n                         \tif (a.bookshelfRating > b.bookshelfRating) return -1;\n                         \tif (a.bookshelfRating < b.bookshelfRating) return 1;\n\n                         \t// If the count number is the same between both items, sort alphabetically\n                         \t// If the first item comes first in the alphabet, move it up\n                         \t// Otherwise move it down\n                         \tif (a.title > b.title) return 1;\n               \t          if (a.title < b.title) return -1;\n\n                         });\n\n               }\n\n\n\n\n\n         if( booksAlreadyRead === undefined || booksAlreadyRead.length === 0 ) {\n\n                  return(\n                  <div className=\"previously-read-area single-page\">\n                    <h1>Already Read</h1>\n                         <p className=\"no-books-yet-message\">You haven't recorded any books yet. But you can <a href=\"/search\">run a search</a> and start adding books!</p>\n                    <div>{this.props.loggedInEmail}</div>\n                  </div>\n                  );\n\n             } else {\n\n         return(\n         <div className=\"previously-read-area single-page\">\n           <h1>Already Read</h1>\n               <div className=\"view-type\">\n                         <div className=\"viewer-label\">View Your Books by: </div>\n                         <div className=\"viewer-selector-area\">\n                              <SelectAlreadyReadView\n                                   defaultView={this.props.booksAlreadyReadView}\n                                   changeAlreadyReadView={this.props.changeAlreadyReadView}\n                              />\n                    </div>\n               </div>\n                <div className=\"results-grid\">\n                {orderedBooks.map((book, index) => (\n                     <BookCard\n                              key={book.id}\n                              book={book}\n                              editBook={this.props.editBook}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              alreadyRead={true}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                         />\n              ))}\n              </div>\n         </div>\n         );\n\n         }\n\n    }\n\n}\n\n\nexport default PreviouslyRead;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { firebaseApp } from '../base';\n\nclass Register extends React.Component {\n     constructor(props) {\n          super(props);\n          this.state = {\n            email: '',\n            password: '',\n            error: null,\n          };\n\n          console.log(this.props);\n     }\n\n\nhandleInputChange = (event) => {\n   this.setState({ [event.target.name]: event.target.value });\n   console.log(event.target.value);\n };\n\nhandleSubmit = (event) => {\n   event.preventDefault();\n   console.log('Registration submitted');\n   const { email, password } = this.state;\n   console.log(this.state);\nfirebaseApp\n     .auth()\n     .createUserWithEmailAndPassword(email, password)\n     .then((user) => {\n          //console.log(user);\n          //this.props.history.push('/');\n\n          // add new user to App-->state and Firebase\n          this.props.registerNewUser(user);\n     })\n     .catch((error) => {\n       this.setState({ error: error });\n     });\n };\n\n     render() {\n\n          //const classes = useStyles();\n          const { email, password, error } = this.state;\n          //console.log(this.props.registerNewUser);\n\n          return (\n               <div className=\"login-form-area\">\n               <p>Enter your information below to register for your free Bookshelf:</p>\n               {error ? (\n                     <div>{error.message}</div>\n               ) : null}\n\n               <form id=\"registration-form\" onSubmit={this.handleSubmit}>\n                    <div className=\"registration-area\">\n                         <input\n                             type=\"text\"\n                             id=\"login-form-email\"\n                             name=\"email\"\n                             label=\"Email\"\n                             required\n                             value={this.email}\n                             onChange={this.handleInputChange}\n                             />\n                        </div>\n                        <div className=\"registration-area\">\n                             <input\n                                 type=\"text\"\n                                 id=\"login-form-password\"\n                                 name=\"password\"\n                                 label=\"Password\"\n                                 required\n                                 placeholder=\"Password\"\n                                 value={this.password}\n                                onChange={this.handleInputChange}\n                                 />\n                       </div>\n                       <button type=\"submit\">Register Now</button>\n                       </form>\n             </div>\n          );\n\n     }\n\n}\n\nexport default Register;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Landing from './Landing.js';\nimport Search from './Search.js';\nimport Settings from './Settings.js';\nimport NotFound from './NotFound.js';\nimport SavedForLater from './SavedForLater.js';\nimport PreviouslyRead from './PreviouslyRead.js';\nimport Results from './Results.js';\nimport Register from './Register.js';\n\nclass Router extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n       };\n\n     }\n\n     render() {\n\n          console.log(this.props);\n          console.log(this.props.books);\n\n          return(\n\n               <div className={\"clb-grail-body color-\" + this.props.settingsColor + \" font-\" + this.props.settingsFont}>\n     <HashRouter basename=\"/\">\n          <Switch>\n               <Route exact path=\"/\"\n                    component={() =>\n                         <Landing\n                              booksToRead={this.props.booksToRead}\n                              booksAlreadyRead={this.props.booksAlreadyRead}\n                              editBook={this.props.editBook}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              notification={this.props.notification}\n                              updateCoverImg={this.props.updateCoverImg}\n                         />}\n               />\n               <Route exact path=\"/search\" component={Search} />\n               <Route exact path=\"/results\"\n                    render={(props) => <Results {...props} test={true}\n                                                  addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                                  addBookToRead={this.props.addBookToRead}\n                                                  settingsFont={this.props.settingsFont}\n                                                  settingsColor={this.props.settingsColor}\n                                                  notification={this.props.notification}\n                                             />}\n               />\n\n               <Route exact path=\"/saved\"\n                    component={() =>\n                         <SavedForLater\n                              booksToRead={this.props.booksToRead}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              editBook={this.props.editBookToRead}\n                              booksToReadView={this.props.booksToReadView}\n                              changeToReadView={this.props.changeToReadView}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              notification={this.props.notification}\n                              updateCoverImg={this.props.updateCoverImg}\n                         />}\n               />\n\n               <Route exact path=\"/read\"\n                    component={() =>\n                         <PreviouslyRead\n                              booksAlreadyRead={this.props.booksAlreadyRead}\n                              booksAlreadyReadView={this.props.booksAlreadyReadView}\n                              changeAlreadyReadView={this.props.changeAlreadyReadView}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              editBook={this.props.editBook}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              updateCoverImg={this.props.updateCoverImg}\n                         />}\n               />\n               <Route exact path=\"/settings\"\n                    component={() =>\n                         <Settings\n                              logOutUser={this.props.logOutUser}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              resetPassword={this.props.resetPassword}\n                              permanentlyDeleteUserAndInfo={this.props.permanentlyDeleteUserAndInfo}\n                              settingsColor={this.props.settingsColor}\n                              changeSettingsColor={this.props.changeSettingsColor}\n                              settingsFont={this.props.settingsFont}\n                              changeSettingsFont={this.props.changeSettingsFont}\n                         />}\n               />\n               <Route exact path=\"/register\"\n                    component={() =>\n                         <Register\n                              logOutUser={this.props.logOutUser}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                         />}\n               />\n               <Route component={NotFound} />\n          </Switch>\n     </HashRouter>\n          </div>);\n\n     }\n\n}\n\nexport default Router;\n","import React from 'react';\nimport Router from './Router.js';\nimport Header from './Header.js';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\n\n\nvar shortid = require('shortid');\nconst image2base64 = require('image-to-base64');\n\nclass BookManager extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             books: [],\n             settings: {\n                         color: 'default',\n                         font: 'default',\n                         sortViewToRead: 'alphabetical',\n                         sortViewAlreadyRead: 'alphabetical',\n                         bookSize: 'default',\n                         genres: [\n                              'Fiction',\n                              'Nonfiction',\n                              'Memoir',\n                              'Children',\n                              'Cooking',\n                              'Historical Fiction',\n                              'Mystery',\n                              'Science Fiction',\n                              'Young Adult',\n                         ],\n                         customFields: [],\n                    },\n             notification: null\n    }\n\n}\n\n\n    componentDidMount(){\n\n       console.log(\"componentDidMount\");\n       const loggedInID = this.props.loggedInID;\n       console.log(\"loggedInID:\" + loggedInID);\n\n\n       // Firebase Connections\n\n       base.syncState(`${loggedInID}/books`, {\n         context: this,\n         state: 'books',\n         asArray: true\n       });\n\n       base.syncState(`${loggedInID}/settings`, {\n         context: this,\n         state: 'settings',\n         asArray: false\n       });\n\n\n       // Updating theme data & saving to localStorage\n       // Color\n       const localStorageKeyColor = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n       const settingsColorLocal = localStorage.getItem(localStorageKeyColor);\n\n            base.fetch(`${loggedInID}/settings/color`, {\n              context: this,\n              asArray: false,\n              then(data){\n                if( settingsColorLocal !== data ) {\n                     console.log(\"Setting updated color into localStorage: \" + data);\n                     localStorage.setItem(localStorageKeyColor, data);\n                }\n              }\n            });\n\n\n       // Updating theme data & saving to localStorage\n       // Font\n       const localStorageKeyFont = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n       const settingsFontLocal = localStorage.getItem(localStorageKeyFont);\n\n            base.fetch(`${loggedInID}/settings/font`, {\n              context: this,\n              asArray: false,\n              then(data){\n                   if( settingsFontLocal !== data ) {\n                       console.log(\"Setting updated font into localStorage: \" + data);\n                       localStorage.setItem(localStorageKeyFont, data);\n                  }\n              }\n            });\n\n  }\n\n\n     // Functions to maniuplate state / books\n     addBookAlreadyRead = (bookObj) => {\n\n         // set my fields for books in DB\n         const newBook = {};\n\n         this.fetchCoverImage(bookObj);\n\n         let subtitle = bookObj.volumeInfo.subtitle;\n         if( subtitle === undefined ) { subtitle = null; }\n\n         newBook.id = bookObj.id;\n         newBook.title = bookObj.volumeInfo.title;\n         newBook.subtitle = subtitle;\n         newBook.authors = bookObj.volumeInfo.authors;\n         newBook.bookshelfTimestamp = Date.now();\n         newBook.bookshelfRating = 0;\n         newBook.notes = [];\n         newBook.coverImg = null;\n         newBook.alreadyRead = true;\n         newBook.googleLink = bookObj.selfLink;\n         newBook.description = bookObj.volumeInfo.description;\n         newBook.publisher = bookObj.volumeInfo.publisher;\n         newBook.publishedDate = bookObj.volumeInfo.publishedDate\n         newBook.pageCount = bookObj.volumeInfo.pageCount;\n         newBook.genre = null;\n\n         console.log(newBook);\n\n         let bookTitle = bookObj.volumeInfo.title;\n         this.setState(prevState => ({\n            books: [...prevState.books, newBook],\n            notification: 'You added ' + bookTitle + ' to your ALREADY READ shelf'\n           }));\n\n           this.startNotificationTimer();\n\n       }\n\n       // New on March 18, fixes many previous cover image issues\n       fetchCoverImage = (bookObj) => {\n            console.log(\"FETCH COVER IMAGE\");\n            console.log(bookObj);\n            const selfLink = bookObj.selfLink;\n            let coverImageURL = bookObj.volumeInfo.imageLinks.smallThumbnail;\n\n            // Get the details straight from Google, including larger image sizes\n                 fetch(selfLink)\n                 .then(res => res.json())\n                 .then((originalBookJSON) => {\n\n                   console.log('fetchCoverImage CONNECTED');\n                   console.log(originalBookJSON);\n                   console.log(originalBookJSON.volumeInfo.imageLinks);\n\n                   if( originalBookJSON.volumeInfo.imageLinks.thumbnail !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.thumbnail + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                   if( originalBookJSON.volumeInfo.imageLinks.small !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.small + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                   if( originalBookJSON.volumeInfo.imageLinks.medium !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.medium + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                   if( originalBookJSON.volumeInfo.imageLinks.large !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.large + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                   if( originalBookJSON.volumeInfo.imageLinks.extraLarge !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.extraLarge + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n\n                   console.log(selfLink);\n                   console.log(\"FINAL IMAGE: \" + coverImageURL);\n\n                   // update the book object with the new thumbnail cover image\n                 const bookID = bookObj.id;\n                 const clbCopyBookState = [...this.state.books];\n                 const getBookObjInState = clbCopyBookState.filter(obj => {\n                   return obj.id === bookID\n                 });\n\n                 const bookToUpdate = getBookObjInState[0];\n                 console.log(bookToUpdate);\n                 bookToUpdate.coverImg = coverImageURL;\n                 console.log(bookToUpdate);\n\n                 // REMOVE BOOK\n                 let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n                 clbCopyBookState.splice(index, 1);\n                 this.setState({ books: clbCopyBookState });\n\n                 // ADD Book with URL\n                 this.setState(prevState => ({\n                    books: [...prevState.books, bookToUpdate],\n                   }));\n\n         });\n\n\n\n       }\n\n\n       addBookToRead = (bookObj) => {\n            // set my fields for books in DB\n          const newBook = {};\n\n          this.fetchCoverImage(bookObj);\n\n          let subtitle = bookObj.volumeInfo.subtitle;\n          if( subtitle === undefined ) { subtitle = null; }\n\n          newBook.id = bookObj.id;\n          newBook.title = bookObj.volumeInfo.title;\n          newBook.subtitle = subtitle;\n          newBook.authors = bookObj.volumeInfo.authors;\n          newBook.bookshelfTimestamp = Date.now();\n          newBook.bookshelfRating = 0;\n          newBook.notes = [];\n          newBook.coverImg = null;\n          newBook.alreadyRead = false;\n          newBook.googleLink = bookObj.selfLink;\n          newBook.description = bookObj.volumeInfo.description;\n          newBook.publisher = bookObj.volumeInfo.publisher;\n          newBook.publishedDate = bookObj.volumeInfo.publishedDate\n          newBook.pageCount = bookObj.volumeInfo.pageCount;\n          newBook.genre = null;\n\n          console.log(newBook);\n          this.setState(prevState => ({\n             books: [...prevState.books, newBook],\n             notification: 'You added ' + newBook.title + ' to your TO READ shelf'\n            }));\n\n            this.startNotificationTimer();\n\n        }\n\n\n        moveBooktoAlreadyRead = (bookObj) => {\n\n           console.log(bookObj);\n\n           // get the book object\n           const bookID = bookObj.id;\n           const bookTitle = bookObj.title;\n           const clbCopyBookState = [...this.state.books];\n           const getBookObjInState = clbCopyBookState.filter(obj => {\n            return obj.id === bookID\n           });\n           console.log(getBookObjInState);\n\n           const index = clbCopyBookState.findIndex(obj => {\n            return obj.id === bookID\n           });\n           console.log(index);\n\n           clbCopyBookState[index].alreadyRead = true;\n           this.setState({ books: this.state.books });\n\n         }\n\n\n       removeBookFromAlreadyRead = (bookObj) => {\n          console.log(\"Removed: \" + JSON.stringify(bookObj));\n          let bookID = bookObj.id;\n          let clbCopyBookState = [...this.state.books];\n          let getBookObjInState = clbCopyBookState.filter(obj => {\n           return obj.id === bookID\n          });\n\n          let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n          clbCopyBookState.splice(index, 1);\n\n          this.setState({ books: clbCopyBookState });\n\n        }\n\n\n        removeBookFromToRead = (bookObj) => {\n           console.log(\"Removed: \" + JSON.stringify(bookObj));\n           let bookID = bookObj.id;\n           let clbCopyBookState = [...this.state.books];\n           let getBookObjInState = clbCopyBookState.filter(obj => {\n            return obj.id === bookID\n           });\n\n           let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n           clbCopyBookState.splice(index, 1);\n\n           this.setState({ books: clbCopyBookState });\n\n         }\n\n\n         editBook = (bookObj) => {\n            console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               let bookID = bookObj.id;\n               let clbCopyBookState = [...this.state.books];\n               let getBookObjInState = clbCopyBookState.filter(obj => {\n                 return obj.id === bookID\n               });\n               let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               let ids = [...this.state.books];     // create the copy of state array\n               ids[index] = bookObj;                  //new value\n               console.log(ids[index]);\n\n               this.setState({ books: ids });            //update the value\n\n          }\n\n          updateCoverImg = ( bookObj, bookCoverURL ) => {\n               console.log(bookObj);\n               console.log(bookCoverURL);\n\n               console.log(bookObj);\n\n              //get the book object\n              const bookID = bookObj.id;\n              const bookTitle = bookObj.title;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n              console.log(getBookObjInState);\n\n              getBookObjInState.coverImg = bookCoverURL;\n              // this.setState(prevState => ({\n              //   books: [...prevState.books, getBookObjInState],\n              //   notification: 'You changed the book cover for ' + bookTitle\n              //  }));\n\n          }\n\n\n\n          editBookToRead = (bookObj) => {\n            console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               let bookID = bookObj.id;\n               let clbCopyBookState = [...this.state.booksToRead];\n               let getBookObjInState = clbCopyBookState.filter(obj => {\n                 return obj.id === bookID\n               });\n               let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               let ids = [...this.state.booksToRead];     // create the copy of state array\n               ids[index] = bookObj;                  //new value\n               console.log(ids[index]);\n               this.setState({ booksToRead: ids });            //update the value\n\n          }\n\n\n\n          addNewImagesAlreadyRead = (bookObj) => {\n               console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n                  let bookID = bookObj.id;\n                  let clbCopyBookState = [...this.state.books];\n                  let getBookObjInState = clbCopyBookState.filter(obj => {\n                    return obj.id === bookID\n                  });\n                  let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n                  let ids = [...this.state.books];     // create the copy of state array\n                  if( bookObj.volumeInfo.imageLinks.large ) { ids[index].volumeInfo.imageLinks.large = bookObj.volumeInfo.imageLinks.large; } else { ids[index].volumeInfo.imageLinks.large = '' }                 //new value, image only\n                  if( bookObj.volumeInfo.imageLinks.medium ) { ids[index].volumeInfo.imageLinks.medium = bookObj.volumeInfo.imageLinks.medium; } else { ids[index].volumeInfo.imageLinks.medium = '' }\n                  if( bookObj.volumeInfo.imageLinks.small ) { ids[index].volumeInfo.imageLinks.small = bookObj.volumeInfo.imageLinks.small; } else { ids[index].volumeInfo.imageLinks.small = '' }\n                  if( bookObj.volumeInfo.imageLinks.smallThumbnail ) { ids[index].volumeInfo.imageLinks.smallThumbnail = bookObj.volumeInfo.imageLinks.smallThumbnail; } else { ids[index].volumeInfo.imageLinks.smallThumbnail = '' }\n                  if( bookObj.volumeInfo.imageLinks.thumbnail ) { ids[index].volumeInfo.imageLinks.thumbnail = bookObj.volumeInfo.imageLinks.thumbnail; } else { ids[index].volumeInfo.imageLinks.thumbnail = '' }\n                  console.log(ids[index]);\n                  this.setState({ booksAlreadyRead: ids });            //update the value\n          }\n\n\n          addNewImagesToRead = (bookObj) => {\n               // console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               //    let bookID = bookObj.id;\n               //    let clbCopyBookState = [...this.state.booksToRead];\n               //    let getBookObjInState = clbCopyBookState.filter(obj => {\n               //      return obj.id === bookID\n               //    });\n               //    let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               //    let ids = [...this.state.booksToRead];     // create the copy of state array\n               //    if( bookObj.volumeInfo.imageLinks.large ) { ids[index].volumeInfo.imageLinks.large = bookObj.volumeInfo.imageLinks.large; } else { ids[index].volumeInfo.imageLinks.large = ''; }               //new value, image only\n               //    if( bookObj.volumeInfo.imageLinks.medium ) { ids[index].volumeInfo.imageLinks.medium = bookObj.volumeInfo.imageLinks.medium; } else { ids[index].volumeInfo.imageLinks.medium = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.small ) { ids[index].volumeInfo.imageLinks.small = bookObj.volumeInfo.imageLinks.small; } else { ids[index].volumeInfo.imageLinks.small = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.smallThumbnail) { ids[index].volumeInfo.imageLinks.smallThumbnail = bookObj.volumeInfo.imageLinks.smallThumbnail; } else { ids[index].volumeInfo.imageLinks.smallThumbnail = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.thumbnail) { ids[index].volumeInfo.imageLinks.thumbnail = bookObj.volumeInfo.imageLinks.thumbnail; } else { ids[index].volumeInfo.imageLinks.thumbnail = ''; }\n               //    console.log(ids[index]);\n               //    this.setState({ booksToRead: ids });            //update the value\n          }\n\n\n          changeAlreadyReadView = (selectedOption) => {\n              console.log('CHANGE sortViewAlreadyRead');\n              console.log(selectedOption);\n\n              let sortViewAlreadyRead = 'alphabetical';\n              if(selectedOption) {\n                  if( selectedOption.value === 'rating' ) { sortViewAlreadyRead = 'rating'; }\n                  if( selectedOption.value === 'date' ) { sortViewAlreadyRead = 'date'; }\n              }\n\n              this.setState({ settings: {\n                         sortViewAlreadyRead: sortViewAlreadyRead\n                    }\n              });\n\n         }\n\n\n\n         changeToReadView = (selectedOption) => {\n\n            let newBookCardView = 'alphabetical';\n            if(selectedOption) {\n                 if( selectedOption.value === 'date' ) { newBookCardView = 'date'; }\n            }\n\n            //this.setState({ booksToReadView: newBookCardView });\n            this.setState({ settings: {\n                       sortViewToRead: newBookCardView\n                  }\n            });\n\n        }\n\n\n\n        changeSettingsColor = (selectedOption) => {\n\n           let newSettingsColor = 'default';\n           if(selectedOption) {\n                newSettingsColor = selectedOption.value;\n           }\n\n           this.setState({ settings: {\n                      color: newSettingsColor\n                 }\n           });\n\n           const localStorageKey = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n           localStorage.setItem(localStorageKey, newSettingsColor);\n\n       }\n\n\n       changeSettingsFont = (selectedOption) => {\n\n          let newSettingsFont = 'default';\n          if(selectedOption) {\n               newSettingsFont = selectedOption.value;\n          }\n\n          this.setState({ settings: {\n                     font: newSettingsFont\n               }\n          });\n\n          const localStorageKey = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n          localStorage.setItem(localStorageKey, newSettingsFont);\n\n     }\n\n\n     resetNotification = () => {\n          this.setState({ notification: null });\n     }\n\n     startNotificationTimer = () => {\n       if(!this.timerId){\n         this.timerId = setTimeout(()=>{\n           this.resetNotification();\n           console.log(\"startNotificationTimer - tick\");\n           console.log(this.timerId);\n      }, 6000);\n       }\n     }\n\n\n  render() {\n\n       const books = this.state.books;\n\n       const localStorageKeyColor = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n       const settingsColorLocal = localStorage.getItem(localStorageKeyColor);\n       const settingsColor = settingsColorLocal;\n\n       const localStorageKeyFont = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n       const settingsFontLocal = localStorage.getItem(localStorageKeyFont);\n       const settingsFont = settingsFontLocal;\n\n\n       // run filter operations to separate To Read from Already Read\n       const updatedBooksToRead = books.filter(book => book.alreadyRead === false);\n       const updatedBooksAlreadyRead = books.filter(book => book.alreadyRead === true);\n       console.log(updatedBooksToRead);\n       console.log(updatedBooksAlreadyRead);\n\n       return(\n            <>\n            <Header\n               settingsColor={settingsColor}\n               settingsFont={settingsFont}\n            />\n            <Router\n                 logOutUser={this.props.logOutUser}\n                 loggedInID={this.props.loggedInID}\n                 loggedInEmail={this.props.loggedInEmail}\n                 permanentlyDeleteUserAndInfo={this.props.permanentlyDeleteUserAndInfo}\n                 booksAlreadyRead={updatedBooksAlreadyRead}\n                 booksAlreadyReadView={this.state.settings.sortViewAlreadyRead}\n                 booksToReadView={this.state.settings.sortViewToRead}\n                 changeAlreadyReadView={this.changeAlreadyReadView}\n                 changeToReadView={this.changeToReadView}\n                 settingsColor={settingsColor}\n                 changeSettingsColor={this.changeSettingsColor}\n                 settingsFont={settingsFont}\n                 changeSettingsFont={this.changeSettingsFont}\n                 booksToRead={updatedBooksToRead}\n                 editBook={this.editBook}\n                 editBookToRead={this.editBookToRead}\n                 addBookAlreadyRead={this.addBookAlreadyRead}\n                 addBookToRead={this.addBookToRead}\n                 moveBooktoAlreadyRead={this.moveBooktoAlreadyRead}\n                 removeBookFromAlreadyRead={this.removeBookFromAlreadyRead}\n                 removeBookFromToRead={this.removeBookFromToRead}\n                 addNewImagesAlreadyRead={this.addNewImagesAlreadyRead}\n                 addNewImagesToRead={this.addNewImagesToRead}\n                 notification={this.state.notification}\n                 updateCoverImg={this.updateCoverImg}\n            />\n            <footer className={\"clb-bookshelf-footer color-\" + settingsColor + \" font-\" + settingsFont}>\n              Bookshelf &middot; <a href=\"https://github.com/tomatillodesign/bookshelf\" target=\"_blank\">Version 1.0</a> &middot; By Chris Liu-Beers, <a href=\"http://tomatillodesign.com\" target=\"_blank\">Tomatillo Design</a>\n            </footer>\n            </>\n       );\n\n       }\n\n  }\n\n\nexport default BookManager;\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\nclass LostPassword extends React.Component {\n\n     constructor(props) {\n       super(props);\n       this.state = {\n            showModal: false,\n            email: '',\n            sentEmail: false,\n       };\n\n       this.handleEmailChange = this.handleEmailChange.bind(this);\n       this.handleSubmit = this.handleSubmit.bind(this);\n\n     }\n\n     sentEmailAddress = null;\n\n     handleShow = () => this.setState({ showModal: true });\n     handleClose = () => (\n          this.setState({\n               showModal: false\n          })\n     );\n\n     handleEmailChange(event) {\n          this.setState({ email: event.target.value });\n     }\n\n     handleSubmit(event) {\n       console.log('Lost password, attempting to send email to: ' + this.state.email);\n       event.preventDefault();\n\n       //this.props.authenticateUser( this.state.email, this.state.password );\n\n           var auth = firebaseApp.auth();\n           const emailAddress = this.state.email;\n\n           auth.sendPasswordResetEmail(emailAddress).then(function() {\n             // Email sent.\n             console.log(\"Reset password email sent\");\n\n           }).catch(function(error) {\n             // An error happened.\n             console.log(\"ERROR: could not send reset password email\");\n             console.log(error);\n           });\n\n           this.sentEmailAddress = this.emailAdress;\n           this.setState({\n                sentEmail: true\n           });\n\n     }\n\n\n\n\n     render() {\n\n          const emailAdress = this.sentEmailAddress;\n\n          return (\n               <div className=\"lost-password-area\">\n                 <button onClick={this.handleShow} >\n                   Lost Password\n                 </button>\n\n                 <Modal show={this.state.showModal} onHide={this.handleClose} className=\"clb-single-beer-notes\">\n                   <Modal.Header closeButton>\n                     <Modal.Title>Lost Your Password</Modal.Title>\n                   </Modal.Header>\n                   <Modal.Body>\n                   { this.state.sentEmail !== true ? (\n                         <form className=\"lost-pw-area\" onSubmit={this.handleSubmit} >\n                          Enter your email below to reset your password:\n                          <div className=\"login-item\">\n                          <input\n                              type=\"text\"\n                              id=\"lost-pw-form-email\"\n                              name=\"email\"\n                              label=\"Email\"\n                              required\n                              onChange={this.handleEmailChange}\n                              />\n                              </div>\n                         <button type=\"submit\" id=\"lost-pw-submit\">Submit</button>\n                         </form> )\n                    : (\n                         <p className=\"sent-email-message\">If an account exists for {this.state.email}, we've sent an email that will allow you to reset your password. Thanks!</p>\n                    )}\n                   </Modal.Body>\n                 </Modal>\n               </div>\n\n          );\n\n     }\n\n}\n\nexport default LostPassword;\n","import React from 'react';\nimport LostPassword from './LostPassword';\nimport Modal from 'react-bootstrap/Modal';\nimport { firebaseApp } from '../base';\nimport Register from './Register';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n         showModal: false,\n         email: '',\n         password: '',\n         error: null,\n    };\n\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePWChange = this.handlePWChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRegistrationSubmit = this.handleRegistrationSubmit.bind(this);\n    this.handleShowRegister = this.handleShowRegister.bind(this);\n    this.handleCloseRegister = this.handleCloseRegister.bind(this);\n\n  }\n\n\n  handleShowRegister(event) {\n       event.preventDefault();\n       this.setState({ showModal: true });\n }\n\n  handleCloseRegister(event) {\n       //event.preventDefault();\n       this.setState({\n            showModal: false\n       });\n}\n\n\n  handleEmailChange(event) {\n    this.setState({email: event.target.value});\n  }\n\n  handlePWChange(event) {\n    this.setState({password: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    this.props.authenticateUser( this.state.email, this.state.password );\n\n  }\n\n\n  handleRegistrationSubmit = (event) => {\n     event.preventDefault();\n     console.log('Registration submitted');\n     const { email, password } = this.state;\n     console.log(this.state);\n  firebaseApp\n       .auth()\n       .createUserWithEmailAndPassword(email, password)\n       .then((user) => {\n            //console.log(user);\n            //this.props.history.push('/');\n\n            // add new user to App-->state and Firebase\n            this.props.registerNewUser(user);\n       })\n       .catch((error) => {\n         this.setState({ error: error });\n       });\n   };\n\n\nrender() {\n\n     const loginError = this.props.loginError;\n     const { email, password, error } = this.state;\n\n     return (\n\n          <div className=\"login-form-area\">\n          <p>Welcome! Bookshelf is an easy, free way to keep track of your reading.<br/>\n          It's for personal use only and your information will never be shared with advertisers or social networks.<br/>\n          If you're new here, <a href=\"/bookshelf/register\" onClick={this.handleShowRegister} >click here to register for a new free account</a>. Or if you've already registered, then simply login below.</p>\n          { loginError === true ?\n               <h2>Incorrect email/password combination. Please try again:</h2>\n               :\n               <h2>Login Below:</h2>\n          }\n          <form className=\"login-area\" onSubmit={this.handleSubmit} >\n          <div className=\"login-item\">\n               <input\n                   type=\"text\"\n                   id=\"login-form-email\"\n                   name=\"email\"\n                   label=\"Email\"\n                   required\n                   onChange={this.handleEmailChange}\n                   />\n                   </div>\n                   <div className=\"login-item\">\n              <input\n                  id=\"login-form-password\"\n                  name=\"password\"\n                  label=\"Password\"\n                  required\n                  type=\"password\"\n                  onChange={this.handlePWChange}\n                  />\n             </div>\n             <button type=\"submit\">Submit</button>\n             </form>\n             <LostPassword />\n\n\n             <Modal show={this.state.showModal} onHide={this.handleCloseRegister} className=\"clb-single-beer-notes\">\n               <Modal.Header closeButton>\n                 <Modal.Title><h3>Register for a New Account</h3></Modal.Title>\n               </Modal.Header>\n               <Modal.Body>\n                    <Register\n                         registerNewUser={this.props.registerNewUser}\n                    />\n               </Modal.Body>\n             </Modal>\n\n        </div>\n     );\n\n     }\n\n}\n\nexport default Login;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// my components\nimport Login from './Login';\nimport Register from './Register';\nimport Logout from './Logout';\n\n\nexport default function LandingPage(props) {\n\n       return (\n            <div className=\"landing-page-area single-page\">\n             <h1>Login & New User Registration</h1>\n                 <div className=\"login-register-area\">\n                 <Login\n                         authenticateUser={props.authenticateUser}\n                         loginError={props.loginError}\n                         registerNewUser={props.registerNewUser} />\n                 </div>\n            </div>\n\n       );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Header from './components/Header.js';\nimport BookManager from './components/BookManager.js';\nimport LandingPage from './components/LandingPage.js';\n\nimport base from './base';\nimport { firebaseApp } from './base';\n\nclass App extends React.Component {\n     constructor(props) {\n          super(props);\n\n      this.state = {\n         loggedInID: '',\n         loggedInEmail: '',\n         loginError: false,\n       };\n\n     }\n\n\n     componentDidMount() {\n          console.log(\"App.js mounted\");\n     }\n\n\n\n     registerNewUser = (user) => {\n\n             const newUserID = user.user.uid;\n             const newUserEmail = user.user.email;\n              console.log(newUserID);\n\n             // Create new Journal view if it doesn't exist yet for this user\n              firebaseApp.database().ref().update({\n                 [newUserID]: {\n                      ownerID: newUserID,\n                      ownerEmail: newUserEmail,\n                      books: [],\n                      settings: {\n                                   color: 'default',\n                                   font: 'default',\n                                   sortViewToRead: 'alphabetical',\n                                   sortViewAlreadyRead: 'alphabetical',\n                                   bookSize: 'default',\n                                   genres: [\n                                        'Fiction',\n                                        'Nonfiction',\n                                        'Memoir',\n                                        'Children',\n                                        'Cooking',\n                                        'Historical Fiction',\n                                        'Mystery',\n                                        'Science Fiction',\n                                        'Young Adult',\n                                   ],\n                                   customFields: [],\n                              },\n                         },\n              });\n\n              this.setState({\n                   loggedInID: newUserID,\n                   loggedInEmail: newUserEmail,\n               });\n               localStorage.setItem('bookshelf.loggedInID', newUserID);\n               localStorage.setItem('bookshelf.loggedInEmail', newUserEmail);\n               console.log(\"REGISTERED AND Logged in: \" + newUserID);\n\n        }\n\n\n        authenticateUser = (email, password) => {\n\n                 console.log(\"AuthenticateUser: \" + email);\n                 // const loggedInID = user.user.uid;\n\n               firebaseApp\n                    .auth()\n                    .signInWithEmailAndPassword(email, password)\n                    .then((user) => {\n                      console.log(\"User successfully LOGGED IN\" + user.user.uid);\n                      this.setState({\n                           loggedInID: user.user.uid,\n                           loggedInEmail: user.user.email,\n                           loginError: false });\n                      localStorage.setItem('bookshelf.loggedInID', user.user.uid);\n                      localStorage.setItem('bookshelf.loggedInEmail', email);\n                    })\n                    .catch((error) => {\n                      console.log(\"ERROR: User trying to log in\");\n                      this.setState({ loginError: true });\n                    });\n\n                }\n\n\n\n      authHandler = async authData => {\n\n           //console.log(authData);\n           const user = firebaseApp.auth().currentUser;\n\n           console.log(user);\n           if( user !== null ) {\n                const userUID = user.uid;\n                console.log(\"Current User ID: \" + userUID);\n                console.log(\"Current User Email: \" + user.email);\n\n                //update state\n                this.setState({\n                     loggedInID: userUID,\n                     loggedInEmail: user.email,\n                       });\n               localStorage.setItem('bookshelf.loggedInID', userUID);\n               localStorage.setItem('bookshelf.loggedInEmail', user.email);\n\n           } else {\n                console.log(\"authHandler == no user found\");\n           }\n\n      }\n\n\n\n\n   logOutUser = event => {\n\n        firebaseApp.auth().signOut().then(function() {\n          // Sign-out successful.\n          console.log(\"Logged OUT successful\");\n\n        }).catch(function(error) {\n          // An error happened.\n          console.log(\"ERROR: Trying to log out\");\n        });\n\n        //update state\n        this.setState({\n             loggedInID: '',\n             loggedInEmail: '',\n          });\n        localStorage.removeItem('bookshelf.loggedInID');\n        localStorage.removeItem('bookshelf.loggedInEmail');\n\n        base.reset();\n\n   }\n\n\n   // Delete user not working ????\n   permanentlyDeleteUserAndInfo = user => {\n\n        console.log(user);\n        const userUID = user.uid;\n\n             base.remove(userUID)\n            .then(() => {\n              console.log(\"User \" + userUID + \" permanently deleted\");\n\n            })\n            .catch(error => {\n              //handle error\n            });\n\n            //update state\n           this.setState({\n                loggedInID: '',\n                loggedInEmail: '',\n             });\n           localStorage.removeItem('bookshelf.loggedInID');\n           localStorage.removeItem('bookshelf.loggedInEmail');\n\n       }\n\n\n\n     render() {\n\n          let loggedInID = this.state.loggedInID;\n          let loggedInEmail = this.state.loggedInEmail;\n          const loginError = this.state.loginError;\n\n          const loggedInIDLocal = localStorage.getItem('bookshelf.loggedInID');\n          const loggedInEmailLocal = localStorage.getItem('bookshelf.loggedInEmail');\n          console.log(\"LOCAL STORAGE: \" + loggedInIDLocal);\n\n          if( loggedInIDLocal !== null ) { loggedInID = loggedInIDLocal; }\n          if( loggedInEmailLocal !== null ) { loggedInEmail = loggedInEmailLocal; }\n\n       return (\n         <div className=\"App\">\n\n           { loggedInID !== '' ?\n               <>\n                     <BookManager\n                          logOutUser={this.logOutUser}\n                          loggedInID={loggedInID}\n                          loggedInEmail={loggedInEmail}\n                          permanentlyDeleteUserAndInfo={this.permanentlyDeleteUserAndInfo}\n                     />\n               </>\n               :\n               <>\n                    <Header\n                       logOutUser={this.logOutUser}\n                       permanentlyDeleteUserAndInfo={this.permanentlyDeleteUserAndInfo}\n                    />\n                    <div className=\"logged-out-area\">\n                       <LandingPage\n                              registerNewUser={this.registerNewUser}\n                              authenticateUser={this.authenticateUser}\n                              loginError={loginError}\n                              logOutUser={this.logOutUser}\n                         />\n                       </div>\n             </>\n             }\n\n         </div>\n       );\n     }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}