{"version":3,"sources":["logo.svg","../node_modules/encoding/lib sync","components/LightBook.js","components/SolidBook.js","components/Header.js","components/BookButtonToRead.js","components/BookButtonAlreadyRead.js","components/SelectRating.js","components/Notes.js","components/ReadDate.js","components/EditBookForm.js","components/BookButtonRemove.js","components/BookButtonMoveToAlreadyRead.js","base.js","components/ReplaceCover.js","components/Stars.js","components/BookDate.js","components/SelectGenre.js","components/SelectTags.js","components/NewDatePicker.js","components/BookEditor.js","components/BookModal.js","components/BookButtonBanFromSuggestions.js","components/BookCard.js","components/RecentlyAddedToRead.js","components/RecentlyAddedAlreadyRead.js","components/Landing.js","components/Input.js","utils/API.js","components/Results.js","components/Search.js","components/RecommendationsSection.js","components/Recommended.js","components/Logout.js","components/ChangePassword.js","components/DeleteAccount.js","components/SelectThemeColor.js","components/SelectThemeFont.js","components/SelectBookSize.js","components/SelectUseGenres.js","components/SelectUseTags.js","components/Settings.js","components/NotFound.js","components/SelectToReadView.js","components/SavedForLater.js","components/SelectAlreadyReadView.js","components/AdvancedStats.js","components/AuthorList.js","components/SelectFilter.js","components/PreviouslyRead.js","components/Register.js","components/Router.js","components/BookManager.js","components/LostPassword.js","components/Login.js","components/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","LightBook","props","icon","faBook","SolidBook","Header","className","settingsColor","settingsFont","href","aria-label","faSearch","faCog","BookButtonToRead","createNewBook","event","preventDefault","console","log","book","newBook","addBookToRead","state","title","onClick","this","React","Component","BookButtonAlreadyRead","addBookAlreadyRead","SelectRating","defaultRating","myRatingToPublish","defaultRatingPublish","value","label","ratingOptions","placeholder","options","defaultValue","isClearable","isSearchable","onChange","setRating","ReadDate","useState","Date","setSelectedDate","formattedDate","bookshelfTimestamp","toISOString","slice","TextField","required","type","InputLabelProps","shrink","date","currentTarget","getCompletedDate","EditBookForm","bookshelfRating","bookNotes","bookshelfNote","editThisBook","undefined","entry","editBook","selectedOption","setState","updatedTimestamp","parseInt","getTime","toFixed","currentlyEditing","JSON","stringify","onSubmit","hideRating","hideDate","BookButtonRemove","removeThisBook","bookObj","context","removeBookFromAlreadyRead","removeBookFromToRead","window","confirm","faTrashAlt","BookButtonMoveToAlreadyRead","moveBooktoAlreadyRead","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","ReplaceCover","require","handleChangeUsername","username","target","handleUploadStart","isUploading","progress","handleProgress","handleUploadError","error","handleUploadSuccess","filename","bookCover","storage","ref","child","getDownloadURL","then","url","bookCoverURL","cancelUpload","setNewCover","updateCoverImg","isEditing","replaceCoverForm","style","hidden","accept","randomizeFilename","storageRef","onUploadStart","onUploadError","onUploadSuccess","onProgress","src","Stars","rating","stars","BookDate","SelectGenre","handleCreateLabel","inputValue","actionMeta","genreTypes","genres","defaultGenreTypeRaw","defaultGenre","genreTypesToSelect","forEach","push","defaultGenreTypeSelect","formatCreateLabel","setGenre","SelectTags","addTagToState","tags","madeChange","handleTagsSubmit","tagsObj","tagsArray","length","map","x","addNewTag","setBookTags","defaultTags","allTags","defaultTagsRaw","tagTypesToSelect","key","updatedDefaults","i","isMulti","NewDatePicker","handleDateSubmit","newDateTimestamp","parse","setBookTimestamp","locale","maxDate","shortid","BookEditor","customToggle","currentlyEditingRating","setBookRating","resetRating","resetRatingToZero","resetTimestamp","resetTimestampToZero","resetGenre","genre","resetGenreToZero","resetTags","resetAllTags","currentlyEditingTags","currentlyEditingGenre","currentlyEditingDate","setBookGenre","addNewGenre","setTags","selectedDate","handleDateChange","theDate","prevState","viewDescription","description","ratingArea","faEdit","faMinusCircle","dateArea","dateCompleted","genreArea","currentTags","tag","generate","tagArea","useGenres","useTags","Accordion","Toggle","as","Button","variant","eventKey","Collapse","dangerouslySetInnerHTML","__html","BookModal","show","setShow","handleClose","handleShow","showDescription","bookCoverModal","bookTitleModal","coverImageURL","subtitle","hasSubtitle","authors","authorClass","authorsToPublish","dateToPublish","pageCount","descriptionToPublish","searchResult","categories","publishedDate","toLocaleString","month","day","year","coverImg","join","toString","substring","volumeInfo","alreadyRead","startsWith","replace","Modal","onHide","closeButton","Title","Body","savedForLater","Footer","removeBook","additionalModalClasses","BookButtonBanFromSuggestions","clickRemoveBookSuggested","removeBookFromSuggestions","BookCard","originalBookJSON","connected","imageLinks","thumbnail","large","medium","small","smallThumbnail","createNotification","toRead","RecentlyAddedToRead","booksToRead","orderedBooksToPublish","sort","a","b","index","addNewImagesToRead","RecentlyAddedAlreadyRead","booksAlreadyRead","addNewImagesAlreadyRead","Landing","notification","Input","axios","get","Results","books","noResults","data","location","results","filter","notificationArea","currentTimestamp","now","notificationTimestamp","Search","handleInputChange","name","handleFormSubmit","trim","API","res","items","toResults","catch","err","to","pathname","RecommendationsSection","searching","forceUpdateHandler","bind","authorsRaw","author","forceUpdate","removedFromSuggestions","banned","filteredBooksByAuthor","some","r","indexOf","currentShelfIDs","filteredBooksRemoveDups","includes","removedBanned","removedForeign","bookLanguage","hasOwnProperty","language","uniqueBooks","Array","from","Set","find","bookIndices","Math","floor","random","finalBooksToPublish","arrayIndex","Recommended","calculating","array","splice","starRatingsArray","avg","reduce","previous","current","rawAuthors","flat","removeDuplicates","authorsObj","bookArrayByAuthor","avgRatingForAuthor","getAverageRating","avgRating","authorListToPublish","Logout","logOutUser","ChangePassword","resetPassword","DeleteAccount","deleteAccount","SelectThemeColor","setColor","changeSettingsColor","myColorToPublish","defaultColorPublish","colorOptions","SelectThemeFont","setFont","changeSettingsFont","SelectBookSize","setBookSize","changeSettingsBookSize","settingsBookSize","bookSize","myBookSizesToPublish","defaultBookSizePublish","bookSizes","SelectUseGenres","setUseGenres","changeSettingsUseGenres","settingsUseGenres","myGenreSettingsToPublish","defaultUseGenres","SelectUseTags","setUseTags","changeSettingsUseTags","settingsUseTags","myTagSettingsToPublish","defaultUseTags","Settings","auth","emailAddress","loggedInEmail","sendPasswordResetEmail","emailedResetLink","user","currentUser","delete","permanentlyDeleteUserAndInfo","NotFound","SelectToReadView","setView","changeToReadView","defaultView","myViewToPublish","defaultViewPublish","SavedForLater","booksToReadView","orderedBooks","titleForSorting","SelectAlreadyReadView","changeAlreadyReadView","AdvancedStats","getTotalPages","totalPages","avgToPublish","booksNoDateAssigned","booksWithDate","yearlyChart","prevDateYear","getFullYear","currentYearBooks","j","currentBookYear","getYear","SelectFilter","selectRating","setRatingFilter","clearRatingFilter","selectAuthor","setAuthorFilter","clearAuthorFilter","selectGenre","setGenreFilter","clearGenreFilter","selectTag","setTagFilter","clearTagFilter","currentSelection","filterOptions","split","Boolean","localeCompare","ignorePunctuation","PreviouslyRead","orderBooks","bookOrderString","booksArray","booksAlreadyReadView","string","genreFilter","authorFilter","tagFilter","number","ratingFilter","clearAllFilters","filteredBooksInOrder","displayedBooks","showHideStats","showStats","showHideFilters","showFilters","bookOrder","filteredBooks","myBookTags","minRating","clearButton","FormControlLabel","control","Switch","checked","inputProps","Register","handleSubmit","email","password","createUserWithEmailAndPassword","registerNewUser","message","Router","basename","exact","path","component","render","loggedInID","editBookToRead","BookManager","fetchCoverImage","publisher","createAlphabeticalSortingTitle","notes","googleLink","selfLink","bookTitle","startNotificationTimer","fetch","json","extraLarge","bookID","clbCopyBookState","bookToUpdate","obj","getBookObjInState","findIndex","ids","allTagsArray","prevTags","settings","difference","updatedTags","concat","newGenre","previousGenres","included","updatedGenres","orderedGenres","sortViewAlreadyRead","newBookCardView","sortViewToRead","newBookSize","newGenreSetting","newTagsSetting","newSettingsColor","color","localStorageKey","localStorage","setItem","newSettingsFont","font","resetNotification","timerId","setTimeout","updatedTitle","substr","previousRemoved","updatedRemoved","customFields","syncState","asArray","localStorageKeyColor","settingsColorLocal","getItem","localStorageKeyFont","settingsFontLocal","updatedBooksToRead","updatedBooksAlreadyRead","LostPassword","sentEmailAddress","showModal","sentEmail","handleEmailChange","emailAdress","Login","handleRegistrationSubmit","handlePWChange","handleShowRegister","handleCloseRegister","authenticateUser","loginError","LandingPage","App","newUserID","uid","newUserEmail","update","ownerID","ownerEmail","signInWithEmailAndPassword","authHandler","authData","async","userUID","signOut","removeItem","reset","remove","loggedInIDLocal","loggedInEmailLocal","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb5c8a16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 326;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-light-svg-icons';\n\nconst LightBook = (props) => (\n     <FontAwesomeIcon icon={faBook} />\n)\n\nexport default LightBook;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nconst SolidBook = (props) => (\n     <FontAwesomeIcon icon={faBook} />\n)\n\nexport default SolidBook;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import { faCog, faSearch } from '@fortawesome/pro-duotone-svg-icons';\nimport { faCog, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\nimport LightBook from './LightBook';\nimport SolidBook from './SolidBook';\n\n\nfunction Header(props) {\n  return (\n    <header className={\"header color-\" + props.settingsColor + \" font-\" + props.settingsFont}>\n      <h1 className=\"logo-area\"><a href=\"/bookshelf/\">Bookshelf</a></h1>\n      <nav className=\"nav-primary\" aria-label=\"Main\" id=\"bookshelf-nav-primary\" className=\"main-menu\">\n           <ul id=\"menu-main-menu\" className=\"menu-main-menu\">\n                <li id=\"menu-item-search\" className=\"menu-item search\"><a href=\"#search\"><FontAwesomeIcon icon={faSearch} /> New Books</a></li>\n                <li id=\"menu-item-saved\" className=\"menu-item saved\"><a href=\"#saved\"><LightBook /> To Read</a></li>\n                <li id=\"menu-item-read\" className=\"menu-item read\"><a href=\"#read\"><SolidBook /> Already Read</a></li>\n                <li id=\"menu-item-settings\" className=\"menu-item settings\"><a href=\"#settings\"><FontAwesomeIcon icon={faCog} /> Settings</a></li>\n           </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-light-svg-icons';\n\nclass BookButtonToRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.addBookToRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action to-read\"\n                    title=\"Add to your To Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonToRead;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nclass BookButtonAlreadyRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n          //console.log(this.props.addBookAlreadyRead);\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.addBookAlreadyRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action already-read\"\n                    title=\"Add to your Already Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonAlreadyRead;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectRating extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n\n     render() {\n\n          const defaultRating = this.props.defaultRating;\n          console.log(defaultRating);\n\n               var myRatingToPublish = null;\n               if( defaultRating === '5' ) { myRatingToPublish = '⭐⭐⭐⭐⭐ Life-Changing'; }\n               if( defaultRating === '4' ) { myRatingToPublish = '⭐⭐⭐⭐ Great'; }\n               if( defaultRating === '3' ) { myRatingToPublish = '⭐⭐⭐ Good'; }\n               if( defaultRating === '2' ) { myRatingToPublish = '⭐⭐ OK'; }\n               if( defaultRating === '1' ) { myRatingToPublish = \"⭐ Bad / Didn't Finish\"; }\n\n          let defaultRatingPublish = {\n               value: defaultRating,\n               label: myRatingToPublish\n          };\n          if( defaultRating === null ) { defaultRatingPublish = null; }\n          //console.log(defaultRating);\n\n          const ratingOptions = [\n               { value: '5', label: '⭐⭐⭐⭐⭐ Life-Changing' },\n               { value: '4', label: '⭐⭐⭐⭐ Great' },\n               { value: '3', label: '⭐⭐⭐ Good' },\n               { value: '2', label: '⭐⭐ OK' },\n               { value: '1', label: \"⭐ Bad / Didn't Finish\" }\n          ];\n\n          if( defaultRating ) {\n\n               return (\n                 <Select\n                    placeholder='Set Rating'\n                    options={ratingOptions}\n                    defaultValue={defaultRatingPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.props.setRating}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Set Rating'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.props.setRating}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectRating;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nclass Notes extends React.Component {\n\n     useStyles = makeStyles(theme => ({\n       root: {\n         '& > *': {\n           margin: theme.spacing(1),\n           marginLeft: 0\n         },\n       },\n     }));\n\n  classes = this.useStyles;\n\n //  onChange = (event) => {\n //       console.log(event.target.value);\n // }\n\nrender() {\n\n          const edit = this.props.edit;\n\n          if( edit ) {\n\n       return (\n\n           <TextField\n               id=\"notes-basic-outline\"\n               defaultValue={this.props.defaultValue}\n               label={this.props.placeholder}\n               fullWidth\n               multiline\n               rows=\"4\"\n               onChange={this.props.setNotes}\n               />\n\n       );\n\n } else {\n\n      return (\n\n          <TextField\n              id=\"outlined-basic\"\n              defaultValue={this.props.defaultValue}\n              label={this.props.placeholder}\n              fullWidth\n              multiline\n              rows=\"4\"\n              onChange={this.props.setNotes}\n              />\n\n      );\n\n}\n\n}\n\n}\n\nexport default Notes;\n","//import 'date-fns';\nimport React from 'react';\n//import DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function ReadDate(props) {\n\n// The first commit of Material-UI\nconst [selectedDate, setSelectedDate] = React.useState(new Date());\n\nconst handleDateChange = date => {\n     console.log(date.currentTarget.value);\n     setSelectedDate(date.currentTarget.value);\n     props.getCompletedDate(date.currentTarget.value);\n\n};\n\n\nconst bookshelfTimestamp = new Date(props.bookshelfTimestamp);\nconst formattedDate = bookshelfTimestamp.toISOString().slice(0,10);\nconsole.log(formattedDate);\n\nreturn (\n     <TextField\n         id=\"date\"\n         required\n         label=\"Date Completed\"\n         type=\"date\"\n         defaultValue={formattedDate}\n         className=\"book-date-field\"\n         InputLabelProps={{\n           shrink: true,\n         }}\n         onChange={handleDateChange}\n  />\n);\n\n}\n","import React from 'react';\nimport Select from 'react-select';\n//import Notes from './Notes';\nimport SelectRating from './SelectRating';\nimport Notes from './Notes';\nimport ReadDate from './ReadDate';\n\n///////////////////////////////////////////////////////////////////////\n\n\nclass EditBookForm extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               currentlyEditing: true,\n               book: this.props.book,\n               bookshelfNote: this.props.bookshelfNote,\n               bookshelfRating: this.props.bookshelfRating\n          }\n     }\n\n\n\n     id = this.props.book.id;\n     bookshelfRating = this.props.bookshelfRating;\n     bookNotes = this.props.bookshelfNote;\n     bookshelfTimestamp = this.props.bookshelfTimestamp;\n\n\n     editThisBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          const book = this.state.book;\n          console.log(book);\n\n          // Make sure no fields cause \"undefined\" errors even if missing info\n               // if( this.count === undefined ) { this.count = 0; }\n               // if( this.type_of_beer === undefined ) { this.type_of_beer = ''; }\n               // if( this.brewery_name === undefined ) {\n               //      this.brewery_name = '';\n               //      this.brewery_slug = '';\n               // }\n\n               console.log(this.state.book.bookshelfTimestamp);\n\n               //timestamp fix\n               //let updatedDate =\n\n\n               if( this.bookshelfTimestamp === undefined ) { this.bookshelfTimestamp = this.state.book.bookshelfTimestamp; }\n               if( this.bookshelfRating === undefined ) { this.bookshelfRating = this.state.book.bookshelfRating; }\n               if( this.bookNotes === undefined ) { this.bookNotes = []; }\n\n               book.bookshelfRating = this.bookshelfRating;\n               book.bookshelfNote = this.bookNotes;\n               book.bookshelfTimestamp = this.bookshelfTimestamp;\n               const entry = book;\n\n          console.log(entry);\n          // console.log(this.props.editCurrentBeer);\n          // 2 add the new beer to state (App.js)\n          this.props.editBook(entry);\n\n     }\n\n     setRating = (selectedOption) => {\n          if(selectedOption) {\n               this.bookshelfRating = selectedOption.value;\n               this.setState({ bookshelfRating: selectedOption.value });\n          }\n          else {\n               this.setState({ bookshelfRating: 505 });\n          }\n\n     }\n\n     // setNotes = (event) => {\n     //      this.bookNotes = (event.target.value);\n     // }\n\n     getCompletedDate = (date) => {\n          //this.bookshelfTimestamp = date;\n          console.log(\"Completed DATE: \" + this.bookshelfTimestamp);\n          let updatedTimestamp = parseInt((new Date(date).getTime()).toFixed(0));\n          console.log(updatedTimestamp);\n          this.bookshelfTimestamp = updatedTimestamp;\n     }\n\n\nrender() {\n\n     console.log(\"Current book: \" + JSON.stringify(this.props.book));\n     console.log(\"Current book RATING: \" + JSON.stringify(this.props.bookshelfRating));\n     const defaultRating = this.props.bookshelfRating;\n     //const bookshelfNote = this.props.bookshelfNote;\n     const bookshelfTimestamp = this.props.bookshelfTimestamp;\n     //console.log(\"NOTE: \" + bookshelfNote);\n\n       return (\n            <>\n\n            <form className=\"edit-book\" onSubmit={this.editThisBook} >\n               <div className=\"top-info-line\">\n                      { this.props.hideRating !== true &&\n                         <div className=\"book-rating-area\">\n                         <SelectRating\n                              setRating={this.setRating}\n                              defaultRating={defaultRating}\n                         />\n                         </div>\n                    }\n                    { this.props.hideDate !== true &&\n                         <div className=\"book-date-area\">\n                         <ReadDate\n                              bookshelfTimestamp={bookshelfTimestamp}\n                              getCompletedDate={this.getCompletedDate}\n                         />\n                         </div>\n                    }\n               </div>\n\n               <button type=\"submit\" className=\"update-this-book\">Save Changes</button>\n            </form>\n         </>\n       );\n     }\n\n}\n\n\nexport default EditBookForm;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/pro-light-svg-icons';\n\nclass BookButtonRemove extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     removeThisBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          // console.log(this.props.book);\n          // console.log(this.props.context);\n          // console.log(this.props.removeBookFromAlreadyRead);\n          const bookObj = this.props.book;\n\n          if(this.props.context === 'removeBookFromAlreadyRead') {\n               this.props.removeBookFromAlreadyRead(bookObj);\n          }\n\n          if(this.props.context === 'removeBookFromToRead') {\n               this.props.removeBookFromToRead(bookObj);\n          }\n\n\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action remove-book\"\n                    title=\"Permanently remove this book from your collection\"\n                    onClick={event =>\n                 window.confirm(\n                   \"Are you sure you want to delete this book? All of your ratings and notes for this book will also be removed. You cannot undo this action.\"\n              ) && this.removeThisBook(event)\n               }>\n          <FontAwesomeIcon icon={faTrashAlt} />\n          </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonRemove;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook } from '@fortawesome/pro-duotone-svg-icons';\n\nclass BookButtonMoveToAlreadyRead extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     createNewBook = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          console.log(this.props.book);\n          const newBook = this.props.book;\n          this.props.moveBooktoAlreadyRead(newBook);\n\n     }\n\n     render() {\n\n          return(\n\n               <button\n                    className=\"read-action already-read\"\n                    title=\"Move this book to your Already Read shelf\"\n                    onClick={this.createNewBook}\n                    >\n                    <FontAwesomeIcon icon={faBook} />\n               </button>\n          );\n\n     }\n\n}\n\nexport default BookButtonMoveToAlreadyRead;\n","import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n     apiKey: \"AIzaSyDniUweenII-q4xtU2jywgLN_lVEcLNnlM\",\n     authDomain: \"bookshelf-9d11e.firebaseapp.com\",\n     databaseURL: \"https://bookshelf-9d11e.firebaseio.com\",\n     projectId: \"bookshelf-9d11e\",\n     storageBucket: \"bookshelf-9d11e.appspot.com\",\n     messagingSenderId: \"16890829596\",\n     appId: \"1:16890829596:web:44b99ad2e1677bca39f8d9\"\n})\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n// This is a named export\nexport { firebaseApp };\n\n// This is a default export\nexport default base;\n","import React, { Component } from \"react\";\nimport base from '../base';\nimport { firebaseApp } from '../base';\nimport FileUploader from \"react-firebase-file-uploader\";\n\nconst shortid = require('shortid');\n\nclass ReplaceCover extends Component {\n     constructor(props) {\n    super(props);\n       this.state = {\n         bookCover: \"\",\n         isUploading: false,\n         progress: 0,\n         bookCoverURL: \"\",\n         isEditing: true\n       };\n   }\n\n   handleChangeUsername = event =>\n    this.setState({ username: event.target.value });\n   handleUploadStart = () => this.setState({ isUploading: true, progress: 0 });\n   handleProgress = progress => this.setState({ progress });\n   handleUploadError = error => {\n    this.setState({ isUploading: false });\n    console.error(error);\n   };\n   handleUploadSuccess = filename => {\n    this.setState({ bookCover: filename, progress: 100, isUploading: false });\n    firebaseApp\n       .storage()\n       .ref(\"images\")\n       .child(filename)\n       .getDownloadURL()\n       .then(url => this.setState({ bookCoverURL: url }));\n\n   };\n\n\n   cancelUpload = () => {\n        this.setState({ bookCoverURL: '' });\n   }\n\n\n   setNewCover = () => {\n        console.log(this.state.bookCoverURL);\n        console.log(this.props.bookObj);\n        this.props.updateCoverImg(this.state.bookCoverURL, this.props.bookObj);\n   }\n\n\n  render() {\n\n       console.log(this.state.bookCoverURL);\n       let replaceCoverForm = null;\n       if( this.state.bookCoverURL === '' ) {\n            replaceCoverForm = (\n                 <>\n                 <label className=\"button replace-cover\" style={{}}>\n                 <form className=\"replace-book-cover\">\n                Replace Cover\n                <FileUploader\n                      hidden\n                      accept=\"image/*\"\n                      randomizeFilename\n                      storageRef={firebaseApp.storage().ref('images')}\n                      onUploadStart={this.handleUploadStart}\n                      onUploadError={this.handleUploadError}\n                      onUploadSuccess={this.handleUploadSuccess}\n                      onProgress={this.handleProgress}\n                    />\n                    </form>\n           </label>\n         </>);\n       }\n\n    return (\n      <div>\n\n          {this.state.isUploading && <p>Progress: {this.state.progress}</p>}\n          {this.state.bookCoverURL &&\n               <><p>Updated cover:</p><div className=\"updated-cover-thumbnail\"><img src={this.state.bookCoverURL} /></div></>\n          }\n          {replaceCoverForm}\n        { this.state.bookCoverURL &&\n        <button className=\"finalize-new-cover-button\" onClick={this.setNewCover}>Save New Cover</button>\n          }\n          { this.state.bookCoverURL &&\n         <button className=\"cancel-new-cover\" onClick={this.cancelUpload}>Cancel</button>\n           }\n      </div>\n    );\n  }\n}\n\nexport default ReplaceCover;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n\nfunction Stars(props) {\n\n\n     const rating = parseInt(props.bookshelfRating);\n     // console.log(props.bookshelfRating);\n\n     let stars = null;\n     if(rating === 5) {\n          stars = <><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span></>;\n     }\n     else if(rating === 4) {\n          stars = <><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span></>;\n     }\n     else if(rating === 3) {\n          stars = <><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span></>;\n     }\n     else if(rating === 2) {\n          stars = <><span className=\"star-icon\">⭐</span><span className=\"star-icon\">⭐</span></>;\n     }\n     else if(rating === 1) {\n          stars = <><span className=\"star-icon\">⭐</span></>;\n     }\n     else {\n          stars = null;\n     }\n\n  return (\n    <div className=\"star-rating-area\">\n          {stars}\n    </div>\n  );\n}\n\nexport default Stars;\n","import React, { Fragment, useState } from \"react\";\nimport { DatePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\n\nfunction BookDate(props) {\n\n     const [selectedDate, handleDateChange] = useState(new Date());\n\n\n  return (\n    <>\n    <KeyboardDatePicker\n        clearable\n        value={selectedDate}\n        onChange={date => handleDateChange(date)}\n        disableFuture\n        format={\"MM/DD/YYYY\"}\n     />\n    </>\n  );\n}\n\nexport default BookDate;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Creatable, { makeCreatableSelect } from 'react-select/creatable';\nimport CreatableSelect from 'react-select/creatable';\n\nclass SelectGenre extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n            };\n     }\n\n     handleCreateLabel = (inputValue: any, actionMeta: any) => {\n          console.log(\"handleCreateLabel\");\n          return 'Create new genre: \"' + inputValue + '\"';\n     }\n\n\n     render() {\n\n          const genreTypes = this.props.genres;\n          const defaultGenreTypeRaw = this.props.defaultGenre;\n          let genreTypesToSelect = [];\n          genreTypes.forEach(value =>\n               genreTypesToSelect.push({ value: value, label: value })\n          );\n\n          if( defaultGenreTypeRaw !== null ) {\n\n               const defaultGenreTypeSelect = { value: defaultGenreTypeRaw, label: defaultGenreTypeRaw }\n\n               return (\n                 <CreatableSelect\n                    placeholder='Genre'\n                    options={genreTypesToSelect}\n                    defaultValue={defaultGenreTypeSelect}\n                    isClearable\n                    isSearchable\n                    formatCreateLabel={this.handleCreateLabel}\n                    onChange={this.props.setGenre}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <CreatableSelect\n                      placeholder='Genre'\n                      options={genreTypesToSelect}\n                    isClearable\n                    isSearchable\n                    value={null}\n                    formatCreateLabel={this.handleCreateLabel}\n                    onChange={this.props.setGenre}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectGenre;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Creatable, { makeCreatableSelect } from 'react-select/creatable';\nimport CreatableSelect from 'react-select/creatable';\n\nconst shortid = require('shortid');\n\nclass SelectTags extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               tags: this.props.defaultTags,\n               madeChange: false,\n            };\n     }\n\n     handleCreateLabel = (inputValue: any, actionMeta: any) => {\n          console.log(\"handleCreateLabel\");\n          return 'Create new tag: \"' + inputValue + '\"';\n     }\n\n     addTagToState = (selectedOption) => {\n          console.log(selectedOption);\n          this.setState({ tags: selectedOption, madeChange: true });\n\n     }\n\n\n     handleTagsSubmit = (event) => {\n          event.preventDefault();\n          console.log(\"HANDLE SUBMIT TAGS\");\n          console.log(this.state.tags);\n\n          const tagsObj = this.state.tags;\n          let tagsArray = [];\n          if( tagsObj.length > 0 && tagsObj !== null ) {\n               tagsArray = tagsObj.map(x => x.value);\n          }\n\n          console.log(tagsArray);\n          this.props.addNewTag(tagsArray);\n          this.props.setBookTags(tagsArray, this.props.book);\n     }\n\n     render() {\n\n          const allTags = this.props.allTags;\n          const currentTags = this.state.tags;\n          const defaultTagsRaw = this.props.defaultTags;\n          console.log(defaultTagsRaw);\n          let tagTypesToSelect = [];\n\n          if( allTags !== undefined ) {\n\n                    // allTags.forEach(value =>\n                    //      tagTypesToSelect.push({ value: value, label: value })\n                    // );\n\n               allTags.map((value, key) =>\n                    tagTypesToSelect.push({ value: value, label: value })\n               );\n          }\n\n          if( defaultTagsRaw !== undefined ) {\n\n               console.log(defaultTagsRaw);\n               let updatedDefaults = [];\n               for( let i = 0; i < defaultTagsRaw.length; i++ ) {\n                    updatedDefaults.push({ value: defaultTagsRaw[i], label: defaultTagsRaw[i] })\n               }\n\n               const defaultTagTypeSelect = defaultTagsRaw;\n\n               return (\n                    <form id=\"select-tags-form\" onSubmit={this.handleTagsSubmit} >\n                      <CreatableSelect\n                         isMulti\n                         placeholder='Select Tags'\n                         defaultValue={updatedDefaults}\n                         options={tagTypesToSelect}\n                         isClearable\n                         isSearchable\n                         formatCreateLabel={this.handleCreateLabel}\n                         onChange={this.addTagToState}\n                      />\n                      {this.state.madeChange === true &&\n                           <button className=\"add-tags\">Update Tags</button>\n                      }\n                    </form>\n               );\n\n          } else {\n\n               return (\n                    <form id=\"select-tags-form\" onSubmit={this.handleTagsSubmit} >\n                      <CreatableSelect\n                         isMulti\n                         placeholder='Select Tags'\n                         options={tagTypesToSelect}\n                         isClearable\n                         isSearchable\n                         formatCreateLabel={this.handleCreateLabel}\n                         onChange={this.addTagToState}\n                      />\n                      <button className=\"add-tags\">Update Tags</button>\n                    </form>\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectTags;\n","import React, { Component } from 'react';\nimport DatePicker from 'react-date-picker';\n\nclass NewDatePicker extends Component {\n  state = {\n    date: new Date(),\n    madeChange: false,\n  }\n\n  onChange = date => {\n       this.setState({\n            date,\n            madeChange: true\n       });\n }\n\n handleDateSubmit = (event) => {\n      event.preventDefault();\n      console.log(\"HANDLE DATE SUBMIT\");\n      console.log(this.state.date);\n      const newDateTimestamp = Date.parse(this.state.date);\n      console.log(newDateTimestamp);\n\n      this.setState({\n           madeChange: false\n      });\n\n      this.props.setBookTimestamp(newDateTimestamp, this.props.book);\n}\n\n  render() {\n    return (\n      <div>\n      <form id=\"new-date-form\" onSubmit={this.handleDateSubmit} >\n        <DatePicker\n          locale={\"en-US\"}\n          maxDate={new Date()}\n          required\n          onChange={this.onChange}\n          value={this.state.date}\n        />\n        {this.state.madeChange === true &&\n             <button className=\"save-date\">Save Date</button>\n        }\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewDatePicker;\n","import React from 'react';\nimport Select from 'react-select';\nimport SelectRating from './SelectRating';\nimport Notes from './Notes';\nimport ReadDate from './ReadDate';\nimport Stars from './Stars';\nimport BookDate from './BookDate';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport SelectGenre from './SelectGenre';\nimport SelectTags from './SelectTags';\nimport DateFnsUtils from '@date-io/date-fns';\nimport MomentUtils from '@date-io/moment';\nimport NewDatePicker from './NewDatePicker';\nimport { DatePicker, KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faMinusCircle } from '@fortawesome/pro-light-svg-icons';\n\nconst shortid = require('shortid');\n\n///////////////////////////////////////////////////////////////////////\n\n\nclass BookEditor extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               currentlyEditingRating: false,\n               bookshelfRating: this.props.bookshelfRating,\n               currentlyEditingDate: false,\n               currentlyEditingGenre: false,\n               currentlyEditingTags: false,\n               viewDescription: false,\n               genre: this.props.book.genre,\n               tags: this.props.book.tags,\n          }\n     }\n\n\n     customToggle = () => {\n          console.log(\"Custom Toggle\");\n     }\n\n\n     currentlyEditingRating = () => {\n          console.log(\"currentlyEditingRating\");\n          this.setState({ currentlyEditingRating: true });\n     }\n\n\n     setRating = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setBookRating(selectedOption, this.props.book);\n               this.setState({\n                    bookshelfRating: selectedOption.value,\n                    currentlyEditingRating: false\n                });\n          }\n     }\n\n     resetRating = () => {\n          console.log(\"resetRating\");\n          this.props.resetRatingToZero(this.props.book);\n     }\n\n     resetTimestamp = () => {\n          console.log(\"resetRating\");\n          this.props.resetTimestampToZero(this.props.book);\n     }\n\n     resetGenre = () => {\n          console.log(\"resetGenre\");\n          this.setState({ genre: '' });\n          this.props.resetGenreToZero(this.props.book);\n     }\n\n     resetTags = () => {\n          console.log(\"resetTags\");\n          this.setState({ tags: [] });\n          this.props.resetAllTags(this.props.book);\n     }\n\n     currentlyEditingTags = () => {\n          console.log(\"currentlyEditingTags\");\n          console.log(\"POSSIBLE TAGS\");\n          console.log(this.props.tags);\n          this.setState({ currentlyEditingTags: true });\n     }\n\n     currentlyEditingGenre = () => {\n          console.log(\"currentlyEditingGenre\");\n          this.setState({ currentlyEditingGenre: true });\n     }\n\n     currentlyEditingDate = () => {\n          console.log(\"currentlyEditingDate\");\n          this.setState({ currentlyEditingDate: true });\n     }\n\n     setGenre = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setBookGenre(selectedOption, this.props.book);\n               this.props.addNewGenre(selectedOption.value);\n               this.setState({\n                    genre: selectedOption.value,\n                    currentlyEditingGenre: false\n                });\n          }\n     }\n\n\n     setTags = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n          }\n     }\n\n\n     selectedDate = new Date();\n\n\n     handleDateChange = (e, date) => {\n          console.log(e);\n          console.log(date);\n          let theDate = new Date(date);\n          let newDateTimestamp = theDate.getTime();\n          console.log(theDate);\n          this.props.setBookTimestamp(newDateTimestamp, this.props.book);\n          this.setState({ currentlyEditingDate: false });\n\n     }\n\n\n     customToggle = () => {\n          this.setState(prevState => ({\n            viewDescription: !prevState.viewDescription\n          }));\n     }\n\n\n     render() {\n\n          const description = this.props.description;\n\n          ///////////// Rating ////////////////////////////////////\n\n          let ratingArea = <div className=\"rating-area\">\n               Rating: <Stars bookshelfRating={this.state.bookshelfRating} /> <span className=\"edit-icon\" onClick={this.currentlyEditingRating} title=\"Edit Rating\"><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetRating} title=\"Remove Rating\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n          </div>;\n\n          if( this.state.currentlyEditingRating === true) {\n               ratingArea = <div className=\"rating-area\">\n                                   <SelectRating\n                                        setRating={this.setRating}\n                                        defaultRating={this.state.bookshelfRating}\n                                   />\n                              </div>;\n          }\n\n          if( this.state.currentlyEditingRating === false && this.state.bookshelfRating === 0 ) {\n               ratingArea = <div className=\"rating-area\">\n                                   <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingRating}>Set Rating</span> <span className=\"edit-icon\" onClick={this.currentlyEditingRating}><FontAwesomeIcon icon={faEdit} /></span>\n                              </div>;\n          }\n\n          ////////////// Date //////////////////////////////////////////\n\n          console.log(this.props.book);\n\n\n          let dateArea = <div className=\"date-area\">\n                              Date Completed: {this.props.dateCompleted} <span className=\"edit-icon\" title=\"Edit Date\" onClick={this.currentlyEditingDate}><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetTimestamp} title=\"Remove Date\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n                           </div>;\n\n            if( this.props.book.bookshelfTimestamp === 0) {\n                dateArea = <div className=\"date-area\">\n                                    <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingDate}>Set Date</span> <span className=\"edit-icon\" onClick={this.currentlyEditingDate}><FontAwesomeIcon icon={faEdit} /></span>\n                               </div>;\n           }\n\n           if( this.state.currentlyEditingDate === true) {\n                dateArea = <div id=\"date-picker-area\" className=\"date-area\">\n                                   <NewDatePicker\n                                        setBookTimestamp={this.props.setBookTimestamp}\n                                        book={this.props.book}\n                                   />\n                              </div>\n           }\n\n\n           ////////////// Genre //////////////////////////////////////////\n\n           let genreArea = <div className=\"genre-area\">\n                Genre: {this.state.genre} <span className=\"edit-icon\" onClick={this.currentlyEditingGenre} title=\"Edit Genre\"><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetGenre} title=\"Remove Genre\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n           </div>;\n\n           if( this.state.genre === null || this.state.genre === undefined || this.state.genre === '' ) {\n               genreArea = <div className=\"genre-area\">\n                                   <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingGenre}>Set Genre</span> <span className=\"edit-icon\" onClick={this.currentlyEditingGenre}><FontAwesomeIcon icon={faEdit} /></span>\n                              </div>;\n          }\n\n          if( this.state.currentlyEditingGenre === true) {\n               genreArea = <div className=\"genre-area\">\n                                   <SelectGenre\n                                        genres={this.props.genres}\n                                        setGenre={this.setGenre}\n                                        defaultGenre={this.state.genre}\n                                   />\n                              </div>;\n          }\n\n\n          ////////////// Tags //////////////////////////////////////////\n\n          let currentTags = null;\n          if( this.state.tags !== undefined && this.state.tags !== '' ) {\n               currentTags = this.state.tags.map((tag) =>\n                 <span className=\"single-tag\" key={shortid.generate()}>{tag}</span>\n               );\n          }\n\n          let tagArea = <div className=\"tag-area\">\n               Tags: {currentTags} <span className=\"edit-icon\" onClick={this.currentlyEditingTags} title=\"Edit Tags\"><FontAwesomeIcon icon={faEdit} /></span> <span className=\"edit-icon remove\" onClick={this.resetTags} title=\"Remove All Tags\"><FontAwesomeIcon icon={faMinusCircle} /></span>\n          </div>;\n\n          if( this.state.tags === null || this.state.tags === undefined || this.state.tags === '' || this.state.tags === [] ) {\n              tagArea = <div className=\"tag-area\">\n                                  <span className=\"edit-book-subtle-link\" onClick={this.currentlyEditingTags}>Add Tags</span> <span className=\"edit-icon\" title=\"Add Tags Now\" onClick={this.currentlyEditingTags}><FontAwesomeIcon icon={faEdit} /></span>\n                             </div>;\n         }\n\n         if( this.state.currentlyEditingTags === true) {\n              tagArea = <div className=\"tag-area\">\n                                  <SelectTags\n                                       allTags={this.props.tags}\n                                       setTags={this.setTags}\n                                       defaultTags={this.state.tags}\n                                       setBookTags={this.props.setBookTags}\n                                       book={this.props.book}\n                                       addNewTag={this.props.addNewTag}\n                                  />\n                             </div>;\n         }\n\n\n           /////////////////////////////////////////\n\n          return (\n\n               <>\n               <div className=\"modal-info-line modal-summary-rating-area\">\n                    {ratingArea}\n               </div>\n               <div className=\"modal-info-line modal-summary-date-finished-area\">\n                    {dateArea}\n               </div>\n\n               {this.props.useGenres &&\n                    <div className=\"modal-info-line modal-summary-genre-area\">\n                         {genreArea}\n                    </div>\n               }\n\n               {this.props.useTags &&\n                    <div className=\"modal-info-line modal-summary-tag-area\">\n                         {tagArea}\n                    </div>\n               }\n\n               <Accordion>\n                    <Accordion.Toggle onClick={this.customToggle} as={Button} variant=\"link\" eventKey=\"0\" className=\"already-read-description-toggle\">\n                     { this.state.viewDescription === true &&\n                          <h3>View Description –</h3>\n                     }\n                     { this.state.viewDescription === false &&\n                          <h3>View Description +</h3>\n                     }\n                    </Accordion.Toggle>\n                  <Accordion.Collapse eventKey=\"0\">\n                    <div className=\"book-description\" dangerouslySetInnerHTML={ { __html: description } }></div>\n                  </Accordion.Collapse>\n              </Accordion>\n               </>\n\n               );\n     }\n\n}\n\n\nexport default BookEditor;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Accordion from 'react-bootstrap/Accordion';\nimport BookButtonToRead from './BookButtonToRead.js';\nimport BookButtonAlreadyRead from './BookButtonAlreadyRead.js';\nimport EditBookForm from './EditBookForm.js';\nimport BookButtonRemove from './BookButtonRemove';\nimport BookButtonMoveToAlreadyRead from './BookButtonMoveToAlreadyRead';\nimport ReplaceCover from './ReplaceCover';\nimport Stars from './Stars';\nimport BookEditor from './BookEditor.js';\n\nimport SelectRating from './SelectRating';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faMinusCircle } from '@fortawesome/pro-light-svg-icons';\n\nexport default function BookModal(props) {\n\n     const [show, setShow] = React.useState(false);\n\n     const handleClose = () => setShow(false);\n     const handleShow = () => setShow(true);\n\n     let showDescription = false;\n     const customToggle = () => {\n          showDescription = !showDescription;\n     }\n\n     const book = props.book;\n     // console.log(book);\n\n     const bookCoverModal = props.bookCoverModal;\n     const bookTitleModal = props.bookTitleModal;\n\n     let coverImageURL = null;\n     let title = null;\n     let subtitle = null;\n     let hasSubtitle = false;\n     let description = null;\n     let authors = null;\n     let hasAuthor = false;\n     let authorClass = null;\n     let categories = null;\n     let authorsToPublish = null;\n     let dateToPublish = null;\n     let date = null;\n     let pageCount = null;\n     let bookshelfRating = null;\n     let bookshelfTimestamp = null;\n     let dateCompletedRaw = null;\n     let dateCompleted = null;\n     let genre = null;\n     let showDescriptionIndicator = \"+\";\n     let descriptionToPublish = null;\n\n     //console.log(props.searchResult);\n     if( props.searchResult !== undefined ) {\n          if( props.description !== '' && props.description !== undefined ) {\n          descriptionToPublish = (<div className=\"saved-for-later-description-area\">\n                                   <h3 className=\"saved-for-later-description-headline\">Description</h3>\n                                        <div className=\"saved-for-later-text\">\n                                        {props.description}\n                                        </div>\n                                   </div>);\n          //console.log(props.description);\n     } else { description = props.book.description; }\n     }\n\n\n     if( props.searchResult !== true ) {\n\n          title = book.title;\n          // console.log(title);\n          if( book.subtitle !== undefined ) {\n               hasSubtitle = true;\n               authorClass = \" has-subtitle\";\n               subtitle = <h3 className=\"book-subtitle\">{book.subtitle}</h3>;\n          }\n          if( book.authors !== undefined ) { authors = book.authors; }\n\n          categories = book.categories;\n          date = book.publishedDate;\n          pageCount = book.pageCount;\n          bookshelfRating = book.bookshelfRating;\n          bookshelfTimestamp = book.bookshelfTimestamp;\n          dateCompletedRaw = new Date(bookshelfTimestamp);\n          dateCompleted = dateCompletedRaw.toLocaleString(\"en-US\", {month: \"long\", day: \"numeric\", year: \"numeric\"});\n\n          genre = book.genre;\n          if( genre === undefined || genre === null ) { genre = 'Not Assigned'; }\n\n          // new image work here\n          if( book.coverImg == undefined || book.coverImg == null ) {\n               coverImageURL = 'https://firebasestorage.googleapis.com/v0/b/bookshelf-9d11e.appspot.com/o/images%2F400px%20x%20600px-r01BookNotPictured.jpg?alt=media&token=772367ce-e89a-400d-95fe-f76e9ea65385';\n          } else {\n               coverImageURL = book.coverImg;\n          }\n\n          if( book.authors !== undefined ) {\n               if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n               if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n               if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n\n               if( date ) {\n                    let yearOnly = date.toString()\n                    yearOnly = date.substring(0, 4);\n                    dateToPublish = ' (' + yearOnly + ')';\n               }\n\n               if( hasSubtitle ) {\n                    authorsToPublish = <div className={\"authors\" + authorClass}>{authorsToPublish}, {pageCount} pages {dateToPublish}</div>;\n               } else {\n                    authorsToPublish = <div className=\"authors\">{authorsToPublish}, {pageCount} pages {dateToPublish}</div>;\n               }\n          }\n\n          if( date ) {\n               let yearOnly = date.toString()\n               dateToPublish = 'Date: ' + yearOnly;\n          }\n\n     } else {\n\n               if( book.volumeInfo !== undefined ) {\n\n               coverImageURL = props.coverImageURL;\n\n               title = book.volumeInfo.title;\n               if( book.volumeInfo.subtitle !== undefined ) {\n                    hasSubtitle = true;\n                    authorClass = \" has-subtitle\";\n                    subtitle = <h3 className=\"book-subtitle\">{book.volumeInfo.subtitle}</h3>;\n               }\n               if( book.volumeInfo.authors !== undefined ) { authors = book.volumeInfo.authors; }\n\n               description = book.volumeInfo.description;\n               if( description !== undefined ) {\n                    if( showDescription === false ) { showDescriptionIndicator = \"+\"; }\n                    else if( showDescription === true ) { showDescriptionIndicator = \"–\"; }\n               }\n\n               categories = book.volumeInfo.categories;\n               date = book.publishedDate;\n               pageCount = book.volumeInfo.pageCount;\n\n               if( date ) {\n                    let yearOnly = date.toString()\n                    yearOnly = date.substring(0, 4);\n                    dateToPublish = ' (' + yearOnly + ')';\n               }\n\n               if( book.volumeInfo.authors !== undefined ) {\n                    if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n                    if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n                    if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n\n                    if( hasSubtitle ) {\n                         authorsToPublish = <div className={\"authors\" + authorClass}>{authorsToPublish}, {pageCount} pages {dateToPublish}</div>;\n                    } else {\n                         authorsToPublish = <div className=\"authors\">{authorsToPublish}, {pageCount} pages {dateToPublish}</div>;\n                    }\n               }\n\n\n          }\n\n     }\n\n     //console.log(props.bookshelfRating);\n     let editForm = null;\n     if( props.searchResult !== true ) {\n          if( props.alreadyRead !== true ) {\n               editForm = <EditBookForm\n                    book={book}\n                    hideRating={true}\n                    hideDate={true}\n                    bookshelfRating={props.bookshelfRating}\n                    bookshelfNote={props.bookshelfNote}\n                    bookshelfTimestamp={props.bookshelfTimestamp}\n                    editBook={props.editBook}\n               />;\n          } else if( props.alreadyRead ) {\n               editForm = <EditBookForm\n                    book={book}\n                    bookshelfRating={props.bookshelfRating}\n                    bookshelfNote={props.bookshelfNote}\n                    bookshelfTimestamp={props.bookshelfTimestamp}\n                    editBook={props.editBook}\n               />;\n          }\n     }\n\n     if( bookTitleModal ) {\n\n          if( showDescription === false ) { showDescriptionIndicator = \"+\"; }\n          else if( showDescription === true ) { showDescriptionIndicator = \"–\"; }\n\n          if( coverImageURL !== null ) {\n               //console.log(\"1-26 Update 1025am - COVER IMG URL: \" + coverImageURL);\n               if( coverImageURL.startsWith(\"http://\") ) {\n                    coverImageURL = coverImageURL.replace(\"http://\", \"https://\");\n                    //console.log(\"Updated COVER IMG URL: \" + coverImageURL);\n               }\n          }\n\n          return (\n            <>\n              <button onClick={handleShow} className=\"card-book-title\">\n                <h2 className=\"book-title\">{title}</h2>\n              </button>\n\n              <Modal show={show} onHide={handleClose} className={\"single-book-modal\" + \" font-\" + props.settingsFont + \" color-\" + props.settingsColor}>\n                <Modal.Header closeButton>\n                   <Modal.Title className=\"single-book-title\">{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                     <div className=\"small-thumbnail-area\">\n                          <img src={coverImageURL} />\n                          {props.searchResult !== true &&\n                               <ReplaceCover\n                                     bookObj={book}\n                                     updateCoverImg={props.updateCoverImg}\n                               />\n                          }\n                     </div>\n                     {subtitle}\n                     {authorsToPublish}\n\n                     {props.alreadyRead &&\n                     <BookEditor\n                         book={book}\n                         bookshelfRating={props.bookshelfRating}\n                         genre={genre}\n                         dateCompleted={dateCompleted}\n                         useGenres={props.useGenres}\n                         useTags={props.useTags}\n                         description={props.book.description}\n                         setBookRating={props.setBookRating}\n                         resetRatingToZero={props.resetRatingToZero}\n                         resetTimestampToZero={props.resetTimestampToZero}\n                         setBookGenre={props.setBookGenre}\n                         genres={props.genres}\n                         resetGenreToZero={props.resetGenreToZero}\n                         addNewGenre={props.addNewGenre}\n                         addNewTag={props.addNewTag}\n                         setBookTags={props.setBookTags}\n                         tags={props.tags}\n                         resetAllTags={props.resetAllTags}\n                         setBookTimestamp={props.setBookTimestamp}\n                     />\n                    }\n\n                    {props.savedForLater &&\n                         <div className=\"saved-for-later-description-area\">\n                         <h3 className=\"saved-for-later-description-headline\">Description</h3>\n                              <div className=\"saved-for-later-text\">\n                              {props.book.description}\n                              </div>\n                         </div>\n                    }\n\n                    {props.searchResult &&\n                         <>\n                         {descriptionToPublish}\n                         </>\n                    }\n\n                </Modal.Body>\n                <Modal.Footer>\n                <div className=\"book-meta button-area\">\n                { props.alreadyRead &&\n                     <BookButtonRemove\n                          book={book}\n                          context={'removeBookFromAlreadyRead'}\n                          removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                       />\n                }\n                { props.savedForLater &&\n                     <>\n                     <BookButtonRemove\n                          book={book}\n                          removeBook={props.removeBookFromToRead}\n                          context={'removeBookFromToRead'}\n                          removeBookFromToRead={props.removeBookFromToRead}\n                     />\n                     <BookButtonMoveToAlreadyRead\n                          book={props.book}\n                          moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                     />\n                     </>\n                }\n                { props.searchResult &&\n                     <>\n                     <BookButtonToRead\n                          book={props.book}\n                          addBookToRead={props.addBookToRead}\n                     />\n                     <BookButtonAlreadyRead\n                         book={props.book}\n                         addBookAlreadyRead={props.addBookAlreadyRead}\n                    />\n                     </>\n                }\n                </div>\n                </Modal.Footer>\n              </Modal>\n\n            </>\n          );\n\n     } else if ( bookCoverModal ) {\n\n          if( coverImageURL !== null ) {\n               //console.log(\"1-26 Update 1025am - COVER IMG URL: \" + coverImageURL);\n               if( coverImageURL.startsWith(\"http://\") ) {\n                    coverImageURL = coverImageURL.replace(\"http://\", \"https://\");\n                    //console.log(\"Updated COVER IMG URL: \" + coverImageURL);\n               }\n          }\n\n          let additionalModalClasses = null;\n          if( props.savedForLater === true ) { additionalModalClasses = \" saved-for-later\"; }\n          if( props.alreadyRead === true ) { additionalModalClasses = \" already-read\"; }\n          if( props.searchResult === true ) { additionalModalClasses = \" search-result\"; }\n\n          //console.log(\"DESCRIPTION: \" + props.book.description);\n\n          return (\n            <>\n              <div className=\"cover-image-area\">\n                   <button onClick={handleShow} className=\"card-book-cover\"><img src={coverImageURL} className=\"cover-image\" /></button>\n              </div>\n\n              <Modal show={show} onHide={handleClose} className={\"single-book-modal\" + \" font-\" + props.settingsFont + \" color-\" + props.settingsColor + additionalModalClasses}>\n                <Modal.Header closeButton>\n                  <Modal.Title className=\"single-book-title\">{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                     <div className=\"small-thumbnail-area\">\n                          <img src={coverImageURL} />\n                          {props.searchResult !== true &&\n                               <ReplaceCover\n                                    bookObj={book}\n                                    updateCoverImg={props.updateCoverImg}\n                               />\n                          }\n                     </div>\n                    {subtitle}\n                    {authorsToPublish}\n\n                    {props.alreadyRead &&\n                    <BookEditor\n                         book={book}\n                        bookshelfRating={props.bookshelfRating}\n                        genre={genre}\n                        dateCompleted={dateCompleted}\n                        useGenres={props.useGenres}\n                        useTags={props.useTags}\n                        description={props.book.description}\n                        setBookRating={props.setBookRating}\n                        resetRatingToZero={props.resetRatingToZero}\n                        resetTimestampToZero={props.resetTimestampToZero}\n                        setBookGenre={props.setBookGenre}\n                        genres={props.genres}\n                        resetGenreToZero={props.resetGenreToZero}\n                        addNewGenre={props.addNewGenre}\n                        addNewTag={props.addNewTag}\n                        setBookTags={props.setBookTags}\n                        tags={props.tags}\n                        resetAllTags={props.resetAllTags}\n                        setBookTimestamp={props.setBookTimestamp}\n                    />\n               }\n\n               {props.savedForLater &&\n                    <div className=\"saved-for-later-description-area\">\n                    <h3 className=\"saved-for-later-description-headline\">Description</h3>\n                         <div className=\"saved-for-later-text\">\n                         {props.book.description}\n                         </div>\n                    </div>\n               }\n\n               {props.searchResult &&\n                    <>\n                    {descriptionToPublish}\n                    </>\n               }\n\n                </Modal.Body>\n                <Modal.Footer>\n                <div className=\"book-meta button-area\">\n                { props.alreadyRead &&\n                     <BookButtonRemove\n                         book={book}\n                         context={'removeBookFromAlreadyRead'}\n                         removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                      />\n                }\n                { props.savedForLater &&\n                     <>\n                     <BookButtonRemove\n                          book={book}\n                          removeBook={props.removeBookFromToRead}\n                          context={'removeBookFromToRead'}\n                          removeBookFromToRead={props.removeBookFromToRead}\n                     />\n                     <BookButtonMoveToAlreadyRead\n                          book={props.book}\n                          moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                     />\n                     </>\n                }\n                { props.searchResult &&\n                     <>\n                     <BookButtonToRead\n                          book={props.book}\n                          addBookToRead={props.addBookToRead}\n                     />\n                     <BookButtonAlreadyRead\n                         book={props.book}\n                         addBookAlreadyRead={props.addBookAlreadyRead}\n                    />\n                     </>\n                }\n                </div>\n                </Modal.Footer>\n              </Modal>\n            </>\n          );\n\n     }\n\n}\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/pro-light-svg-icons';\n\nclass BookButtonBanFromSuggestions extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n          }\n     }\n\n     componentDidMount() {\n     }\n\n     clickRemoveBookSuggested = (event) => {\n          // 1. Stop the form from submitting\n          event.preventDefault();\n          const book = this.props.book;\n          console.log(book);\n          this.props.removeBookFromSuggestions(book);\n     }\n\n     render() {\n\n          return(\n               <>\n                    <button\n                         className=\"read-action remove-book\"\n                         title=\"Don't Suggest this Book Again\"\n                         onClick={this.clickRemoveBookSuggested}\n                    >\n                    <FontAwesomeIcon icon={faTrashAlt} />\n                    </button>\n               </>\n          );\n\n     }\n\n}\n\nexport default BookButtonBanFromSuggestions;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/pro-light-svg-icons';\nimport { faFileEdit } from '@fortawesome/pro-light-svg-icons';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport BookModal from './BookModal.js';\nimport BookButtonToRead from './BookButtonToRead.js';\nimport BookButtonAlreadyRead from './BookButtonAlreadyRead.js';\nimport BookButtonRemove from './BookButtonRemove.js';\nimport BookButtonMoveToAlreadyRead from './BookButtonMoveToAlreadyRead';\nimport BookButtonBanFromSuggestions from './BookButtonBanFromSuggestions.js';\nimport Stars from './Stars';\n\nclass BookCard extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n          this.state = {\n               originalBookJSON: null,\n               connected: false,\n            };\n\n     }\n\n     componentDidMount() {\n\n     }\n\n//      clickRemoveBookSuggested( event ) {\n//           event.preventDefault();\n//           console.log(this.props.book);\n// //          this.props.removeBookFromSuggestions(this.props.book);\n//      }\n\n\n\n     render() {\n\n          //console.log(this.props.book);\n\n          // console.log(this.state.originalBookJSON);\n          // console.log(this.state.connected);\n          let book = this.state.originalBookJSON;\n          let bookJSON = JSON.stringify(book);\n\n          if( this.state.connected === false) {\n               book = this.props.book;\n          }\n\n          if( book !== null ) {\n\n          // let coverImageURL = null;\n          let title = null;\n          let subtitle = null;\n          let authors = null;\n          let categories = null;\n          let authorsToPublish = null;\n          let dateToPublish = null;\n          let date = null;\n          let description = null;\n\n               title = book.title;\n               if( book.subtitle !== undefined ) { subtitle = book.subtitle; }\n               if( book.authors !== undefined ) { authors = book.authors; }\n\n               categories = book.categories;\n               date = book.publishedDate;\n\n               if( book.authors !== undefined ) {\n                    if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n                    if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n                    if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n               }\n\n               if( date ) {\n                    let yearOnly = date.toString()\n                    dateToPublish = 'Date: ' + yearOnly;\n               }\n\n          // show star ratings\n          //console.log(this.props.book.bookshelfRating);\n          let bookshelfRating = this.props.book.bookshelfRating;\n          let bookshelfNote = this.props.book.bookshelfNote;\n\n          let bookshelfTimestamp = this.props.book.bookshelfTimestamp;\n          //console.log(bookshelfTimestamp);\n\n          //console.log(this.props.removeBookFromAlreadyRead);\n\n\n               // If search results, get the covers straight from Google in correct JSON format\n               let coverImageURL = null;\n               if( this.props.searchResult ) {\n\n                         description = book.volumeInfo.description;\n                         //console.log(description);\n\n                         if( book.volumeInfo !== undefined ) {\n\n                         if( book.volumeInfo.imageLinks !== undefined ) {\n                              //console.log(book.volumeInfo.imageLinks.thumbnail);\n                              coverImageURL = book.volumeInfo.imageLinks.thumbnail;\n                              coverImageURL = book.volumeInfo.imageLinks.large;\n                              if( book.volumeInfo.imageLinks.large === undefined || book.volumeInfo.imageLinks.large === '' ) {\n                                   coverImageURL = book.volumeInfo.imageLinks.medium;\n                              }\n                              if( book.volumeInfo.imageLinks.medium === undefined || book.volumeInfo.imageLinks.medium === '' ) {\n                                   coverImageURL = book.volumeInfo.imageLinks.small;\n                              }\n                              if( book.volumeInfo.imageLinks.small === undefined || book.volumeInfo.imageLinks.small === '' ) {\n                                   coverImageURL = book.volumeInfo.imageLinks.smallThumbnail;\n                              }\n                              if( book.volumeInfo.imageLinks.smallThumbnail === undefined ) {\n                                   coverImageURL = book.volumeInfo.imageLinks.thumbnail;\n                              }\n                         }\n\n\n                         if( book.volumeInfo.authors !== undefined ) {\n                              authors = book.volumeInfo.authors;\n                              if( authors.length === 1 ) { authorsToPublish = 'By ' + authors; }\n                              if( authors.length === 2 ) { authorsToPublish = 'By ' + authors.join(' & '); }\n                              if( authors.length > 2 ) { authorsToPublish = 'By ' + authors.join(', '); }\n\n                         }\n\n                    }\n               }\n\n\n\n               /////////////////////////////////////////////////////////////////////////////\n\n\n          return(\n\n               <div className=\"book-card\" id={book.id}>\n                    <BookModal\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                         bookCoverModal={true}\n                         book={book}\n                         alreadyRead={this.props.alreadyRead}\n                         savedForLater={this.props.savedForLater}\n                         coverImageURL={coverImageURL}\n                         addBookToRead={this.props.addBookToRead}\n                         addBookAlreadyRead={this.props.addBookAlreadyRead}\n                         editBook={this.props.editBook}\n                         bookshelfRating={bookshelfRating}\n                         bookshelfNote={bookshelfNote}\n                         bookshelfTimestamp={bookshelfTimestamp}\n                         removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                         removeBookFromToRead={this.props.removeBookFromToRead}\n                         searchResult={this.props.searchResult}\n                         moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                         updateCoverImg={this.props.updateCoverImg}\n                         useGenres={this.props.useGenres}\n                         useTags={this.props.useTags}\n                         setBookRating={this.props.setBookRating}\n                         resetRatingToZero={this.props.resetRatingToZero}\n                         resetTimestampToZero={this.props.resetTimestampToZero}\n                         setBookGenre={this.props.setBookGenre}\n                         genres={this.props.genres}\n                         resetGenreToZero={this.props.resetGenreToZero}\n                         addNewGenre={this.props.addNewGenre}\n                         addNewTag={this.props.addNewTag}\n                         setBookTags={this.props.setBookTags}\n                         tags={this.props.tags}\n                         resetAllTags={this.props.resetAllTags}\n                         setBookTimestamp={this.props.setBookTimestamp}\n                         description={description}\n                         createNotification={this.props.createNotification}\n                    />\n                    <BookModal\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                         bookTitleModal={true}\n                         book={book}\n                         alreadyRead={this.props.alreadyRead}\n                         savedForLater={this.props.savedForLater}\n                         coverImageURL={coverImageURL}\n                         addBookToRead={this.props.addBookToRead}\n                         addBookAlreadyRead={this.props.addBookAlreadyRead}\n                         editBook={this.props.editBook}\n                         bookshelfRating={bookshelfRating}\n                         bookshelfNote={bookshelfNote}\n                         bookshelfTimestamp={bookshelfTimestamp}\n                         removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                         removeBookFromToRead={this.props.removeBookFromToRead}\n                         searchResult={this.props.searchResult}\n                         moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                         updateCoverImg={this.props.updateCoverImg}\n                         useGenres={this.props.useGenres}\n                         useTags={this.props.useTags}\n                         setBookRating={this.props.setBookRating}\n                         resetRatingToZero={this.props.resetRatingToZero}\n                         resetTimestampToZero={this.props.resetTimestampToZero}\n                         setBookGenre={this.props.setBookGenre}\n                         genres={this.props.genres}\n                         resetGenreToZero={this.props.resetGenreToZero}\n                         addNewGenre={this.props.addNewGenre}\n                         addNewTag={this.props.addNewTag}\n                         setBookTags={this.props.setBookTags}\n                         tags={this.props.tags}\n                         resetAllTags={this.props.resetAllTags}\n                         setBookTimestamp={this.props.setBookTimestamp}\n                         description={description}\n                         createNotification={this.props.createNotification}\n                    />\n                    <div className=\"book-meta-area\">\n                         <div className=\"book-meta author\">{authorsToPublish}</div>\n                         <div className=\"book-meta button-area\">\n                         { this.props.alreadyRead === true &&\n                              <>\n                              <Stars bookshelfRating={bookshelfRating} />\n                              </>\n                         }\n                         { this.props.toRead === true &&\n                              <>\n                              <BookButtonRemove\n                                   book={this.props.book}\n                                   removeBook={this.props.removeBookFromToRead}\n                                   context={'removeBookFromToRead'}\n                                   removeBookFromToRead={this.props.removeBookFromToRead}\n                              />\n                              <BookButtonMoveToAlreadyRead\n                                   book={this.props.book}\n                                   moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                                   createNotification={this.props.createNotification}\n                              />\n                              </>\n                         }\n                         { this.props.searchResult === true &&\n                              <>\n\n                              {this.props.removeBookFromSuggestions &&\n                                   <BookButtonBanFromSuggestions\n                                        book={this.props.book}\n                                        removeBookFromSuggestions={this.props.removeBookFromSuggestions}\n                                   />\n                              }\n                              <BookButtonToRead\n                                   book={this.props.book}\n                                   addBookToRead={this.props.addBookToRead}\n                              />\n                              <BookButtonAlreadyRead\n                                   book={this.props.book}\n                                   addBookAlreadyRead={this.props.addBookAlreadyRead}\n                              />\n                              </>\n                         }\n                         </div>\n                    </div>\n               </div>\n\n          );\n\n          } else {\n          return 'NOT WORKING';\n     }\n\n}\n\n}\n\nexport default BookCard;\n","import React from 'react';\nimport BookCard from './BookCard';\n\nfunction RecentlyAddedToRead(props) {\n\n     const booksToRead = props.booksToRead;\n     let orderedBooks = null;\n     // console.log(booksToRead);\n     // console.log(booksToRead.length);\n\n      if( booksToRead !== undefined && booksToRead.length !== 0 ) {\n\n           // New sorting\n           orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                // If the first item has a higher number, move it down\n                // If the first item has a lower number, move it up\n                if (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                if (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                // If the count number is the same between both items, sort alphabetically\n                // If the first item comes first in the alphabet, move it up\n                // Otherwise move it down\n                if (a.title > b.title) return 1;\n                if (a.title < b.title) return -1;\n\n           });\n\n           let orderedBooksToPublish = orderedBooks.slice(0, 4);\n\n            return (\n                <div className=\"recently-added-to-read-area\">\n                    <h2 className=\"section-title\">Up Next</h2>\n                         <div className=\"results-grid four-col\">\n                        {orderedBooksToPublish.map((book, index) => (\n                             <BookCard\n                                      key={book.id}\n                                      book={book}\n                                      editBook={props.editBook}\n                                      moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                                      removeBookFromToRead={props.removeBookFromToRead}\n                                      addNewImagesToRead={props.addNewImagesToRead}\n                                      savedForLater={true}\n                                      toRead={true}\n                                      settingsFont={props.settingsFont}\n                                      settingsColor={props.settingsColor}\n                                      updateCoverImg={props.updateCoverImg}\n                              />\n                      ))}\n                      </div>\n                </div>\n          );\n\n     } else {\n\n          return (\n              <div className=\"recently-added-to-read-area nothing-yet\">\n                    <p>Time to <a href=\"/bookshelf/#search\">add more books</a> to your shelf!</p>\n              </div>\n        );\n\n     }\n}\n\nexport default RecentlyAddedToRead;\n","import React from 'react';\nimport BookCard from './BookCard';\n\nfunction RecentlyAddedAlreadyRead(props) {\n\n     const booksAlreadyRead = props.booksAlreadyRead;\n     let orderedBooks = null;\n     // console.log(booksToRead);\n     // console.log(booksToRead.length);\n\n      if( booksAlreadyRead !== undefined && booksAlreadyRead.length !== 0 ) {\n\n           // New sorting\n           orderedBooks = [...booksAlreadyRead].sort(function (a, b) {\n\n                // If the first item has a higher number, move it down\n                // If the first item has a lower number, move it up\n                if (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                if (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                // If the count number is the same between both items, sort alphabetically\n                // If the first item comes first in the alphabet, move it up\n                // Otherwise move it down\n                if (a.title > b.title) return 1;\n                if (a.title < b.title) return -1;\n\n           });\n\n           let orderedBooksToPublish = orderedBooks.slice(0, 4);\n\n            return (\n                <div className=\"recently-added-already-read-area\">\n                <h2 className=\"section-title\">Just Finished</h2>\n                         <div className=\"results-grid four-col\">\n                        {orderedBooksToPublish.map((book, index) => (\n                             <BookCard\n                                      key={book.id}\n                                      book={book}\n                                      editBook={props.editBook}\n                                      moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n                                      removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n                                      addNewImagesAlreadyRead={props.addNewImagesAlreadyRead}\n                                      alreadyRead={true}\n                                      settingsFont={props.settingsFont}\n                                      settingsColor={props.settingsColor}\n                                      updateCoverImg={props.updateCoverImg}\n                                      setBookRating={props.setBookRating}\n                                      resetRatingToZero={props.resetRatingToZero}\n                                      resetTimestampToZero={props.resetTimestampToZero}\n                                      setBookTimestamp={props.setBookTimestamp}\n                              />\n                      ))}\n                      </div>\n                </div>\n          );\n\n     } else {\n\n          return (\n              <div className=\"recently-added-already-read-area nothing-yet\">\n              </div>\n        );\n\n     }\n}\n\nexport default RecentlyAddedAlreadyRead;\n","import React from 'react';\nimport RecentlyAddedToRead from './RecentlyAddedToRead';\nimport RecentlyAddedAlreadyRead from './RecentlyAddedAlreadyRead';\n\n\n/// This page is once you've already logged in\n\nfunction Landing(props) {\n\n  return (\n    <div className=\"landing-page-area single-page\">\n      { props.notification &&\n           <div className=\"notification-area\">{props.notification}</div>\n      }\n      <RecentlyAddedToRead\n          booksToRead={props.booksToRead}\n          editBook={props.editBook}\n          moveBooktoAlreadyRead={props.moveBooktoAlreadyRead}\n          removeBookFromToRead={props.removeBookFromToRead}\n          addNewImagesToRead={props.addNewImagesToRead}\n          settingsFont={props.settingsFont}\n          settingsColor={props.settingsColor}\n          updateCoverImg={props.updateCoverImg}\n      />\n      <RecentlyAddedAlreadyRead\n          booksAlreadyRead={props.booksAlreadyRead}\n          editBook={props.editBook}\n          removeBookFromAlreadyRead={props.removeBookFromAlreadyRead}\n          addNewImagesAlreadyRead={props.addNewImagesAlreadyRead}\n          settingsFont={props.settingsFont}\n          settingsColor={props.settingsColor}\n          updateCoverImg={props.updateCoverImg}\n          setBookRating={props.setBookRating}\n          resetRatingToZero={props.resetRatingToZero}\n          resetTimestampToZero={props.resetTimestampToZero}\n          setBookTimestamp={props.setBookTimestamp}\n      />\n    </div>\n  );\n}\n\nexport default Landing;\n","import React from \"react\";\nimport Label from \"./Label.js\";\n\nconst Input = (props) => (\n  <div className=\"form-group\">\n    <input className=\"form-control\" {...props}/>\n  </div>\n)\n\nexport default Input;\n\n// make sure the <Input> component uses a closing tag rather than being self-closing so you can put the label text in the {props.children} location\n\n//  You will also need props for the 'for' and 'id' properties (labeled above as 'props.control'), as well as the placeholder.\n","import axios from \"axios\";\n\nexport default {\n  // Searches the NYT books according to the search criteria given in the form\n  getNewBooks: function(title) {\n    return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + title + \"&maxResults=36\" + \"&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU\");\n  },\n  // Gets saved Books\n  getSavedBooks: function() {\n    return axios.get(\"/api/books/\");\n  },\n  // Deletes the Book with the given id\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a Book to the database\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  }\n};\n","import React from 'react';\nimport BookCard from './BookCard.js';\n\nclass Results extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          books: [],\n          noResults: false,\n          notification: this.props.notification,\n       };\n\n     }\n\n     componentDidMount() {\n          // console.log(this.props);\n          // console.log(this.props.location);\n          const data = this.props.location.data;\n          // console.log(data);\n          if (data && data.results.length > 0) {\n\n           this.setState({\n             books: data.results.filter((value, index) => index < 40),\n           });\n         } else {\n           this.setState({\n             noResults: true\n           });\n         }\n\n     }\n\n     render() {\n\n          // console.log(this.state.books);\n          // console.log(this.props.addBookAlreadyRead);\n\n          let notificationArea = null;\n          if( this.state.noResults !== true && this.props.notification ) {\n\n               let currentTimestamp = Date.now();\n               if( this.props.notificationTimestamp > currentTimestamp - 1000 ) {\n                    notificationArea = ( <div className=\"notification-area\">{this.props.notification}</div> );\n               }\n          }\n\n       return (\n         <div className=\"results-page-area single-page\">\n         { notificationArea }\n           <h1>Search Results</h1>\n\n           <div className=\"results-grid\">\n           {this.state.books.map((book, index) => (\n                <BookCard\n                         key={book.id}\n                         book={book}\n                         searchResult={true}\n                         addBookAlreadyRead={this.props.addBookAlreadyRead}\n                         addBookToRead={this.props.addBookToRead}\n                         settingsFont={this.props.settingsFont}\n                         settingsColor={this.props.settingsColor}\n                    />\n          ))}\n          </div>\n         </div>\n       );\n\n     }\n}\n\nexport default Results;\n","import React from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport Input from './Input.js';\nimport API from \"../utils/API\";\nimport Results from './Results.js';\n\nclass Search extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          title: \"\",\n          toResults: false,\n          results: []\n       };\n\n     }\n\n     componentDidMount() {\n          console.log(\"Search mounted\");\n     }\n\n     handleInputChange = event => {\n          const { name, value } = event.target;\n               this.setState({\n                    [name]: value\n               });\n     };\n\n     handleFormSubmit = event => {\n          event.preventDefault();\n          if (this.state.title) {\n\n               const title = this.state.title.trim();\n               console.log(title);\n\n               API.getNewBooks(title)\n                  .then(res => {\n\n                    console.log(res.data.items);\n\n                    this.setState({\n                      toResults: true,\n                      results: res.data.items\n                    });\n                  })\n                  .catch(err => console.log(err));\n              }\n     }\n\n\nrender() {\n\n          console.log(this.state.title);\n\n          if (this.state.toResults) {\n           return <Redirect to={{\n             pathname: \"/results\",\n             data: { results: this.state.results }\n           }} />\n         }\n\n       return (\n         <div className=\"search-page-area single-page\">\n           <h1>Search for Books</h1>\n           <form id=\"book-title-search\">\n                 <Input\n                   value={this.state.title}\n                   onChange={this.handleInputChange}\n                   name=\"title\"\n                   label=\"Book Title\"\n                   placeholder=\"Search for a book title or author...\"\n                 />\n                 <button\n                   onClick={this.handleFormSubmit}\n                   className=\"btn btn-info\"\n                 >\n                   Find It\n                 </button>\n          </form>\n\n          <div className=\"recommended-section\">\n               <button id=\"show-recommended\"><a href=\"#/recommended\">Get Ideas Based on Your Bookshelf</a></button>\n          </div>\n\n         </div>\n       );\n\n }\n\n}\n\nexport default Search;\n","import React from 'react';\nimport API from \"../utils/API\";\nimport Results from './Results.js';\nimport BookCard from './BookCard.js';\n\nconst shortid = require('shortid');\n\nclass RecommendationsSection extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          authors: this.props.authors,\n          results: [],\n          searching: true,\n       };\n\n       this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n\n     }\n\n\n\n     componentDidMount() {\n\n                  const authorsRaw = this.props.authors;\n                  //let authors = authorsObj.map(author => author.name);\n                  console.log(\"RecommendationsSection mounted\");\n                  console.log(authorsRaw);\n\n                  const authors = authorsRaw.map( author => ( author.name ));\n                  this.setState({ authors: authors });\n                  console.log(authors);\n\n                  if (authors) {\n\n                       authors.forEach(author => {\n\n                            console.log( author );\n                            this.setState({ searching: true });\n\n                            API.getNewBooks(author)\n                               .then(res => {\n\n                                 //console.log(res.data.items);\n\n                                 this.setState({\n                                      results: [...this.state.results, ...res.data.items ],\n                                      searching: false\n                                 })\n                               })\n                               .catch(err => console.log(err));\n\n                       });\n\n                      }\n\n     }\n\n\n     forceUpdateHandler(){\n         this.forceUpdate();\n       };\n\n\nrender() {\n\n         console.log(this.props.authors);\n         console.log(this.props.removedFromSuggestions);\n         const results = this.state.results;\n         const authors = this.state.authors;\n         const banned = this.props.removedFromSuggestions;\n\n         // filter out any books that Google found that don't match the recommended authors\n         const filteredBooksByAuthor = results.filter(function(book) {\n              //console.log(book);\n              if( book.volumeInfo.authors !== undefined ) {\n                   //console.log(book.volumeInfo.authors.indexOf());\n                  return book.volumeInfo.authors.some( r => authors.indexOf(r) >= 0);\n             } else {\n                  return null;\n             }\n           //return book.volumeInfo.authors;\n         });\n\n         // WORK HERE TO REMOVE BOOK DUPLICATES esp by ID\n         const currentShelfIDs = this.props.books.map(book => book.id);\n         let filteredBooksRemoveDups = filteredBooksByAuthor.filter(function(book) {\n                  return !currentShelfIDs.includes(book.id);\n         });\n\n         console.log(filteredBooksRemoveDups);\n\n         // WORK HERE TO REMOVE removeBookFromSuggestions by ID\n         let removedBanned = filteredBooksRemoveDups.filter(function(book) {\n                  return !banned.includes(book.id);\n         });\n         console.log(removedBanned);\n\n\n         // WORK HERE TO REMOVE all books that are not in English\n         // bookObj.volumeInfo.language !== 'en'\n         let removedForeign = removedBanned.filter(function(book) {\n              let bookLanguage = '';\n              if (book.hasOwnProperty('volumeInfo')) {\n                  if (book.volumeInfo.hasOwnProperty('language')) {\n                        // do something\n                        console.log(\"Test Remove Languages\");\n                        console.log( book.volumeInfo.language );\n                        bookLanguage = book.volumeInfo.language;\n                    }\n               }\n\n                return bookLanguage === 'en';\n         });\n         console.log(\"removedForeign\");\n         console.log(removedForeign);\n\n\n         //filteredBooksRemoveDups = this.removeDuplicates( filteredBooksRemoveDups );\n         console.log( filteredBooksByAuthor );\n         console.log( filteredBooksRemoveDups );\n         console.log( results );\n         console.log(filteredBooksByAuthor);\n\n        // const uniqueBooks = Array.from(new Set(filteredBooksByAuthor.map(book => book.id)))\n        //    .map(id => {\n        //      return filteredBooksByAuthor.find(book => book.id === id)\n        // });\n        // console.log(uniqueBooks);\n\n        const uniqueBooks = Array.from(new Set(removedForeign.map(book => book.id)))\n           .map(id => {\n            return removedForeign.find(book => book.id === id)\n        });\n        console.log(uniqueBooks);\n\n\n        // now select 24 random books out of the list\n        let bookIndices = [];\n        console.log(uniqueBooks.length);\n        if( uniqueBooks.length > 24 ) {\n             while(bookIndices.length < 24) {\n                  let index = Math.floor(Math.random()*uniqueBooks.length);\n                  if(!bookIndices.includes(index)) { bookIndices.push(index); }\n             }\n        }\n\n        console.log(bookIndices);\n        const finalBooksToPublish = bookIndices.map((arrayIndex, index) =>  uniqueBooks[arrayIndex] );\n        console.log(finalBooksToPublish);\n\n        console.log(\"removedFromSuggestions\" + this.props.removedFromSuggestions);\n\n       return (\n         <div className=\"recommendations-page-area single-page\">\n                <p>More books by authors that you've liked:</p>\n               <div className=\"results-grid\">\n                    {finalBooksToPublish.map((book, index) => (\n                         <BookCard\n                                  key={book.id}\n                                  book={book}\n                                  searchResult={true}\n                                  addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                  addBookToRead={this.props.addBookToRead}\n                                  settingsFont={this.props.settingsFont}\n                                  settingsColor={this.props.settingsColor}\n                                  removeBookFromSuggestions={this.props.removeBookFromSuggestions}\n                             />\n                   ))}\n              </div>\n              { this.state.results &&\n                   <button id=\"more-ideas-refresh\" onClick= {this.forceUpdateHandler}>Get More Ideas</button>\n              }\n         </div>\n       );\n\n }\n\n}\n\nexport default RecommendationsSection;\n","import React from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport Input from './Input.js';\nimport API from \"../utils/API\";\nimport Results from './Results.js';\nimport BookCard from './BookCard.js';\nimport RecommendationsSection from './RecommendationsSection.js';\n\nconst shortid = require('shortid');\n\nclass Recommended extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n          authors: [],\n          calculating: true\n       };\n\n     }\n\n\n     removeDuplicates(array) {\n       array.splice(0, array.length, ...(new Set(array)))\n     };\n\n\n     getAverageRating(books) {\n\n          let starRatingsArray = [];\n          if( starRatingsArray === undefined ) { return null; }\n          for( let i = 0; i < books.length; i++ ) {\n               if( books[i].bookshelfRating > 0 ) {\n                    starRatingsArray.push(parseInt(books[i].bookshelfRating));\n               }\n          }\n          if( starRatingsArray.length === 0 ) { return null; }\n          let sum = starRatingsArray.reduce((previous, current) => current += previous);\n          let avg = sum / starRatingsArray.length;\n          let avgToPublish = avg.toFixed(2);\n\n          return avg;\n     }\n\n\n     componentDidMount() {\n\n          console.log( \"RECOMMENDED MOUNTED\" );\n          const books = this.props.books;\n          console.log(books);\n          const rawAuthors = books.map((book, index) => ( book.authors )).flat();\n          const removeDupAuthors = this.removeDuplicates(rawAuthors);\n          console.log(rawAuthors);\n\n               let authorsObj = rawAuthors.map((author, index) => {\n                    console.log(author);\n                     const bookArrayByAuthor = books.filter(book => book.authors.includes(author) && book.alreadyRead === true);\n                     console.log(bookArrayByAuthor);\n                     let avgRatingForAuthor = this.getAverageRating(bookArrayByAuthor);\n                     return { name: author, id: shortid.generate(), books: bookArrayByAuthor, avgRating: avgRatingForAuthor };\n               });\n               console.log(authorsObj);\n\n               const authorListToPublish = [...authorsObj].filter(author => author.books.length > 0  && author.avgRating > 2 )\n\n                    .sort(function (a, b) {\n\n                    // If the first item has a higher number, move it down\n                    // If the first item has a lower number, move it up\n                    if (a.avgRating > b.avgRating) return -1;\n                    if (a.avgRating < b.avgRating) return 1;\n\n                    // If the count number is the same between both items, sort alphabetically\n                    // If the first item comes first in the alphabet, move it up\n                    // Otherwise move it down\n                    if (a.name > b.name) return 1;\n                    if (a.name < b.name) return -1;\n\n               });\n\n               console.log(authorListToPublish);\n\n               // now select 6 random authors to be highlighted on the suggestion page\n               // let authorIndices = [];\n               // for( let i = 0; i < 24; i++ ) {\n               //      authorIndices.push(Math.floor(Math.random()*authorListToPublish.length));\n               // }\n               // console.log(authorIndices);\n               // console.log(authorListToPublish[2]);\n               // const recAuthorsRaw = authorIndices.map((arrayIndex, index) =>  authorListToPublish[arrayIndex] );\n               // console.log(recAuthorsRaw);\n\n               this.setState({\n                    authors: authorListToPublish,\n                    calculating: false\n               });\n\n     }\n\n\nrender() {\n\n     const books = this.props.books;\n     console.log(this.state.authors);\n\n       return (\n         <div className=\"search-page-area single-page\">\n           <h1>Ideas for You</h1>\n\n           { this.state.calculating === false &&\n                <RecommendationsSection\n                    authors={this.state.authors}\n                    books={books}\n                    removedFromSuggestions={this.props.removedFromSuggestions}\n                    removeBookFromSuggestions={this.props.removeBookFromSuggestions}\n                    addBookAlreadyRead={this.props.addBookAlreadyRead}\n                    addBookToRead={this.props.addBookToRead}\n                />\n           }\n\n         </div>\n       );\n\n }\n\n}\n\nexport default Recommended;\n","import React from 'react';\n\nconst Logout = (props) => {\n\n     return (\n          <button type=\"submit\" onClick={props.logOutUser} className=\"settings-button\">Log Out</button>\n     );\n\n}\n\nexport default Logout;\n","import React from 'react';\n\nconst ChangePassword = (props) => {\n\n     return (\n          <button type=\"submit\" onClick={props.resetPassword} className=\"settings-button\">Change Password via Email Link</button>\n     );\n\n}\n\nexport default ChangePassword;\n","import React from 'react';\n\nconst DeleteAccount = (props) => {\n\n     const nowDeleteAccount = (event) => {\n          props.deleteAccount();\n     }\n\n     return (\n          <button\n               className=\"settings-button delete-account\"\n               type=\"submit\"\n               onClick={e =>\n            window.confirm(\n              \"Are you sure you want to permanelty delete your account? All of your information will be removed. You cannot undo this action.\"\n         ) && nowDeleteAccount()\n          }>Delete My Account</button>\n     );\n\n}\n\nexport default DeleteAccount;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectThemeColor extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setColor = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsColor(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsColor = this.props.settingsColor;\n          console.log(settingsColor);\n\n               var myColorToPublish = null;\n               if( settingsColor === 'default' ) { myColorToPublish = 'Default (Dark Blue)'; }\n               if( settingsColor === 'gray' ) { myColorToPublish = 'Gray'; }\n               if( settingsColor === 'green' ) { myColorToPublish = 'Green'; }\n               if( settingsColor === 'orange' ) { myColorToPublish = 'Orange'; }\n               if( settingsColor === 'purple' ) { myColorToPublish = 'Purple'; }\n\n          let defaultColorPublish = {\n               value: settingsColor,\n               label: myColorToPublish\n          };\n          if( settingsColor === null ) { defaultColorPublish = null; }\n\n          const colorOptions = [\n               { value: 'default', label: 'Default (Dark Blue)' },\n               { value: 'gray', label: 'Gray' },\n               { value: 'green', label: 'Green' },\n               { value: 'orange', label: 'Orange' },\n               { value: 'purple', label: 'Purple' },\n          ];\n\n          if( defaultColorPublish ) {\n\n               return (\n                 <Select\n                    placeholder='Select Color Theme'\n                    options={colorOptions}\n                    defaultValue={defaultColorPublish}\n                    isSearchable\n                    onChange={this.setColor}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select Color Theme'\n                    options={colorOptions}\n                    isSearchable\n                    onChange={this.setColor}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectThemeColor;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectThemeFont extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setFont = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsFont(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsColor = this.props.settingsFont;\n          console.log(settingsColor);\n\n               var myColorToPublish = null;\n               if( settingsColor === 'default' ) { myColorToPublish = 'Default'; }\n               if( settingsColor === 'handwritten' ) { myColorToPublish = 'Handwritten'; }\n               if( settingsColor === 'typewriter' ) { myColorToPublish = 'Typewriter'; }\n               if( settingsColor === 'sans' ) { myColorToPublish = 'Sans Serif'; }\n               if( settingsColor === 'serif' ) { myColorToPublish = 'Serif'; }\n\n          let defaultColorPublish = {\n               value: settingsColor,\n               label: myColorToPublish\n          };\n          if( settingsColor === null ) { defaultColorPublish = null; }\n\n          const colorOptions = [\n               { value: 'default', label: 'Default' },\n               { value: 'handwritten', label: 'Handwritten' },\n               { value: 'typewriter', label: 'Typewriter' },\n               { value: 'sans', label: 'Sans Serif' },\n               { value: 'serif', label: 'Serif' },\n          ];\n\n          if( defaultColorPublish ) {\n\n               return (\n                 <Select\n                    placeholder='Select Font'\n                    options={colorOptions}\n                    defaultValue={defaultColorPublish}\n                    isSearchable\n                    onChange={this.setFont}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select Font'\n                    options={colorOptions}\n                    isSearchable\n                    onChange={this.setFont}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectThemeFont;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectBookSize extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setBookSize = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsBookSize(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsBookSize = this.props.bookSize;\n          console.log(settingsBookSize);\n\n               var myBookSizesToPublish = null;\n               if( settingsBookSize === 'default' ) { myBookSizesToPublish = 'Default (Medium)'; }\n               if( settingsBookSize === 'large' ) { myBookSizesToPublish = 'Large'; }\n               if( settingsBookSize === 'small' ) { myBookSizesToPublish = 'Small'; }\n\n          let defaultBookSizePublish = {\n               value: settingsBookSize,\n               label: myBookSizesToPublish\n          };\n          if( settingsBookSize === null ) { defaultBookSizePublish = null; }\n\n          const bookSizes = [\n               { value: 'default', label: 'Default (Medium)' },\n               { value: 'large', label: 'Large' },\n               { value: 'small', label: 'Small' },\n          ];\n\n          if( defaultBookSizePublish ) {\n\n               return (\n                 <Select\n                    placeholder='Select Cover Size'\n                    options={bookSizes}\n                    defaultValue={defaultBookSizePublish}\n                    isSearchable\n                    onChange={this.setBookSize}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select Cover Size'\n                    options={bookSizes}\n                    isSearchable\n                    onChange={this.setBookSize}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectBookSize;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectUseGenres extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setUseGenres = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsUseGenres(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsUseGenres = this.props.useGenres;\n          console.log(settingsUseGenres);\n\n               var myGenreSettingsToPublish = null;\n               if( settingsUseGenres === true ) { myGenreSettingsToPublish = 'Yes'; }\n               if( settingsUseGenres === false ) { myGenreSettingsToPublish = 'No'; }\n\n          let defaultUseGenres = {\n               value: settingsUseGenres,\n               label: myGenreSettingsToPublish\n          };\n          if( settingsUseGenres === null ) {\n               defaultUseGenres = null;\n          }\n\n          const useGenres = [\n               { value: true, label: 'Yes' },\n               { value: false, label: 'No' },\n          ];\n\n          if( defaultUseGenres ) {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useGenres}\n                    defaultValue={defaultUseGenres}\n                    isSearchable\n                    onChange={this.setUseGenres}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useGenres}\n                    isSearchable\n                    onChange={this.setUseGenres}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectUseGenres;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectUseTags extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setUseTags = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeSettingsUseTags(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const settingsUseTags = this.props.useTags;\n          console.log(settingsUseTags);\n\n               var myTagSettingsToPublish = null;\n               if( settingsUseTags === true ) { myTagSettingsToPublish = 'Yes'; }\n               if( settingsUseTags === false ) { myTagSettingsToPublish = 'No'; }\n\n          let defaultUseTags = {\n               value: settingsUseTags,\n               label: myTagSettingsToPublish\n          };\n          if( settingsUseTags === null ) {\n               defaultUseTags = null;\n          }\n\n          const useTags = [\n               { value: true, label: 'Yes' },\n               { value: false, label: 'No' },\n          ];\n\n          if( defaultUseTags ) {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useTags}\n                    defaultValue={defaultUseTags}\n                    isSearchable\n                    onChange={this.setUseTags}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Select One'\n                    options={useTags}\n                    isSearchable\n                    onChange={this.setUseTags}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectUseTags;\n","import React from 'react';\nimport Logout from './Logout.js';\nimport ChangePassword from './ChangePassword.js';\nimport DeleteAccount from './DeleteAccount.js';\nimport SelectThemeColor from './SelectThemeColor.js';\nimport SelectThemeFont from './SelectThemeFont.js';\nimport SelectBookSize from './SelectBookSize.js';\nimport SelectUseGenres from './SelectUseGenres.js';\nimport SelectUseTags from './SelectUseTags.js';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\nclass Settings extends React.Component {\n\n\n     constructor(props) {\n          super(props);\n\n          this.state = {\n              emailedResetLink: false,\n            };\n\n     }\n\n\n\n     resetPassword = () => {\n\n          var auth = firebaseApp.auth();\n          const emailAddress = this.props.loggedInEmail;\n\n          auth.sendPasswordResetEmail(emailAddress).then(function() {\n            // Email sent.\n            console.log(\"Reset password email sent\");\n\n          }).catch(function(error) {\n            // An error happened.\n            console.log(\"ERROR: could not send reset password email\");\n          });\n\n          this.setState({ emailedResetLink: true });\n\n     }\n\n\n     deleteAccount = () => {\n\n          var user = firebaseApp.auth().currentUser;\n\n          user.delete().then(function() {\n            // User deleted.\n            console.log(\"Current User PERMANENTLY DELETED\");\n          }).catch(function(error) {\n            // An error happened.\n            console.log(\"ERROR: could not delete current user\");\n          });\n\n          this.props.permanentlyDeleteUserAndInfo(user);\n\n     }\n\n\n     render() {\n\n          console.log(this.props.settingsFont);\n\n\n       return (\n         <div className=\"settings-page-area single-page\">\n           <h1>Settings</h1>\n           <div className=\"color-font-area\">\n                <div className=\"select-color-area\">\n                    <h4>Select Color</h4>\n                     <SelectThemeColor\n                         settingsColor={this.props.settingsColor}\n                         changeSettingsColor={this.props.changeSettingsColor}\n                     />\n                </div>\n                <div className=\"select-font-area\">\n                    <h4>Select Font</h4>\n                     <SelectThemeFont\n                         settingsFont={this.props.settingsFont}\n                         changeSettingsFont={this.props.changeSettingsFont}\n                     />\n                </div>\n           </div>\n           <div className=\"color-font-area\">\n                <div className=\"select-color-area\">\n                    <h4>Book Cover Size</h4>\n                     <SelectBookSize\n                          changeSettingsBookSize={this.props.changeSettingsBookSize}\n                          bookSize={this.props.bookSize}\n                     />\n                </div>\n                <div className=\"select-font-area\">\n                    <h4>View Genres?</h4>\n                     <SelectUseGenres\n                         changeSettingsUseGenres={this.props.changeSettingsUseGenres}\n                         useGenres={this.props.useGenres}\n                     />\n                </div>\n           </div>\n           <div className=\"color-font-area\">\n                <div className=\"select-color-area\">\n                    <h4>View Tags?</h4>\n                     <SelectUseTags\n                          changeSettingsUseTags={this.props.changeSettingsUseTags}\n                          useTags={this.props.useTags}\n                     />\n                </div>\n           </div>\n           <p>Currently logged in as: {this.props.loggedInEmail}</p>\n           <div className=\"settings-action-buttons-area\">\n                <Logout logOutUser={this.props.logOutUser} />\n                <ChangePassword resetPassword={this.resetPassword} />\n                <DeleteAccount deleteAccount={this.deleteAccount} />\n           </div>\n         </div>\n       );\n     }\n\n\n}\n\nexport default Settings;\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div className=\"settings-page-area\">\n      <h1>Not Found - please go back to the homepage.</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectToReadView extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setView = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeToReadView(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const defaultView = this.props.defaultView;\n          console.log(defaultView);\n\n               var myViewToPublish = null;\n               if( defaultView === 'date' ) { myViewToPublish = 'Date (Recently Added)'; }\n               if( defaultView === 'alphabetical' ) { myViewToPublish = 'Alphabetical'; }\n\n          let defaultViewPublish = {\n               value: defaultView,\n               label: myViewToPublish\n          };\n          if( defaultView === null ) { defaultViewPublish = null; }\n          //console.log(defaultView);\n\n          const ratingOptions = [\n               { value: 'alphabetical', label: 'Alphabetical' },\n               { value: 'date', label: 'Date (Recently Added)' },\n          ];\n\n          if( defaultView ) {\n\n               return (\n                 <Select\n                    placeholder='Alphabetical'\n                    options={ratingOptions}\n                    defaultValue={defaultViewPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Alphabetical'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectToReadView;\n","import React from 'react';\nimport BookCard from './BookCard.js';\nimport SelectToReadView from './SelectToReadView.js';\n\nvar shortid = require('shortid');\n\nclass SavedForLater extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             booksToRead: [],\n             booksToReadView: '',\n      };\n    }\n\n\n\n    render() {\n\n         const booksToRead = this.props.booksToRead;\n         console.log(this.props);\n         console.log(booksToRead);\n         //console.log(booksToRead.length);\n\n         let orderedBooks = booksToRead;\n\n               // order these books!\n               if( this.props.booksToReadView === 'alphabetical') {\n                    orderedBooks = [...booksToRead].sort((a, b) => (a.titleForSorting > b.titleForSorting) ? 1 : -1);\n               }\n\n               if( this.props.booksToReadView === 'date') {\n\n                         // New sorting\n                         orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                         \t// If the first item has a higher number, move it down\n                         \t// If the first item has a lower number, move it up\n                         \tif (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                         \tif (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                         \t// If the count number is the same between both items, sort alphabetically\n                         \t// If the first item comes first in the alphabet, move it up\n                         \t// Otherwise move it down\n                         \tif (a.titleForSorting > b.titleForSorting) return 1;\n               \t          if (a.titleForSorting < b.titleForSorting) return -1;\n\n                         });\n\n               }\n\n               if( this.props.booksToReadView === 'rating') {\n\n                         // New sorting\n                         orderedBooks = [...booksToRead].sort(function (a, b) {\n\n                         \t// If the first item has a higher number, move it down\n                         \t// If the first item has a lower number, move it up\n                         \tif (a.bookshelfRating > b.bookshelfRating) return -1;\n                         \tif (a.bookshelfRating < b.bookshelfRating) return 1;\n\n                         \t// If the count number is the same between both items, sort alphabetically\n                         \t// If the first item comes first in the alphabet, move it up\n                         \t// Otherwise move it down\n                         \tif (a.titleForSorting > b.titleForSorting) return 1;\n               \t          if (a.titleForSorting < b.titleForSorting) return -1;\n\n                         });\n\n               }\n\n\n\n       if( booksToRead === undefined || booksToRead.length === 0  ) {\n\n                return(\n                <div className=\"saved-for-later-area single-page\">\n                  <h1>To Read</h1>\n                       <p className=\"no-books-yet-message\">You don't have any books saved for later. But you can <a href=\"/search\">run a search</a> and start adding books!</p>\n                  <div>{this.props.loggedInEmail}</div>\n                </div>\n                );\n\n           } else {\n\n\n    return(\n    <div className=\"saved-for-later-area single-page\">\n      <h1>To Read</h1>\n      { this.props.notification &&\n           <div className=\"notification-area\">{this.props.notification}</div>\n      }\n           <div className=\"view-type\">\n                     <div className=\"viewer-label\">View Your Books by: </div>\n                     <div className=\"viewer-selector-area\">\n                          <SelectToReadView\n                               defaultView={this.props.booksToReadView}\n                               changeToReadView={this.props.changeToReadView}\n                          />\n                </div>\n           </div>\n           <div className={\"results-grid \" + this.props.bookSize}>\n                {orderedBooks.map((book, index) => (\n                     <BookCard\n                              key={book.id}\n                              book={book}\n                              editBook={this.props.editBook}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              savedForLater={true}\n                              toRead={true}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              useGenres={this.props.useGenres}\n                              updateCoverImg={this.props.updateCoverImg}\n                              createNotification={this.createNotification}\n                         />\n              ))}\n         </div>\n    </div>\n    );\n\n     }\n\n    }\n\n}\n\n\nexport default SavedForLater;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectAlreadyReadView extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     }\n\n\n     setView = (selectedOption) => {\n          if(selectedOption) {\n               this.props.changeAlreadyReadView(selectedOption);\n          }\n\n     }\n\n\n\n     render() {\n\n          const defaultView = this.props.defaultView;\n          console.log(defaultView);\n\n               var myViewToPublish = null;\n               if( defaultView === 'alphabetical' ) { myViewToPublish = 'Alphabetical'; }\n               if( defaultView === 'rating' ) { myViewToPublish = 'Rating (High to Low)'; }\n               if( defaultView === 'date' ) { myViewToPublish = 'Date (Recently Completed)'; }\n\n          let defaultViewPublish = {\n               value: defaultView,\n               label: myViewToPublish\n          };\n          if( defaultView === null ) { defaultViewPublish = null; }\n          //console.log(defaultView);\n\n          const ratingOptions = [\n               { value: 'alphabetical', label: 'Alphabetical' },\n               { value: 'rating', label: 'Rating (High to Low)' },\n               { value: 'date', label: 'Date (Recently Completed)' },\n          ];\n\n          if( defaultView ) {\n\n               return (\n                 <Select\n                    placeholder='Rating'\n                    options={ratingOptions}\n                    defaultValue={defaultViewPublish}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          } else {\n\n               return (\n                 <Select\n                    placeholder='Rating'\n                    options={ratingOptions}\n                    isClearable\n                    isSearchable\n                    onChange={this.setView}\n                 />\n               );\n\n          }\n\n     }\n\n}\n\nexport default SelectAlreadyReadView;\n","import React from 'react';\n\nconst shortid = require('shortid');\n\nexport default function AdvancedStats(props) {\n\n     function formatNumber(num) {\n          return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n     }\n\n     function getYear(book) {\n          const dateObj = new Date( book.bookshelfTimestamp );\n          const yearToReturn = dateObj.getFullYear();\n          return yearToReturn;\n     }\n\n     function getTotalPages(books) {\n          //console.log(\"getTotalPages\");\n          let totalPages = 0;\n          for( let i = 0; i < books.length; i++ ) {\n               if( books[i].pageCount !== null && books[i].pageCount !== undefined && books[i].pageCount > 0 ) {\n                    totalPages += books[i].pageCount;\n               }\n          }\n          return totalPages.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n     }\n\n     function getAverageRating(books) {\n\n          let starRatingsArray = [];\n          for( let i = 0; i < books.length; i++ ) {\n               if( books[i].bookshelfRating > 0 ) {\n                    starRatingsArray.push(parseInt(books[i].bookshelfRating));\n               }\n          }\n          if( starRatingsArray.length === 0 ) { return(<span className=\"no-ratings-assigned-message\">No ratings assigned</span>); }\n          let sum = starRatingsArray.reduce((previous, current) => current += previous);\n          let avg = sum / starRatingsArray.length;\n          let avgToPublish = avg.toFixed(2);\n\n          return avgToPublish;\n     }\n\n       const books = props.books;\n       // console.log(props.books);\n\n       // get total pages\n       let totalPages = 0;\n       let starRatingsArray = [];\n       for( let i = 0; i < books.length; i++ ) {\n            //console.log(books[i].pageCount);\n            totalPages += books[i].pageCount;\n            if( books[i].bookshelfRating > 0 ) {\n                 //console.log(books[i]);\n                 starRatingsArray.push(parseInt(books[i].bookshelfRating));\n            }\n       }\n\n       // console.log(starRatingsArray);\n       let avgToPublish = 'No ratings assigned';\n       if( starRatingsArray.length > 0 ) {\n            let sum = starRatingsArray.reduce((previous, current) => current += previous);\n            // console.log(sum);\n            // console.log(starRatingsArray.length);\n            let avg = sum / starRatingsArray.length;\n            avgToPublish = avg.toFixed(2);\n       }\n\n\n       // get number of books read each year\n\n\n       // get total books read without any date assigned\n       //console.log(books);\n       const booksNoDateAssigned = books.filter(function(book) {\n                                                         return book.bookshelfTimestamp === 0;\n                                                       });\n       //console.log(booksNoDateAssigned);\n\n\n\n\n       // loop through remaining books (timestamp > 0) and create groups of books by year\n       const booksWithDate = books.filter(function(book) {\n                                                         return book.bookshelfTimestamp > 0;\n                                                       });\n\n               console.log(booksWithDate);\n               console.log(booksWithDate.length);\n\n               let yearlyChart = [];\n\n       if( booksWithDate.length > 0 ) {\n\n            // re-order the array of books by timestamp\n            booksWithDate.sort((a, b) => (a.bookshelfTimestamp < b.bookshelfTimestamp) ? 1 : -1)\n            console.log(booksWithDate);\n\n\n            let prevDateRaw = new Date( booksWithDate[0].bookshelfTimestamp );\n            //console.log(booksWithDate[0].bookshelfTimestamp);\n            let prevDateYear = prevDateRaw.getFullYear();\n            let currentYearBooks = [];\n\n            for( let j = 0; j < booksWithDate.length; j++ ) {\n\n                 let bookDate = new Date(booksWithDate[j].bookshelfTimestamp);\n                 let currentBookYear = bookDate.getFullYear();\n                 console.log(\"currentBookYear: \" + currentBookYear);\n\n                 //currentYearBooks.push(booksWithDate[j]);\n\n                 if( j === 0 || currentBookYear !== prevDateYear ) { // USE MAP in line 119 to assign unique keys\n\n                      // create new array, filtered just for this year\n                      currentYearBooks = books.filter(function(book) { return getYear(book) === currentBookYear; });\n                      console.log(currentBookYear);\n                      console.log(prevDateYear);\n                      console.log(j);\n\n                      yearlyChart.push(\n                           <div className=\"yearly-chart-area\">\n                              <h3 className=\"yearly-summary\">{currentBookYear}</h3>\n                              <div className=\"number-of-books\">Books read: {currentYearBooks.length}</div>\n                              <div className=\"pages\">Approx. pages: {getTotalPages(currentYearBooks)}</div>\n                              <div className=\"average-rating\">Average rating: {getAverageRating(currentYearBooks)}</div>\n                           </div>\n                         );\n\n\n                    prevDateYear = currentBookYear;\n\n                 }\n\n                 if( currentBookYear !== prevDateYear ) {\n                      currentYearBooks = [];\n                 }\n\n                    console.log(yearlyChart);\n\n               }\n\n          }\n\n       // now end with all the books that don't have a year assigned\n       // first check if there are any books with a date === 0\n       let booksWithoutDate = [];\n       booksWithoutDate = books.filter(function(book) { return book.bookshelfTimestamp === 0; });\n       if( booksWithoutDate.length > 0 ) {\n       yearlyChart.push(<div className=\"yearly-chart-area\">\n                              <h3 className=\"yearly-summary\">No date assigned</h3>\n                              <div className=\"number-of-books\">Books read: {booksNoDateAssigned.length}</div>\n                              <div className=\"pages\">Approx. pages: {getTotalPages(booksNoDateAssigned)}</div>\n                              <div className=\"average-rating\">Average rating: {getAverageRating(booksNoDateAssigned)}</div>\n                           </div>);\n                      }\n\n\n       return (\n            <div className=\"advanced-stats-area\">\n               <h2>Your Reading, by the Numbers</h2>\n               <div className=\"stat-item total-books-read\">Total books read: {books.length}</div>\n               <div className=\"stat-item total-pages-read\">Approx. total pages read: {getTotalPages(books)}</div>\n               <div className=\"stat-item alltime-avg-stars\">All-time average rating: {avgToPublish}</div>\n               <div className=\"stat-item chart-area-all-years\">\n                    { yearlyChart.map((year) => (\n                         <div key={shortid.generate()} className=\"single-year\">{year}</div>\n                    ))}</div>\n            </div>\n\n       );\n}\n","import React from 'react';\n\nconst shortid = require('shortid');\n\nclass AuthorList extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n          this.state = {\n\n            };\n\n     }\n\n     // removeDuplicates(array) {\n     //   return array.filter((a, b) => array.indexOf(a) === b)\n     // };\n\n     removeDuplicates(array) {\n       array.splice(0, array.length, ...(new Set(array)))\n     };\n\n\n     getAverageRating(books) {\n\n          let starRatingsArray = [];\n          if( starRatingsArray === undefined ) { return null; }\n          for( let i = 0; i < books.length; i++ ) {\n               if( books[i].bookshelfRating > 0 ) {\n                    starRatingsArray.push(parseInt(books[i].bookshelfRating));\n               }\n          }\n          if( starRatingsArray.length === 0 ) { return null; }\n          let sum = starRatingsArray.reduce((previous, current) => current += previous);\n          let avg = sum / starRatingsArray.length;\n          let avgToPublish = avg.toFixed(2);\n\n          return avg;\n     }\n\n\n     render() {\n\n          const books = this.props.books;\n          const rawAuthors = books.map((book, index) => ( book.authors )).flat();\n          const removeDupAuthors = this.removeDuplicates(rawAuthors);\n          console.log(rawAuthors);\n\n\n\n               let authorsObj = rawAuthors.map((author, index) => {\n                    console.log(author);\n                     const bookArrayByAuthor = books.filter(book => book.authors.includes(author));\n                     console.log(bookArrayByAuthor);\n                     let avgRatingForAuthor = this.getAverageRating(bookArrayByAuthor);\n                     return { name: author, id: shortid.generate(), books: bookArrayByAuthor, avgRating: avgRatingForAuthor };\n               });\n               console.log(authorsObj);\n\n               // re-arrange by author avg rating\n               //authorsObj.sort((a, b) => (a.avgRating < b.avgRating) ? 1 : -1);\n               // New sorting\n               const authorListToPublish = [...authorsObj].sort(function (a, b) {\n\n                    // If the first item has a higher number, move it down\n                    // If the first item has a lower number, move it up\n                    if (a.avgRating > b.avgRating) return -1;\n                    if (a.avgRating < b.avgRating) return 1;\n\n                    // If the count number is the same between both items, sort alphabetically\n                    // If the first item comes first in the alphabet, move it up\n                    // Otherwise move it down\n                    if (a.name > b.name) return 1;\n                    if (a.name < b.name) return -1;\n\n               });\n\n\n\n          return(\n               <>\n               <h2>AuthorList</h2>\n               <ul>\n                    { authorListToPublish.map((author,index) => ( <li>{author.name} (# books read: {author.books.length} | Avg. rating: {author.avgRating.toFixed(2)}</li> ) ) }\n               </ul>\n               </>\n          );\n\n     }\n\n}\n\nexport default AuthorList;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectFilter extends React.Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n               selectRating: this.props.currentSelection\n          }\n     }\n\n\n     selectRating = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setRatingFilter(selectedOption.value);\n               this.setState({ selectRating: selectedOption.value });\n          } else {\n               this.props.clearRatingFilter();\n          }\n\n     }\n\n\n     selectAuthor = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setAuthorFilter(selectedOption.value);\n               this.setState({ selectRating: selectedOption.value });\n          } else {\n               this.props.clearAuthorFilter();\n          }\n\n     }\n\n\n     selectGenre = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setGenreFilter(selectedOption.value);\n          } else {\n               this.props.clearGenreFilter();\n          }\n\n     }\n\n\n     selectTag = (selectedOption) => {\n          if(selectedOption) {\n               console.log(selectedOption);\n               this.props.setTagFilter(selectedOption.value);\n          } else {\n               this.props.clearTagFilter();\n          }\n\n     }\n\n\n\n     removeDuplicates(array) {\n       return array.filter((a, b) => array.indexOf(a) === b)\n     };\n\n\n     render() {\n\n          const books = this.props.books;\n\n          // create empty variables\n          let filterOptions = [];\n          let placeholder = '';\n\n          // set vars based on props //////////////////////////////////////////\n          // RATING selections //////////////\n          if( this.props.type === 'rating' ) {\n               placeholder = 'Rating';\n               console.log(\"CURRENT RATING SELECTION: \" + this.state.selectRating);\n               console.log(\"CURRENT PROPS SELECTION: \" + this.props.currentSelection);\n               filterOptions = [\n                    { value: '5', label: '⭐⭐⭐⭐⭐ Life-Changing' },\n                    { value: '4', label: '⭐⭐⭐⭐ Great +' },\n                    { value: '3', label: '⭐⭐⭐ Good +' },\n                    { value: '2', label: '⭐⭐ OK +' },\n               ];\n\n               let myRatingToPublish = null;\n               let defaultRating = this.state.selectRating;\n               if( defaultRating > 0 ) {\n                    if( defaultRating === '5' ) { myRatingToPublish = '⭐⭐⭐⭐⭐ Life-Changing'; }\n                    if( defaultRating === '4' ) { myRatingToPublish = '⭐⭐⭐⭐ Great'; }\n                    if( defaultRating === '3' ) { myRatingToPublish = '⭐⭐⭐ Good'; }\n                    if( defaultRating === '2' ) { myRatingToPublish = '⭐⭐ OK'; }\n                    if( defaultRating === '1' ) { myRatingToPublish = \"⭐ Bad / Didn't Finish\"; }\n               }\n\n               let defaultRatingPublish = {\n                    value: defaultRating,\n                    label: myRatingToPublish\n               };\n\n               if( defaultRating > 0 && this.props.currentSelection > 0 ) {\n\n                    console.log(\"Returning option 1\");\n\n                    return (\n                      <Select\n                         placeholder='Rating'\n                         options={filterOptions}\n                         defaultValue={defaultRatingPublish}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectRating}\n                      />\n                    );\n\n               } else {\n\n                    console.log(\"Returning option 2\");\n\n                    return (\n                      <Select\n                         placeholder='Rating'\n                         defaultValue={''}\n                         value={null}\n                         options={filterOptions}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectRating}\n                      />\n                    );\n\n               }\n\n\n          }\n\n\n\n          // AUTHOR selections //////////////\n          if( this.props.type === 'author' ) {\n\n               const books = this.props.books;\n               const rawAuthors = books.map((book, index) => ( book.authors )).flat();\n               rawAuthors.splice(0, rawAuthors.length, ...(new Set(rawAuthors)));\n               console.log(rawAuthors);\n\n               // alpabetize by last name\n               rawAuthors.sort(function (a, b) {\n                   if (a.split(' ')[1] > b.split(' ')[1])\n                     return 1;\n                   if (a.split(' ')[1] < b.split(' ')[1])\n                     return -1;\n                   return 0;\n               });\n               console.log(rawAuthors);\n\n               let filterOptions = [];\n               for( let i = 0; i < rawAuthors.length; i++ ) {\n                    filterOptions.push({ value: rawAuthors[i], label: rawAuthors[i] });\n               }\n\n               placeholder = 'Author';\n               if( this.props.currentSelection === '' ) {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         value={null}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectAuthor}\n                      />\n                    );\n\n               } else {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectAuthor}\n                      />\n                    );\n\n               }\n\n          }\n\n\n\n          // GENRE selections //////////////\n          if( this.props.type === 'genres' ) {\n\n               const genresRaw = books.map(book => book.genre);\n               let genres = genresRaw.filter(Boolean);\n               genres = this.removeDuplicates(genres);\n               genres.sort();\n\n               let filterOptions = [];\n               for( let i = 0; i < genres.length; i++ ) {\n                    filterOptions.push({ value: genres[i], label: genres[i] });\n               }\n\n               placeholder = 'Genre';\n               if( this.props.currentSelection === '' ) {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         value={null}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectGenre}\n                      />\n                    );\n\n               } else {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectGenre}\n                      />\n                    );\n\n               }\n\n          }\n\n\n          // TAGS selections //////////////\n          if( this.props.type === 'tags' ) {\n               placeholder = 'Tag';\n\n               const tagsRaw = books.map(book => book.tags);\n               let tags = tagsRaw.filter(Boolean).flat();\n\n               tags = this.removeDuplicates(tags);\n               console.log(tags);\n               tags.sort((a, b) => a.toString().localeCompare(b, 'fr', {ignorePunctuation: true}));\n\n               let filterOptions = [];\n               for( let i = 0; i < tags.length; i++ ) {\n                    filterOptions.push({ value: tags[i], label: tags[i] });\n               }\n\n               placeholder = 'Tags';\n               if( this.props.currentSelection === '' ) {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         value={null}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectTag}\n                      />\n                    );\n\n               } else {\n\n                    return (\n                      <Select\n                         placeholder={placeholder}\n                         options={filterOptions}\n                         isClearable\n                         isSearchable\n                         onChange={this.selectTag}\n                      />\n                    );\n\n               }\n\n          }\n\n\n\n     }\n\n}\n\nexport default SelectFilter;\n","import React from 'react';\nimport BookCard from './BookCard.js';\nimport SelectAlreadyReadView from './SelectAlreadyReadView';\nimport AdvancedStats from './AdvancedStats.js';\nimport AuthorList from './AuthorList.js';\nimport SelectFilter from './SelectFilter.js';\nimport Switch from '@material-ui/core/Switch';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n\nvar shortid = require('shortid');\n\nclass PreviouslyRead extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             bookOrder: this.props.booksAlreadyReadView,\n             authorFilter: '',\n             genreFilter: '',\n             tagFilter: '',\n             ratingFilter: 0,\n             displayedBooks: this.props.booksAlreadyRead,\n             showStats: false,\n             showFilters: false,\n      };\n    }\n\n\n\n    orderBooks = ( bookOrderString, booksArray ) => {\n         console.log( bookOrderString );\n         console.log( booksArray )\n\n         let orderedBooks = null;\n         if( bookOrderString === 'alphabetical') {\n              orderedBooks = [...booksArray].sort((a, b) => (a.titleForSorting > b.titleForSorting) ? 1 : -1);\n         }\n\n         if( this.props.booksAlreadyReadView === 'date') {\n\n                   // New sorting\n                   orderedBooks = [...booksArray].sort(function (a, b) {\n\n                        // If the first item has a higher number, move it down\n                        // If the first item has a lower number, move it up\n                        if (a.bookshelfTimestamp > b.bookshelfTimestamp) return -1;\n                        if (a.bookshelfTimestamp < b.bookshelfTimestamp) return 1;\n\n                        // If the count number is the same between both items, sort alphabetically\n                        // If the first item comes first in the alphabet, move it up\n                        // Otherwise move it down\n                        if (a.title > b.title) return 1;\n                        if (a.title < b.title) return -1;\n\n                   });\n\n         }\n\n         if( this.props.booksAlreadyReadView === 'rating') {\n\n                   // New sorting\n                   orderedBooks = [...booksArray].sort(function (a, b) {\n\n                        // If the first item has a higher number, move it down\n                        // If the first item has a lower number, move it up\n                        if (a.bookshelfRating > b.bookshelfRating) return -1;\n                        if (a.bookshelfRating < b.bookshelfRating) return 1;\n\n                        // If the count number is the same between both items, sort alphabetically\n                        // If the first item comes first in the alphabet, move it up\n                        // Otherwise move it down\n                        if (a.titleForSorting > b.titleForSorting) return 1;\n                        if (a.titleForSorting < b.titleForSorting) return -1;\n\n                   });\n\n         }\n\n         return orderedBooks;\n    }\n\n\n    setGenreFilter = ( string ) => {\n         console.log(\"setGenreFilter = \" + string);\n         this.setState({ genreFilter: string });\n    }\n\n    clearGenreFilter = () => {\n         console.log(\"resetGenreFilter\");\n         this.setState({ genreFilter: '' });\n    }\n\n\n    setAuthorFilter = ( string ) => {\n         console.log(\"setAuthorFilter = \" + string);\n         this.setState({ authorFilter: string });\n    }\n\n    clearAuthorFilter = () => {\n         console.log(\"clearAuthorFilter\");\n         this.setState({ authorFilter: '' });\n    }\n\n\n\n\n    setTagFilter = ( string ) => {\n         console.log(\"setTagFilter = \" + string);\n         this.setState({ tagFilter: string });\n    }\n\n    clearTagFilter = () => {\n         console.log(\"resetTagFilter\");\n         this.setState({ tagFilter: '' });\n    }\n\n\n\n\n    setRatingFilter = ( number ) => {\n         console.log(\"setRatingFilter = \" + number);\n         this.setState({ ratingFilter: number });\n    }\n\n    clearRatingFilter = () => {\n         console.log(\"resetRatingFilter\");\n         this.setState({ ratingFilter: 0 });\n    }\n\n\n\n    clearAllFilters = (e) => {\n         e.preventDefault();\n         const filteredBooksInOrder = this.orderBooks( this.props.booksAlreadyReadView, this.props.booksAlreadyRead );\n         this.setState({\n              tagFilter: '',\n              genreFilter: '',\n              authorFilter: '',\n              ratingFilter: 0,\n              displayedBooks: filteredBooksInOrder\n         });\n    }\n\n\n\n     showHideStats = (event) => {\n          console.log(\"showHideStats\");\n          this.setState(prevState => ({\n               showStats: !prevState.showStats\n          }));\n     };\n\n     showHideFilters = (event) => {\n          console.log(\"showHideFilters\");\n          this.setState(prevState => ({\n               showFilters: !prevState.showFilters\n          }));\n     };\n\n\n\n    componentDidMount() {\n         console.log(\"MOUNTED\");\n         const booksAlreadyRead = this.orderBooks( this.props.booksAlreadyReadView, this.props.booksAlreadyRead );\n         this.setState({\n              displayedBooks: booksAlreadyRead\n         });\n    }\n\n\n\n    render() {\n\n\n         let booksAlreadyRead = this.props.booksAlreadyRead;\n         let displayedBooks = this.state.displayedBooks;\n         // console.log(booksAlreadyRead);\n         // console.log(displayedBooks);\n\n\n         /////////// Getting all of the button resets right and current displayedBooks ///////\n         console.log('Rating filter: ' + this.state.ratingFilter);\n         console.log('Author filter: ' + this.state.authorFilter);\n         console.log('Genre filter: ' + this.state.genreFilter);\n         console.log('Tag filter: ' + this.state.tagFilter);\n\n\n              // Let's do GENRE\n              const genre = this.state.genreFilter;\n              let filteredBooks = null;\n              if( genre !== '' ) {\n                   filteredBooks = displayedBooks.filter(function(book) {\n                     return book.genre === genre;\n                   });\n\n                   // run the re-ordering function to make sure everything is in the correct order\n                   displayedBooks = this.orderBooks( this.props.booksAlreadyReadView, filteredBooks );\n\n              }\n\n\n\n              // Let's do AUTHOR\n              const author = this.state.authorFilter;\n              filteredBooks = null;\n              if( author !== '' ) {\n                   filteredBooks = displayedBooks.filter(function(book) {\n                     return book.authors.includes(author);\n                   });\n\n                   // run the re-ordering function to make sure everything is in the correct order\n                   displayedBooks = this.orderBooks( this.props.booksAlreadyReadView, filteredBooks );\n\n              }\n\n\n\n               // Let's do TAGS\n               const tag = this.state.tagFilter;\n               if( tag !== '' && tag !== undefined ) {\n               filteredBooks = displayedBooks.filter(function(book) {\n                  let myBookTags = book.tags;\n                  if( myBookTags === undefined ) { console.log(\"UNDEF\"); myBookTags = ''; }\n                  console.log(myBookTags);\n                  if( book.tags === undefined ) { book.tags = ''; }\n                  return myBookTags.includes(tag);\n               });\n\n               // run the re-ordering function to make sure everything is in the correct order\n               displayedBooks = this.orderBooks( this.props.booksAlreadyReadView, filteredBooks );\n\n               }\n\n               // And Now Rating\n               const minRating = this.state.ratingFilter;\n               if( minRating !== 0 ) {\n                    filteredBooks = displayedBooks.filter(function(book) {\n                      return book.bookshelfRating >= minRating;\n                    });\n\n               // run the re-ordering function to make sure everything is in the correct order\n               displayedBooks = this.orderBooks( this.props.booksAlreadyReadView, filteredBooks );\n\n               }\n\n\n\n\n         let clearButton = null;\n         if( this.state.genreFilter !== '' || this.state.authorFilter !== '' || this.state.tagFilter !== '' || this.state.ratingFilter !== 0 ) {\n              clearButton = (<div className=\"viewer-selector-area clear\">\n                   <button id=\"clear-all-filters\" className=\"clear-all-filters\" onClick={this.clearAllFilters}>Clear All Filters</button>\n              </div>);\n         }\n\n\n         if( booksAlreadyRead === undefined || booksAlreadyRead.length === 0 ) {\n\n                  return(\n                  <div className=\"previously-read-area single-page\">\n                    <h1>Already Read</h1>\n                         <p className=\"no-books-yet-message\">You haven't recorded any books yet. But you can <a href=\"/search\">run a search</a> and start adding books!</p>\n                    <div>{this.props.loggedInEmail}</div>\n                  </div>\n                  );\n\n             } else {\n\n         return(\n         <div className=\"previously-read-area single-page\">\n           <h1>Already Read</h1>\n           { //<AuthorList books={booksAlreadyRead} />\n           }\n\n               <div className=\"switch-area\">\n                    <div className=\"single-switch stats\">\n                    <FormControlLabel\n                       control={\n                            <Switch\n                              checked={this.state.showStats}\n                              onChange={this.showHideStats}\n                              label=\"Show Advanced Reading Stats\"\n                              inputProps={{ 'aria-label': 'show stats' }}\n                           />\n                       }\n                       label=\"Show Stats\"\n                     />\n                     </div>\n                     <div className=\"single-switch filters\">\n                     <FormControlLabel\n                        control={\n                             <Switch\n                               checked={this.state.showFilters}\n                               onChange={this.showHideFilters}\n                               label=\"Use Filters\"\n                               inputProps={{ 'aria-label': 'show filters' }}\n                            />\n                        }\n                        label=\"Use Filters\"\n                      />\n                      </div>\n               </div>\n               {this.state.showStats &&\n               <AdvancedStats\n                    books={booksAlreadyRead}\n               />\n               }\n               <div className=\"prev-views\">\n                    <div className=\"view-type orderby-area\">\n                              <div className=\"viewer-label\">Order by: </div>\n                              <div className=\"viewer-selector-area\">\n                                   <SelectAlreadyReadView\n                                        defaultView={this.props.booksAlreadyReadView}\n                                        changeAlreadyReadView={this.props.changeAlreadyReadView}\n                                   />\n                         </div>\n                    </div>\n               {this.state.showFilters &&\n               <div className=\"view-type filters-area\">\n                         <div className=\"viewer-label\">Filter by: </div>\n                         <div className=\"viewer-selector-area filter\">\n                              <SelectFilter\n                                   books={displayedBooks}\n                                   type={\"rating\"}\n                                   currentSelection={this.state.ratingFilter}\n                                   setRatingFilter={this.setRatingFilter}\n                                   clearRatingFilter={this.clearRatingFilter}\n                              />\n                         </div>\n                         <div className=\"viewer-selector-area filter\">\n                              <SelectFilter\n                                   books={displayedBooks}\n                                   type={\"author\"}\n                                   currentSelection={this.state.authorFilter}\n                                   setAuthorFilter={this.setAuthorFilter}\n                                   clearAuthorFilter={this.clearAuthorFilter}\n                              />\n                         </div>\n                         {this.props.useGenres &&\n                         <div className=\"viewer-selector-area filter\">\n                              <SelectFilter\n                                   books={displayedBooks}\n                                   type={\"genres\"}\n                                   currentSelection={this.state.genreFilter}\n                                   setGenreFilter={this.setGenreFilter}\n                                   clearGenreFilter={this.clearGenreFilter}\n                              />\n                         </div>\n                         }\n                         {this.props.useTags &&\n                         <div className=\"viewer-selector-area filter\">\n                              <SelectFilter\n                                   books={displayedBooks}\n                                   type={\"tags\"}\n                                   currentSelection={this.state.tagFilter}\n                                   setTagFilter={this.setTagFilter}\n                                   clearTagFilter={this.clearTagFilter}\n                              />\n                         </div>\n                         }\n                         {clearButton}\n               </div>\n          }\n          </div>\n                <div className={\"results-grid \" + this.props.bookSize}>\n                {displayedBooks.map((book, index) => (\n                     <BookCard\n                              key={book.id}\n                              book={book}\n                              editBook={this.props.editBook}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              alreadyRead={true}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              useGenres={this.props.useGenres}\n                              useTags={this.props.useTags}\n                              setBookRating={this.props.setBookRating}\n                              resetRatingToZero={this.props.resetRatingToZero}\n                              resetTimestampToZero={this.props.resetTimestampToZero}\n                              setBookGenre={this.props.setBookGenre}\n                              genres={this.props.genres}\n                              resetGenreToZero={this.props.resetGenreToZero}\n                              addNewGenre={this.props.addNewGenre}\n                              addNewTag={this.props.addNewTag}\n                              setBookTags={this.props.setBookTags}\n                              tags={this.props.tags}\n                              resetAllTags={this.props.resetAllTags}\n                              setBookTimestamp={this.props.setBookTimestamp}\n                              updateCoverImg={this.props.updateCoverImg}\n                         />\n              ))}\n              </div>\n         </div>\n         );\n\n         }\n\n    }\n\n}\n\n\nexport default PreviouslyRead;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { firebaseApp } from '../base';\n\nclass Register extends React.Component {\n     constructor(props) {\n          super(props);\n          this.state = {\n            email: '',\n            password: '',\n            error: null,\n          };\n\n          console.log(this.props);\n     }\n\n\nhandleInputChange = (event) => {\n   this.setState({ [event.target.name]: event.target.value });\n   console.log(event.target.value);\n };\n\nhandleSubmit = (event) => {\n   event.preventDefault();\n   console.log('Registration submitted');\n   const { email, password } = this.state;\n   console.log(this.state);\nfirebaseApp\n     .auth()\n     .createUserWithEmailAndPassword(email, password)\n     .then((user) => {\n          //console.log(user);\n          //this.props.history.push('/');\n\n          // add new user to App-->state and Firebase\n          this.props.registerNewUser(user);\n     })\n     .catch((error) => {\n       this.setState({ error: error });\n     });\n };\n\n     render() {\n\n          //const classes = useStyles();\n          const { email, password, error } = this.state;\n          //console.log(this.props.registerNewUser);\n\n          return (\n               <div className=\"login-form-area\">\n               <p>Enter your information below to register for your free Bookshelf:</p>\n               {error ? (\n                     <div>{error.message}</div>\n               ) : null}\n\n               <form id=\"registration-form\" onSubmit={this.handleSubmit}>\n                    <div className=\"registration-area\">\n                         <input\n                             type=\"text\"\n                             id=\"login-form-email\"\n                             name=\"email\"\n                             label=\"Email\"\n                             required\n                             value={this.email}\n                             onChange={this.handleInputChange}\n                             />\n                        </div>\n                        <div className=\"registration-area\">\n                             <input\n                                 type=\"text\"\n                                 id=\"login-form-password\"\n                                 name=\"password\"\n                                 label=\"Password\"\n                                 required\n                                 placeholder=\"Password\"\n                                 value={this.password}\n                                onChange={this.handleInputChange}\n                                 />\n                       </div>\n                       <button type=\"submit\">Register Now</button>\n                       </form>\n             </div>\n          );\n\n     }\n\n}\n\nexport default Register;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Landing from './Landing.js';\nimport Search from './Search.js';\nimport Recommended from './Recommended.js';\nimport Settings from './Settings.js';\nimport NotFound from './NotFound.js';\nimport SavedForLater from './SavedForLater.js';\nimport PreviouslyRead from './PreviouslyRead.js';\nimport Results from './Results.js';\nimport Register from './Register.js';\n\nclass Router extends React.Component {\n\n     constructor(props) {\n          super(props);\n\n     this.state = {\n       };\n\n     }\n\n     render() {\n\n          console.log(this.props);\n          console.log(this.props.books);\n\n          return(\n\n               <div className={\"clb-grail-body color-\" + this.props.settingsColor + \" font-\" + this.props.settingsFont}>\n     <HashRouter basename=\"/\">\n          <Switch>\n               <Route exact path=\"/\"\n                    component={() =>\n                         <Landing\n                              booksToRead={this.props.booksToRead}\n                              booksAlreadyRead={this.props.booksAlreadyRead}\n                              editBook={this.props.editBook}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              notification={this.props.notification}\n                              notificationTimestamp={this.props.notificationTimestamp}\n                              updateCoverImg={this.props.updateCoverImg}\n                              useGenres={this.props.useGenres}\n                              useTags={this.props.useTags}\n                              setBookRating={this.props.setBookRating}\n                              resetRatingToZero={this.props.resetRatingToZero}\n                              resetTimestampToZero={this.props.resetTimestampToZero}\n                              setBookTimestamp={this.props.setBookTimestamp}\n                         />}\n               />\n               <Route exact path=\"/search\" component={Search} />\n               <Route exact path=\"/results\"\n                                        render={(props) => <Results {...props}\n                                             addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                             addBookToRead={this.props.addBookToRead}\n                                             settingsFont={this.props.settingsFont}\n                                             settingsColor={this.props.settingsColor}\n                                             notification={this.props.notification}\n                                             notificationTimestamp={this.props.notificationTimestamp}\n                                        />}\n               />\n\n               <Route exact path=\"/recommended\"\n                                        render={(props) => <Recommended {...props}\n                                             books={this.props.books}\n                                             addBookAlreadyRead={this.props.addBookAlreadyRead}\n                                             addBookToRead={this.props.addBookToRead}\n                                             settingsFont={this.props.settingsFont}\n                                             settingsColor={this.props.settingsColor}\n                                             notification={this.props.notification}\n                                             notificationTimestamp={this.props.notificationTimestamp}\n                                             removedFromSuggestions={this.props.removedFromSuggestions}\n                                             removeBookFromSuggestions={this.props.removeBookFromSuggestions}\n                                        />}\n               />\n\n               <Route exact path=\"/saved\"\n                    component={() =>\n                         <SavedForLater\n                              booksToRead={this.props.booksToRead}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              editBook={this.props.editBookToRead}\n                              booksToReadView={this.props.booksToReadView}\n                              changeToReadView={this.props.changeToReadView}\n                              moveBooktoAlreadyRead={this.props.moveBooktoAlreadyRead}\n                              removeBookFromToRead={this.props.removeBookFromToRead}\n                              addNewImagesToRead={this.props.addNewImagesToRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              notification={this.props.notification}\n                              updateCoverImg={this.props.updateCoverImg}\n                              bookSize={this.props.bookSize}\n                              useGenres={this.props.useGenres}\n                         />}\n               />\n\n               <Route exact path=\"/read\"\n                    component={() =>\n                         <PreviouslyRead\n                              booksAlreadyRead={this.props.booksAlreadyRead}\n                              booksAlreadyReadView={this.props.booksAlreadyReadView}\n                              changeAlreadyReadView={this.props.changeAlreadyReadView}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              editBook={this.props.editBook}\n                              removeBookFromAlreadyRead={this.props.removeBookFromAlreadyRead}\n                              addNewImagesAlreadyRead={this.props.addNewImagesAlreadyRead}\n                              settingsFont={this.props.settingsFont}\n                              settingsColor={this.props.settingsColor}\n                              updateCoverImg={this.props.updateCoverImg}\n                              bookSize={this.props.bookSize}\n                              useGenres={this.props.useGenres}\n                              useTags={this.props.useTags}\n                              setBookRating={this.props.setBookRating}\n                              resetRatingToZero={this.props.resetRatingToZero}\n                              resetTimestampToZero={this.props.resetTimestampToZero}\n                              setBookGenre={this.props.setBookGenre}\n                              genres={this.props.genres}\n                              resetGenreToZero={this.props.resetGenreToZero}\n                              addNewGenre={this.props.addNewGenre}\n                              addNewTag={this.props.addNewTag}\n                              setBookTags={this.props.setBookTags}\n                              tags={this.props.tags}\n                              resetAllTags={this.props.resetAllTags}\n                              setBookTimestamp={this.props.setBookTimestamp}\n                         />}\n               />\n               <Route exact path=\"/settings\"\n                    component={() =>\n                         <Settings\n                              logOutUser={this.props.logOutUser}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                              resetPassword={this.props.resetPassword}\n                              permanentlyDeleteUserAndInfo={this.props.permanentlyDeleteUserAndInfo}\n                              settingsColor={this.props.settingsColor}\n                              changeSettingsColor={this.props.changeSettingsColor}\n                              settingsFont={this.props.settingsFont}\n                              changeSettingsFont={this.props.changeSettingsFont}\n                              changeSettingsBookSize={this.props.changeSettingsBookSize}\n                              bookSize={this.props.bookSize}\n                              changeSettingsUseGenres={this.props.changeSettingsUseGenres}\n                              changeSettingsUseTags={this.props.changeSettingsUseTags}\n                              useGenres={this.props.useGenres}\n                              useTags={this.props.useTags}\n                         />}\n               />\n               <Route exact path=\"/register\"\n                    component={() =>\n                         <Register\n                              logOutUser={this.props.logOutUser}\n                              loggedInID={this.props.loggedInID}\n                              loggedInEmail={this.props.loggedInEmail}\n                         />}\n               />\n               <Route component={NotFound} />\n          </Switch>\n     </HashRouter>\n          </div>);\n\n     }\n\n}\n\nexport default Router;\n","import React from 'react';\nimport Router from './Router.js';\nimport Header from './Header.js';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\n\n\nvar shortid = require('shortid');\nconst image2base64 = require('image-to-base64');\n\nclass BookManager extends React.Component {\n\n     constructor(props){\n        super(props);\n        this.state = {\n             books: [],\n             settings: {\n                         color: 'default',\n                         font: 'default',\n                         sortViewToRead: 'alphabetical',\n                         sortViewAlreadyRead: 'alphabetical',\n                         bookSize: 'default',\n                         genres: [\n                              'Fiction',\n                              'Nonfiction',\n                              'Memoir',\n                              'Children',\n                              'Cooking',\n                              'Historical Fiction',\n                              'Mystery',\n                              'Science Fiction',\n                              'Young Adult',\n                         ],\n                         tags: [],\n                         useGenres: false,\n                         useTags: false,\n                         customFields: [],\n                         removedFromSuggestions: [],\n                    },\n             notification: null,\n             notificationTimestamp: null,\n    }\n\n}\n\n\n    componentDidMount(){\n\n       console.log(\"componentDidMount\");\n       const loggedInID = this.props.loggedInID;\n       console.log(\"loggedInID:\" + loggedInID);\n\n\n       // Firebase Connections\n\n       base.syncState(`${loggedInID}/books`, {\n         context: this,\n         state: 'books',\n         asArray: true\n       });\n\n       base.syncState(`${loggedInID}/settings`, {\n         context: this,\n         state: 'settings',\n         asArray: false\n       });\n\n\n       // Updating theme data & saving to localStorage\n       // Color\n       const localStorageKeyColor = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n       const settingsColorLocal = localStorage.getItem(localStorageKeyColor);\n\n            base.fetch(`${loggedInID}/settings/color`, {\n              context: this,\n              asArray: false,\n              then(data){\n                if( settingsColorLocal !== data ) {\n                     console.log(\"Setting updated color into localStorage: \" + data);\n                     localStorage.setItem(localStorageKeyColor, data);\n                }\n              }\n            });\n\n\n       // Updating theme data & saving to localStorage\n       // Font\n       const localStorageKeyFont = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n       const settingsFontLocal = localStorage.getItem(localStorageKeyFont);\n\n            base.fetch(`${loggedInID}/settings/font`, {\n              context: this,\n              asArray: false,\n              then(data){\n                   if( settingsFontLocal !== data ) {\n                       console.log(\"Setting updated font into localStorage: \" + data);\n                       localStorage.setItem(localStorageKeyFont, data);\n                  }\n              }\n            });\n\n  }\n\n\n     // Functions to maniuplate state / books\n     addBookAlreadyRead = (bookObj) => {\n\n         // set my fields for books in DB\n         const newBook = {};\n\n         this.fetchCoverImage(bookObj);\n\n         let subtitle = bookObj.volumeInfo.subtitle;\n         if( subtitle === undefined ) { subtitle = null; }\n\n         let description = bookObj.volumeInfo.description;\n         if( description === undefined ) { description = null; }\n\n         let publisher = bookObj.volumeInfo.publisher;\n         if( publisher === undefined ) { publisher = null; }\n\n         let pageCount = bookObj.volumeInfo.pageCount;\n         if( pageCount === undefined ) { pageCount = null; }\n\n         newBook.id = bookObj.id;\n         newBook.title = bookObj.volumeInfo.title;\n         newBook.titleForSorting = this.createAlphabeticalSortingTitle(bookObj.volumeInfo.title);\n         newBook.subtitle = subtitle;\n         newBook.authors = bookObj.volumeInfo.authors;\n         newBook.bookshelfTimestamp = Date.now();\n         newBook.bookshelfRating = 0;\n         newBook.notes = [];\n         newBook.coverImg = null;\n         newBook.alreadyRead = true;\n         newBook.googleLink = bookObj.selfLink;\n         newBook.description = description;\n         newBook.publisher = publisher;\n         newBook.publishedDate = bookObj.volumeInfo.publishedDate\n         newBook.pageCount = pageCount;\n         newBook.genre = null;\n         newBook.tags = [];\n\n         console.log(newBook);\n\n         let bookTitle = bookObj.volumeInfo.title;\n         this.setState(prevState => ({\n            books: [...prevState.books, newBook],\n            notification: 'You added ' + bookTitle + ' to your ALREADY READ shelf',\n            notificationTimestamp: Date.now(),\n           }));\n\n           this.startNotificationTimer();\n\n       }\n\n       // New on March 18, fixes many previous cover image issues\n       fetchCoverImage = (bookObj) => {\n            console.log(\"FETCH COVER IMAGE\");\n            console.log(bookObj);\n            const selfLink = bookObj.selfLink;\n            let coverImageURL = null;\n            if( bookObj.volumeInfo.imageLinks !== undefined ) {\n                 coverImageURL = bookObj.volumeInfo.imageLinks.smallThumbnail;\n               }\n\n            // Get the details straight from Google, including larger image sizes\n                 fetch(selfLink)\n                 .then(res => res.json())\n                 .then((originalBookJSON) => {\n\n                   console.log('fetchCoverImage CONNECTED');\n                   console.log(originalBookJSON);\n\n\n                   if( originalBookJSON.volumeInfo.imageLinks !== undefined ) {\n                        console.log(originalBookJSON.volumeInfo.imageLinks);\n                        if( originalBookJSON.volumeInfo.imageLinks.thumbnail !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.thumbnail + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                        if( originalBookJSON.volumeInfo.imageLinks.small !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.small + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                        if( originalBookJSON.volumeInfo.imageLinks.medium !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.medium + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                        if( originalBookJSON.volumeInfo.imageLinks.large !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.large + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                        if( originalBookJSON.volumeInfo.imageLinks.extraLarge !== undefined ) { coverImageURL = originalBookJSON.volumeInfo.imageLinks.extraLarge + '&key=AIzaSyDq8sjhqCfhczp_tMSh1pv_WzDQo0eirNU' }\n                   }\n\n                   console.log(selfLink);\n                   console.log(\"FINAL IMAGE: \" + coverImageURL);\n\n                   // update the book object with the new thumbnail cover image\n                 const bookID = bookObj.id;\n                 const clbCopyBookState = [...this.state.books];\n                 const getBookObjInState = clbCopyBookState.filter(obj => {\n                   return obj.id === bookID\n                 });\n\n                 const bookToUpdate = getBookObjInState[0];\n                 console.log(bookToUpdate);\n                 bookToUpdate.coverImg = coverImageURL;\n                 console.log(bookToUpdate);\n\n                 // REMOVE BOOK\n                 let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n                 clbCopyBookState.splice(index, 1);\n                 this.setState({ books: clbCopyBookState });\n\n                 // ADD Book with URL\n                 this.setState(prevState => ({\n                    books: [...prevState.books, bookToUpdate],\n                   }));\n\n         });\n\n\n\n       }\n\n\n       addBookToRead = (bookObj) => {\n            // set my fields for books in DB\n          const newBook = {};\n\n          this.fetchCoverImage(bookObj);\n\n          let subtitle = bookObj.volumeInfo.subtitle;\n          if( subtitle === undefined ) { subtitle = null; }\n\n          let description = bookObj.volumeInfo.description;\n          if( description === undefined ) { description = null; }\n\n          let publisher = bookObj.volumeInfo.publisher;\n          if( publisher === undefined ) { publisher = null; }\n\n          let pageCount = bookObj.volumeInfo.pageCount;\n         if( pageCount === undefined ) { pageCount = null; }\n\n          newBook.id = bookObj.id;\n          newBook.title = bookObj.volumeInfo.title;\n          newBook.titleForSorting = this.createAlphabeticalSortingTitle(bookObj.volumeInfo.title);\n          newBook.subtitle = subtitle;\n          newBook.authors = bookObj.volumeInfo.authors;\n          newBook.bookshelfTimestamp = Date.now();\n          newBook.bookshelfRating = 0;\n          newBook.notes = [];\n          newBook.coverImg = null;\n          newBook.alreadyRead = false;\n          newBook.googleLink = bookObj.selfLink;\n          newBook.description = description;\n          newBook.publisher = publisher;\n          newBook.publishedDate = bookObj.volumeInfo.publishedDate\n          newBook.pageCount = pageCount;\n          newBook.genre = null;\n\n          console.log(newBook);\n          this.setState(prevState => ({\n             books: [...prevState.books, newBook],\n             notification: 'You added ' + newBook.title + ' to your TO READ shelf',\n             notificationTimestamp: Date.now(),\n            }));\n\n            this.startNotificationTimer();\n\n        }\n\n\n        moveBooktoAlreadyRead = (bookObj) => {\n\n           console.log(bookObj);\n\n           // get the book object\n           const bookID = bookObj.id;\n           const bookTitle = bookObj.title;\n           const clbCopyBookState = [...this.state.books];\n           const getBookObjInState = clbCopyBookState.filter(obj => {\n            return obj.id === bookID\n           });\n           console.log(getBookObjInState);\n\n           const index = clbCopyBookState.findIndex(obj => {\n            return obj.id === bookID\n           });\n           console.log(index);\n\n           clbCopyBookState[index].alreadyRead = true;\n           clbCopyBookState[index].bookshelfTimestamp = Date.now();\n           this.setState({ books: this.state.books });\n\n         }\n\n\n       removeBookFromAlreadyRead = (bookObj) => {\n          console.log(\"Removed: \" + JSON.stringify(bookObj));\n          let bookID = bookObj.id;\n          let clbCopyBookState = [...this.state.books];\n          let getBookObjInState = clbCopyBookState.filter(obj => {\n           return obj.id === bookID\n          });\n\n          let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n          clbCopyBookState.splice(index, 1);\n\n          this.setState({ books: clbCopyBookState });\n\n        }\n\n\n        removeBookFromToRead = (bookObj) => {\n           console.log(\"Removed: \" + JSON.stringify(bookObj));\n           let bookID = bookObj.id;\n           let clbCopyBookState = [...this.state.books];\n           let getBookObjInState = clbCopyBookState.filter(obj => {\n            return obj.id === bookID\n           });\n\n           let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n           clbCopyBookState.splice(index, 1);\n\n           this.setState({ books: clbCopyBookState });\n\n         }\n\n\n         editBook = (bookObj) => {\n            console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               let bookID = bookObj.id;\n               let clbCopyBookState = [...this.state.books];\n               let getBookObjInState = clbCopyBookState.filter(obj => {\n                 return obj.id === bookID\n               });\n               let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               let ids = [...this.state.books];     // create the copy of state array\n               ids[index] = bookObj;                  //new value\n               console.log(ids[index]);\n\n               this.setState({ books: ids });            //update the value\n\n          }\n\n\n\n          updateCoverImg = ( bookCoverURL, bookObj ) => {\n               console.log(bookObj);\n               console.log(bookCoverURL);\n\n              //get the book object\n              const bookID = bookObj.id;\n              const bookTitle = bookObj.title;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n              console.log(\"getBookObjInState\");\n              console.log(getBookObjInState);\n\n              getBookObjInState.coverImg = bookCoverURL;\n\n              const index = clbCopyBookState.findIndex(obj => {\n              return obj.id === bookID\n             });\n             console.log(index);\n\n             clbCopyBookState[index].coverImg = bookCoverURL;\n             this.setState({ books: this.state.books });\n\n          }\n\n\n\n          editBookToRead = (bookObj) => {\n            console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               let bookID = bookObj.id;\n               let clbCopyBookState = [...this.state.booksToRead];\n               let getBookObjInState = clbCopyBookState.filter(obj => {\n                 return obj.id === bookID\n               });\n               let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               let ids = [...this.state.booksToRead];     // create the copy of state array\n               ids[index] = bookObj;                  //new value\n               console.log(ids[index]);\n               this.setState({ booksToRead: ids });            //update the value\n\n          }\n\n\n\n          addNewImagesAlreadyRead = (bookObj) => {\n               console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n                  let bookID = bookObj.id;\n                  let clbCopyBookState = [...this.state.books];\n                  let getBookObjInState = clbCopyBookState.filter(obj => {\n                    return obj.id === bookID\n                  });\n                  let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n                  let ids = [...this.state.books];     // create the copy of state array\n                  if( bookObj.volumeInfo.imageLinks.large ) { ids[index].volumeInfo.imageLinks.large = bookObj.volumeInfo.imageLinks.large; } else { ids[index].volumeInfo.imageLinks.large = '' }                 //new value, image only\n                  if( bookObj.volumeInfo.imageLinks.medium ) { ids[index].volumeInfo.imageLinks.medium = bookObj.volumeInfo.imageLinks.medium; } else { ids[index].volumeInfo.imageLinks.medium = '' }\n                  if( bookObj.volumeInfo.imageLinks.small ) { ids[index].volumeInfo.imageLinks.small = bookObj.volumeInfo.imageLinks.small; } else { ids[index].volumeInfo.imageLinks.small = '' }\n                  if( bookObj.volumeInfo.imageLinks.smallThumbnail ) { ids[index].volumeInfo.imageLinks.smallThumbnail = bookObj.volumeInfo.imageLinks.smallThumbnail; } else { ids[index].volumeInfo.imageLinks.smallThumbnail = '' }\n                  if( bookObj.volumeInfo.imageLinks.thumbnail ) { ids[index].volumeInfo.imageLinks.thumbnail = bookObj.volumeInfo.imageLinks.thumbnail; } else { ids[index].volumeInfo.imageLinks.thumbnail = '' }\n                  console.log(ids[index]);\n                  this.setState({ booksAlreadyRead: ids });            //update the value\n          }\n\n\n          addNewImagesToRead = (bookObj) => {\n               // console.log(\"Editing this book: \" + JSON.stringify(bookObj));\n               //    let bookID = bookObj.id;\n               //    let clbCopyBookState = [...this.state.booksToRead];\n               //    let getBookObjInState = clbCopyBookState.filter(obj => {\n               //      return obj.id === bookID\n               //    });\n               //    let index = clbCopyBookState.map(function(e) { return e.id; }).indexOf(bookID);\n               //    let ids = [...this.state.booksToRead];     // create the copy of state array\n               //    if( bookObj.volumeInfo.imageLinks.large ) { ids[index].volumeInfo.imageLinks.large = bookObj.volumeInfo.imageLinks.large; } else { ids[index].volumeInfo.imageLinks.large = ''; }               //new value, image only\n               //    if( bookObj.volumeInfo.imageLinks.medium ) { ids[index].volumeInfo.imageLinks.medium = bookObj.volumeInfo.imageLinks.medium; } else { ids[index].volumeInfo.imageLinks.medium = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.small ) { ids[index].volumeInfo.imageLinks.small = bookObj.volumeInfo.imageLinks.small; } else { ids[index].volumeInfo.imageLinks.small = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.smallThumbnail) { ids[index].volumeInfo.imageLinks.smallThumbnail = bookObj.volumeInfo.imageLinks.smallThumbnail; } else { ids[index].volumeInfo.imageLinks.smallThumbnail = ''; }\n               //    if( bookObj.volumeInfo.imageLinks.thumbnail) { ids[index].volumeInfo.imageLinks.thumbnail = bookObj.volumeInfo.imageLinks.thumbnail; } else { ids[index].volumeInfo.imageLinks.thumbnail = ''; }\n               //    console.log(ids[index]);\n               //    this.setState({ booksToRead: ids });            //update the value\n          }\n\n\n          setBookRating = (selectedOption, bookObj) => {\n               console.log(\"Update BOOK RATING in DB\");\n               console.log(selectedOption);\n               console.log(bookObj);\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].bookshelfRating = selectedOption.value;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n\n          setBookGenre = (selectedOption, bookObj) => {\n               console.log(\"Update BOOK GENRE in DB\");\n               console.log(selectedOption);\n               console.log(bookObj);\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].genre = selectedOption.value;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          setBookTimestamp = (newDateTimestamp, bookObj) => {\n               console.log(\"Update BOOK Timestamp in DB\");\n               console.log(newDateTimestamp);\n               console.log(bookObj);\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].bookshelfTimestamp = newDateTimestamp;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n\n          addNewTag = (allTagsArray) => {\n\n               console.log(allTagsArray);\n               let prevTags = this.state.settings.tags;\n                    if( prevTags === undefined ) { prevTags = []; }\n               console.log(prevTags);\n               console.log(prevTags.filter(Boolean));\n\n               let difference = allTagsArray.filter(x => !prevTags.includes(x));\n               console.log(\"DIFFERENCE\");\n               console.log(difference);\n\n               const updatedTags = prevTags.concat(difference);\n               this.setState({ settings: {\n                                        tags: updatedTags\n                                   }\n                          });\n\n          }\n\n\n\n          setBookTags = (selectedOption, bookObj) => {\n               console.log(\"Update TAGS in DB\");\n               console.log(selectedOption);\n               console.log(bookObj);\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].tags = selectedOption;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          resetRatingToZero = (bookObj) => {\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].bookshelfRating = 0;\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          resetTimestampToZero = (bookObj) => {\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].bookshelfTimestamp = 0;\n              this.setState({ books: this.state.books });\n\n          }\n\n          resetGenreToZero = (bookObj) => {\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].genre = '';\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          resetAllTags = (bookObj) => {\n\n               // get the book object\n              const bookID = bookObj.id;\n              const clbCopyBookState = [...this.state.books];\n              const getBookObjInState = clbCopyBookState.filter(obj => {\n               return obj.id === bookID\n              });\n\n              const index = clbCopyBookState.findIndex(obj => {\n               return obj.id === bookID\n              });\n              console.log(index);\n\n              clbCopyBookState[index].tags = [];\n              this.setState({ books: this.state.books });\n\n          }\n\n\n          addNewGenre = (newGenre) => {\n\n               console.log(newGenre);\n              let previousGenres = [...this.state.settings.genres];\n              console.log(previousGenres);\n              let included = previousGenres.includes(newGenre);\n              console.log(included);\n              if( included === false ) {\n\n                   // Sort all beer types, then update state\n                   let updatedGenres = [...previousGenres, newGenre];\n                   let orderedGenres = [...updatedGenres].sort();\n\n                   // remove any nulls, false, or undefined\n                   orderedGenres = orderedGenres.filter(Boolean);\n                   console.log(orderedGenres);\n\n                   this.setState({ settings: {\n                                            genres: orderedGenres\n                                       }\n                              });\n              }\n\n          }\n\n\n          changeAlreadyReadView = (selectedOption) => {\n              console.log('CHANGE sortViewAlreadyRead');\n              console.log(selectedOption);\n\n              let sortViewAlreadyRead = 'alphabetical';\n              if(selectedOption) {\n                  if( selectedOption.value === 'rating' ) { sortViewAlreadyRead = 'rating'; }\n                  if( selectedOption.value === 'date' ) { sortViewAlreadyRead = 'date'; }\n              }\n\n              this.setState({ settings: {\n                         sortViewAlreadyRead: sortViewAlreadyRead\n                    }\n              });\n\n         }\n\n\n\n         changeToReadView = (selectedOption) => {\n\n            let newBookCardView = 'alphabetical';\n            if(selectedOption) {\n                 if( selectedOption.value === 'date' ) { newBookCardView = 'date'; }\n            }\n\n            //this.setState({ booksToReadView: newBookCardView });\n            this.setState({ settings: {\n                       sortViewToRead: newBookCardView\n                  }\n            });\n\n        }\n\n\n\n        changeSettingsBookSize = (selectedOption) => {\n\n             console.log('changeSettingsBookSize');\n\n           let newBookSize = 'default';\n           if(selectedOption) {\n                newBookSize = selectedOption.value;\n           }\n\n           this.setState({ settings: {\n                     bookSize: newBookSize\n                 }\n           });\n\n       }\n\n\n\n\n       changeSettingsUseGenres = (selectedOption) => {\n\n            console.log('changeSettingsUseGenres');\n\n          let newGenreSetting = false;\n          if(selectedOption) {\n               newGenreSetting = selectedOption.value;\n          }\n\n          this.setState({ settings: {\n                    useGenres: newGenreSetting\n               }\n          });\n\n     }\n\n\n     changeSettingsUseTags = (selectedOption) => {\n\n          console.log('changeSettingsUseTags');\n\n        let newTagsSetting = false;\n        if(selectedOption) {\n             newTagsSetting = selectedOption.value;\n        }\n\n        this.setState({ settings: {\n                  useTags: newTagsSetting\n             }\n        });\n\n   }\n\n\n\n        changeSettingsColor = (selectedOption) => {\n\n           let newSettingsColor = 'default';\n           if(selectedOption) {\n                newSettingsColor = selectedOption.value;\n           }\n\n           this.setState({ settings: {\n                      color: newSettingsColor\n                 }\n           });\n\n           const localStorageKey = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n           localStorage.setItem(localStorageKey, newSettingsColor);\n\n       }\n\n\n       changeSettingsFont = (selectedOption) => {\n\n          let newSettingsFont = 'default';\n          if(selectedOption) {\n               newSettingsFont = selectedOption.value;\n          }\n\n          this.setState({ settings: {\n                     font: newSettingsFont\n               }\n          });\n\n          const localStorageKey = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n          localStorage.setItem(localStorageKey, newSettingsFont);\n\n     }\n\n\n     resetNotification = () => {\n          this.setState({ notification: null, notificationTimestamp: null, });\n     }\n\n     startNotificationTimer = () => {\n       if(!this.timerId){\n         this.timerId = setTimeout(()=>{\n           this.resetNotification();\n           console.log(\"startNotificationTimer - tick\");\n           console.log(this.timerId);\n      }, 6000);\n       }\n     }\n\n\n\n     // Title work, move \"The\" \"A\" \"An\" to the back for alphabetizing\n     createAlphabeticalSortingTitle = ( title ) => {\n          let updatedTitle = title;\n          console.log(\"createAlphabeticalSortingTitle\");\n\n               if( title.startsWith('The ') ) {\n                    updatedTitle = title.substr(4) + ', The';\n               } else if( title.startsWith('A ') ) {\n                    updatedTitle = title.substr(2) + ', A';\n               } else if( title.startsWith('An ') ) {\n                    updatedTitle = title.substr(3) + ', An';\n               }\n\n          console.log(updatedTitle);\n          return updatedTitle;\n     }\n\n\n\n\n     removeBookFromSuggestions = ( book ) => {\n          console.log(\"removeBookFromSuggestions: \" + book.id);\n          let previousRemoved = [];\n          if( this.state.settings.removedFromSuggestions !== undefined ) {\n               previousRemoved = [...this.state.settings.removedFromSuggestions];\n         }\n          let updatedRemoved = [...previousRemoved, book.id];\n          this.setState({ settings: {\n                     removedFromSuggestions: updatedRemoved\n               }\n          });\n     }\n\n\n\n  render() {\n\n       const books = this.state.books;\n\n       const localStorageKeyColor = 'bookshelf.' + this.props.loggedInID + '.settings.color';\n       const settingsColorLocal = localStorage.getItem(localStorageKeyColor);\n       const settingsColor = settingsColorLocal;\n\n       const localStorageKeyFont = 'bookshelf.' + this.props.loggedInID + '.settings.font';\n       const settingsFontLocal = localStorage.getItem(localStorageKeyFont);\n       const settingsFont = settingsFontLocal;\n\n\n       // run filter operations to separate To Read from Already Read\n       const updatedBooksToRead = books.filter(book => book.alreadyRead === false);\n       const updatedBooksAlreadyRead = books.filter(book => book.alreadyRead === true);\n       // console.log(updatedBooksToRead);\n       // console.log(updatedBooksAlreadyRead);\n\n       return(\n            <>\n            <Header\n               settingsColor={settingsColor}\n               settingsFont={settingsFont}\n            />\n            <Router\n                 books={this.state.books}\n                 logOutUser={this.props.logOutUser}\n                 loggedInID={this.props.loggedInID}\n                 loggedInEmail={this.props.loggedInEmail}\n                 permanentlyDeleteUserAndInfo={this.props.permanentlyDeleteUserAndInfo}\n                 booksAlreadyRead={updatedBooksAlreadyRead}\n                 booksAlreadyReadView={this.state.settings.sortViewAlreadyRead}\n                 booksToReadView={this.state.settings.sortViewToRead}\n                 changeAlreadyReadView={this.changeAlreadyReadView}\n                 changeToReadView={this.changeToReadView}\n                 settingsColor={settingsColor}\n                 changeSettingsColor={this.changeSettingsColor}\n                 settingsFont={settingsFont}\n                 changeSettingsFont={this.changeSettingsFont}\n                 booksToRead={updatedBooksToRead}\n                 editBook={this.editBook}\n                 editBookToRead={this.editBookToRead}\n                 addBookAlreadyRead={this.addBookAlreadyRead}\n                 addBookToRead={this.addBookToRead}\n                 moveBooktoAlreadyRead={this.moveBooktoAlreadyRead}\n                 removeBookFromAlreadyRead={this.removeBookFromAlreadyRead}\n                 removeBookFromToRead={this.removeBookFromToRead}\n                 addNewImagesAlreadyRead={this.addNewImagesAlreadyRead}\n                 addNewImagesToRead={this.addNewImagesToRead}\n                 notification={this.state.notification}\n                 notificationTimestamp={this.state.notificationTimestamp}\n                 updateCoverImg={this.updateCoverImg}\n                 changeSettingsBookSize={this.changeSettingsBookSize}\n                 bookSize={this.state.settings.bookSize}\n                 changeSettingsUseGenres={this.changeSettingsUseGenres}\n                 changeSettingsUseTags={this.changeSettingsUseTags}\n                 useGenres={this.state.settings.useGenres}\n                 useTags={this.state.settings.useTags}\n                 setBookRating={this.setBookRating}\n                 resetRatingToZero={this.resetRatingToZero}\n                 resetTimestampToZero={this.resetTimestampToZero}\n                 resetAllTags={this.resetAllTags}\n                 setBookGenre={this.setBookGenre}\n                 genres={this.state.settings.genres}\n                 tags={this.state.settings.tags}\n                 resetGenreToZero={this.resetGenreToZero}\n                 addNewGenre={this.addNewGenre}\n                 addNewTag={this.addNewTag}\n                 setBookTags={this.setBookTags}\n                 setBookTimestamp={this.setBookTimestamp}\n                 resetNotification={this.resetNotification}\n                 removedFromSuggestions={this.state.settings.removedFromSuggestions}\n                 removeBookFromSuggestions={this.removeBookFromSuggestions}\n            />\n            <footer className={\"clb-bookshelf-footer color-\" + settingsColor + \" font-\" + settingsFont}>\n              Bookshelf &middot; <a href=\"https://github.com/tomatillodesign/bookshelf\" target=\"_blank\">Version 1.0</a> &middot; By Chris Liu-Beers, <a href=\"http://tomatillodesign.com\" target=\"_blank\">Tomatillo Design</a>\n            </footer>\n            </>\n       );\n\n       }\n\n  }\n\n\nexport default BookManager;\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport base from '../base';\nimport { firebaseApp } from '../base';\n\nclass LostPassword extends React.Component {\n\n     constructor(props) {\n       super(props);\n       this.state = {\n            showModal: false,\n            email: '',\n            sentEmail: false,\n       };\n\n       this.handleEmailChange = this.handleEmailChange.bind(this);\n       this.handleSubmit = this.handleSubmit.bind(this);\n\n     }\n\n     sentEmailAddress = null;\n\n     handleShow = () => this.setState({ showModal: true });\n     handleClose = () => (\n          this.setState({\n               showModal: false\n          })\n     );\n\n     handleEmailChange(event) {\n          this.setState({ email: event.target.value });\n     }\n\n     handleSubmit(event) {\n       console.log('Lost password, attempting to send email to: ' + this.state.email);\n       event.preventDefault();\n\n       //this.props.authenticateUser( this.state.email, this.state.password );\n\n           var auth = firebaseApp.auth();\n           const emailAddress = this.state.email;\n\n           auth.sendPasswordResetEmail(emailAddress).then(function() {\n             // Email sent.\n             console.log(\"Reset password email sent\");\n\n           }).catch(function(error) {\n             // An error happened.\n             console.log(\"ERROR: could not send reset password email\");\n             console.log(error);\n           });\n\n           this.sentEmailAddress = this.emailAdress;\n           this.setState({\n                sentEmail: true\n           });\n\n     }\n\n\n\n\n     render() {\n\n          const emailAdress = this.sentEmailAddress;\n\n          return (\n               <div className=\"lost-password-area\">\n                 <button onClick={this.handleShow} >\n                   Lost Password\n                 </button>\n\n                 <Modal show={this.state.showModal} onHide={this.handleClose} className=\"clb-single-beer-notes\">\n                   <Modal.Header closeButton>\n                     <Modal.Title>Lost Your Password</Modal.Title>\n                   </Modal.Header>\n                   <Modal.Body>\n                   { this.state.sentEmail !== true ? (\n                         <form className=\"lost-pw-area\" onSubmit={this.handleSubmit} >\n                          Enter your email below to reset your password:\n                          <div className=\"login-item\">\n                          <input\n                              type=\"text\"\n                              id=\"lost-pw-form-email\"\n                              name=\"email\"\n                              label=\"Email\"\n                              required\n                              onChange={this.handleEmailChange}\n                              />\n                              </div>\n                         <button type=\"submit\" id=\"lost-pw-submit\">Submit</button>\n                         </form> )\n                    : (\n                         <p className=\"sent-email-message\">If an account exists for {this.state.email}, we've sent an email that will allow you to reset your password. Thanks!</p>\n                    )}\n                   </Modal.Body>\n                 </Modal>\n               </div>\n\n          );\n\n     }\n\n}\n\nexport default LostPassword;\n","import React from 'react';\nimport LostPassword from './LostPassword';\nimport Modal from 'react-bootstrap/Modal';\nimport { firebaseApp } from '../base';\nimport Register from './Register';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n         showModal: false,\n         email: '',\n         password: '',\n         error: null,\n    };\n\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePWChange = this.handlePWChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRegistrationSubmit = this.handleRegistrationSubmit.bind(this);\n    this.handleShowRegister = this.handleShowRegister.bind(this);\n    this.handleCloseRegister = this.handleCloseRegister.bind(this);\n\n  }\n\n\n  handleShowRegister(event) {\n       event.preventDefault();\n       this.setState({ showModal: true });\n }\n\n  handleCloseRegister(event) {\n       //event.preventDefault();\n       this.setState({\n            showModal: false\n       });\n}\n\n\n  handleEmailChange(event) {\n    this.setState({email: event.target.value});\n  }\n\n  handlePWChange(event) {\n    this.setState({password: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    this.props.authenticateUser( this.state.email, this.state.password );\n\n  }\n\n\n  handleRegistrationSubmit = (event) => {\n     event.preventDefault();\n     console.log('Registration submitted');\n     const { email, password } = this.state;\n     console.log(this.state);\n  firebaseApp\n       .auth()\n       .createUserWithEmailAndPassword(email, password)\n       .then((user) => {\n            //console.log(user);\n            //this.props.history.push('/');\n\n            // add new user to App-->state and Firebase\n            this.props.registerNewUser(user);\n       })\n       .catch((error) => {\n         this.setState({ error: error });\n       });\n   };\n\n\nrender() {\n\n     const loginError = this.props.loginError;\n     const { email, password, error } = this.state;\n\n     return (\n\n          <div className=\"login-form-area\">\n          <p>Welcome! Bookshelf is an easy, free way to keep track of your reading.<br/>\n          It's for personal use only and your information will never be shared with advertisers or social networks.<br/>\n          If you're new here, <a href=\"/bookshelf/register\" onClick={this.handleShowRegister} >click here to register for a new free account</a>. Or if you've already registered, then simply login below.</p>\n          { loginError === true ?\n               <h2>Incorrect email/password combination. Please try again:</h2>\n               :\n               <h2>Login Below:</h2>\n          }\n          <form className=\"login-area\" onSubmit={this.handleSubmit} >\n          <div className=\"login-item\">\n               <input\n                   type=\"text\"\n                   id=\"login-form-email\"\n                   name=\"email\"\n                   label=\"Email\"\n                   required\n                   onChange={this.handleEmailChange}\n                   />\n                   </div>\n                   <div className=\"login-item\">\n              <input\n                  id=\"login-form-password\"\n                  name=\"password\"\n                  label=\"Password\"\n                  required\n                  type=\"password\"\n                  onChange={this.handlePWChange}\n                  />\n             </div>\n             <button type=\"submit\">Submit</button>\n             </form>\n             <LostPassword />\n\n\n             <Modal show={this.state.showModal} onHide={this.handleCloseRegister} className=\"clb-single-beer-notes\">\n               <Modal.Header closeButton>\n                 <Modal.Title><h3>Register for a New Account</h3></Modal.Title>\n               </Modal.Header>\n               <Modal.Body>\n                    <Register\n                         registerNewUser={this.props.registerNewUser}\n                    />\n               </Modal.Body>\n             </Modal>\n\n        </div>\n     );\n\n     }\n\n}\n\nexport default Login;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// my components\nimport Login from './Login';\nimport Register from './Register';\nimport Logout from './Logout';\n\n\nexport default function LandingPage(props) {\n\n       return (\n            <div className=\"landing-page-area single-page\">\n             <h1>Login & New User Registration</h1>\n                 <div className=\"login-register-area\">\n                 <Login\n                         authenticateUser={props.authenticateUser}\n                         loginError={props.loginError}\n                         registerNewUser={props.registerNewUser} />\n                 </div>\n            </div>\n\n       );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Header from './components/Header.js';\nimport BookManager from './components/BookManager.js';\nimport LandingPage from './components/LandingPage.js';\n\nimport base from './base';\nimport { firebaseApp } from './base';\n\nclass App extends React.Component {\n     constructor(props) {\n          super(props);\n\n      this.state = {\n         loggedInID: '',\n         loggedInEmail: '',\n         loginError: false,\n       };\n\n     }\n\n\n     componentDidMount() {\n          console.log(\"App.js mounted\");\n     }\n\n\n\n     registerNewUser = (user) => {\n\n             const newUserID = user.user.uid;\n             const newUserEmail = user.user.email;\n              console.log(newUserID);\n\n             // Create new Journal view if it doesn't exist yet for this user\n              firebaseApp.database().ref().update({\n                 [newUserID]: {\n                      ownerID: newUserID,\n                      ownerEmail: newUserEmail,\n                      books: [],\n                      settings: {\n                                   color: 'default',\n                                   font: 'default',\n                                   sortViewToRead: 'alphabetical',\n                                   sortViewAlreadyRead: 'alphabetical',\n                                   bookSize: 'default',\n                                   genres: [\n                                        'Fiction',\n                                        'Nonfiction',\n                                        'Memoir',\n                                        'Children',\n                                        'Cooking',\n                                        'Historical Fiction',\n                                        'Mystery',\n                                        'Science Fiction',\n                                        'Young Adult',\n                                   ],\n                                   customFields: [],\n                              },\n                         },\n              });\n\n              this.setState({\n                   loggedInID: newUserID,\n                   loggedInEmail: newUserEmail,\n               });\n               localStorage.setItem('bookshelf.loggedInID', newUserID);\n               localStorage.setItem('bookshelf.loggedInEmail', newUserEmail);\n               console.log(\"REGISTERED AND Logged in: \" + newUserID);\n\n        }\n\n\n        authenticateUser = (email, password) => {\n\n                 console.log(\"AuthenticateUser: \" + email);\n                 // const loggedInID = user.user.uid;\n\n               firebaseApp\n                    .auth()\n                    .signInWithEmailAndPassword(email, password)\n                    .then((user) => {\n                      console.log(\"User successfully LOGGED IN\" + user.user.uid);\n                      this.setState({\n                           loggedInID: user.user.uid,\n                           loggedInEmail: user.user.email,\n                           loginError: false });\n                      localStorage.setItem('bookshelf.loggedInID', user.user.uid);\n                      localStorage.setItem('bookshelf.loggedInEmail', email);\n                    })\n                    .catch((error) => {\n                      console.log(\"ERROR: User trying to log in\");\n                      this.setState({ loginError: true });\n                    });\n\n                }\n\n\n\n      authHandler = async authData => {\n\n           //console.log(authData);\n           const user = firebaseApp.auth().currentUser;\n\n           console.log(user);\n           if( user !== null ) {\n                const userUID = user.uid;\n                console.log(\"Current User ID: \" + userUID);\n                console.log(\"Current User Email: \" + user.email);\n\n                //update state\n                this.setState({\n                     loggedInID: userUID,\n                     loggedInEmail: user.email,\n                       });\n               localStorage.setItem('bookshelf.loggedInID', userUID);\n               localStorage.setItem('bookshelf.loggedInEmail', user.email);\n\n           } else {\n                console.log(\"authHandler == no user found\");\n           }\n\n      }\n\n\n\n\n   logOutUser = event => {\n\n        firebaseApp.auth().signOut().then(function() {\n          // Sign-out successful.\n          console.log(\"Logged OUT successful\");\n\n        }).catch(function(error) {\n          // An error happened.\n          console.log(\"ERROR: Trying to log out\");\n        });\n\n        //update state\n        this.setState({\n             loggedInID: '',\n             loggedInEmail: '',\n          });\n        localStorage.removeItem('bookshelf.loggedInID');\n        localStorage.removeItem('bookshelf.loggedInEmail');\n\n        base.reset();\n\n   }\n\n\n   // Delete user not working ????\n   permanentlyDeleteUserAndInfo = user => {\n\n        console.log(user);\n        const userUID = user.uid;\n\n             base.remove(userUID)\n            .then(() => {\n              console.log(\"User \" + userUID + \" permanently deleted\");\n\n            })\n            .catch(error => {\n              //handle error\n            });\n\n            //update state\n           this.setState({\n                loggedInID: '',\n                loggedInEmail: '',\n             });\n           localStorage.removeItem('bookshelf.loggedInID');\n           localStorage.removeItem('bookshelf.loggedInEmail');\n\n       }\n\n\n\n     render() {\n\n          let loggedInID = this.state.loggedInID;\n          let loggedInEmail = this.state.loggedInEmail;\n          const loginError = this.state.loginError;\n\n          const loggedInIDLocal = localStorage.getItem('bookshelf.loggedInID');\n          const loggedInEmailLocal = localStorage.getItem('bookshelf.loggedInEmail');\n          console.log(\"LOCAL STORAGE: \" + loggedInIDLocal);\n\n          if( loggedInIDLocal !== null ) { loggedInID = loggedInIDLocal; }\n          if( loggedInEmailLocal !== null ) { loggedInEmail = loggedInEmailLocal; }\n\n       return (\n         <div className=\"App\">\n\n           { loggedInID !== '' ?\n               <>\n                     <BookManager\n                          logOutUser={this.logOutUser}\n                          loggedInID={loggedInID}\n                          loggedInEmail={loggedInEmail}\n                          permanentlyDeleteUserAndInfo={this.permanentlyDeleteUserAndInfo}\n                     />\n               </>\n               :\n               <>\n                    <Header\n                       logOutUser={this.logOutUser}\n                       permanentlyDeleteUserAndInfo={this.permanentlyDeleteUserAndInfo}\n                    />\n                    <div className=\"logged-out-area\">\n                       <LandingPage\n                              registerNewUser={this.registerNewUser}\n                              authenticateUser={this.authenticateUser}\n                              loginError={loginError}\n                              logOutUser={this.logOutUser}\n                         />\n                       </div>\n             </>\n             }\n\n         </div>\n       );\n     }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}